%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: FHNvsSFHNPPP.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: cytryn
%%CreationDate: 2016-06-01
%%BoundingBox: 0 0 487 333
%%HiResBoundingBox: 0 0 486.4004 332.4209
%%CropBox: 0 0 486.4004 332.4209
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 6738 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD80FFA87DFFFFFF7DA8FD49FFFD05A8FD2BFF7D7DFF7DFFA87DFD%2AFFA8A8FD1EFF52527DFFA8FD2AFF27FFA85252FF27FD29FF7D7D52A8FD%1DFF7D52A8FF527DFD13FFA8FD15FF52FF7D2752FF52FD28FF527DFFFF7D%FD21FF27A8FD29FFFD077DFD27FF52A8FFFFA87DFD21FF7DA8FD12FFA8A8%FD16FF7DFFFFFF7DFD27FFA87DFD04FF7DFD21FF7DFD13FFA8FD43FF7DA8%FD04FF7DA8FD20FFA8A8FD11FFA8FD44FF7DFD05FF7DFD21FFA8FD56FF7D%7DFD05FF7DA8FD20FFA8A8FD10FFA8A8FD05FFA8FFA8FD3BFFA87DFD05FF%7DA8FD20FFA8A8FD10FFA8FD05FFA8FFFFFFA8FD3AFF7DA8FD05FFA87DFD%20FFA8A8FD0FFFA8FD05FFA8FD05FFA8FD39FF7DA8FD05FFA8A8FD20FFA8%FFA8FD05FFA8A87DA87DA8FD077DA87D7D7DA8A8FD3CFF7DFD06FFA87DFD%20FFA8A8FFFFFF527D527D7DA87DA87DA8A87D7DA8A8A87DA8A8A87D7D52%7DA8FD39FF7DFD06FFA87DFD08FFA8FFA8FD15FFA8FFFFFF527DFD16FFA8%7D52FD36FFA8A852A8A8FD05FF52FD08FFA87DA8A8FFA8FFA8FD10FFA8A8%FF7D7DFD0AFFA8FD05FFA8FD08FF7D52FD34FFFD04A8FFA8A8FD04FF7DFD%08FFFD06A87DFD11FFA8FFFFA87DFD09FFA8FD05FFA8FD0AFF7D7DFD12FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8A87DA8A8A852FFA8A8A8FFA8FF52A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8%FD11FFA8A8FFA87DFD09FFA8FD04FFA8FD0CFF52A8FD2EFFA8A8A8FFFFFF%A87DFFFFFFA8A8FFFF7DA8FD1FFFA8FFFFFF52FD1BFFA87DFD2BFFFD05A8%FD04FFA87DFFFFFFA8A8A8FF7D7DFD1FFFA8A8FFFF7D7DFFA8FFA8FFA8FF%A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF52A8FD29FFA8A8A8FD07%FFA8A8FD05FFA8FFFF52FD1FFFA8FFFFFFA87DFD06FFA8FD05FFA8FD0EFF%A852FD24FFFD05A8FD0AFFA8A8FD05FFA8A8A87D7DFD1EFFA8A8FFFFFF52%FD06FFA8FD04FFA8FD10FF52A8FD20FFFD05A8FD0DFF7DA8FD07FFA8A87D%7DFD1DFFA8FD04FF7D7DFD1BFF7D7DFD17FFA8FFFD07A8FFA8FD10FF7DA8%FD09FF7D52527DA8FFA8FFA8FD16FFA8A8FFFFFFA852FD04FFA8FD05FFA8%FD11FF52FD0FFFA87DA8FD077DA87DFD04A8FFA8FD11FF7DFD0CFFA87D7D%527D7D7DA8FD15FFA8FD05FF52A8FFFFA8FD05FFA8FD12FF7DA8FD0EFF7D%A87DA87DA87DA87DA87D7D7DA8FD067D52FD047DA8A8FD07FFA87DFD29FF%A8A8FD04FFA827FFFFA8FD04FFA8FD13FF52A8FD23FFA8FFA8A8FD057DFD%05FF7DFD29FFA8FD06FF7D52A8FD19FF52A8FD2AFFA87D527DA8FF7D7DFD%29FFA8A8FD06FF7D277D7DA87DFD08A8FFA8FFA8FFA8FFA8FFA8A87D527D%FFA8FD2CFFA87D7D7DFD2AFFA8FD07FFA8FFA8A8FD157DA8FD10FFA8A8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A87DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFD14FFA8A8%FD06FFA8FFFFA8FD19FFA8FD0CFF527DFD36A87D52FD14FFA8FD25FFA8FD%59FFA8A8FD05FFA8FD1EFFA8FD41FF527DFD16FFA8FD05FFA8FD61FF5227%FD16FFA8A8FD66FF2752A8FD11FFA8FFFFFF7DFFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8A8A8FD%3EFFA8FFA8FD11FFA8A87DA8A87D7DA8A8A87DA8A8A87DA8A8A87DA8A8A8%7DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8F827A8FD56FFA8FD%7FFFA8A8FD27FF527DFD55FFA8FD28FF7D7DFD7EFF7DFDFCFFFDFCFFFDFC%FFFD8DFFA87D27A8FFA87DFD49FFFD05A8FD2BFF7DA87D27A8FF7DA8FD2B%FF7DA8FD1CFF525252FFA8FD2AFF27FF527D27FF7D7DFD29FF7D277D277D%FD1BFFA852A8FF52A8FD13FFA8FD15FF52FF7D7D52A87D7DFD27FF7D5252%FFFFFF52FD1FFFF8A8FD29FF7D7DA87DA8A852FD27FF5252A8FFFFFFA87D%FD1FFF7DA8FD12FFA8A8FD16FF7DFFFFFFA8FD27FF527DFD06FFA8FD1FFF%7DFD13FFA8FD42FFA852FD27FFA8A8FD11FFA8FD43FF7D7DFD07FF7DFD1F%FFA8A8FD55FF52FD07FFA87DFD1FFFA8A8FD10FFA8A8FD05FFA8FFA8FD3B%FF7DA8FD07FFA8FD1FFFA8A8FD10FFA8FD05FFA8FFFFFFA8FD3AFFA8FD28%FFA8A8FD05FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FD05FFA8FD42FF%A8FD1FFFA8FFFD0E7D52FD057D52FD067D52A8FD38FF7DFD07FFA852FD1F%FFA8FF7D7DFFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFFFFFA8FFA8FF%A852FD38FF52A8FD07FF7DFD07FFA8FFA8FD15FFA8FFA87DFD0CFFA8FD0D%FF7D7DFD35FFA8A87DA8A8FD0EFFA87DA8A8FFA8FD12FFA8A8FF52FD0BFF%A8FD05FFA8FD09FF52FD34FFA8A8FFFFFFA8A8FD05FFA8FD07FFFD06A87D%FD11FFA8FFFF7D7DFD09FFA8FD05FFA8FD0AFF7D7DFD12FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DA8A8FF%7DFFA8A8A8FFA8FFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD11FFA8A8FF%A87DFD09FFA8A8FFFFFFA8FD0BFFA852FD2FFFA8A8A8FD04FF7DA8FFFFA8%A8FFFFFF7DFD1FFFA8FFFFFF52FD09FFA8FD11FF7DA8FD2CFFFD04A8FD05%FF7DFFFFFFA8A8A8FD22FFA8A8FFFF7D7DFFA8FFA8FFA8FFA8FFA8FFFFA8%A8FFA8FFA8FFA8FFA8FFA8FFA8FF52FD2AFFA8A8A8FD0DFFA8A8FFFF7DFD%1FFFA8FFFFFFA852FD06FFA8FD05FFA8FD0EFF7D7DFD24FFFD05A8FD0BFF%A8FD05FFA8A8A85252FD1EFFA8A8FFFFFF52A8FD05FFA8FD04FFA8FD0FFF%A852FD21FFA8FFA8A8A8FD0EFF7DA8FD06FFA8A8527DFD1DFFA8FD04FFA8%52FD05FFA8FD15FF52A8FD19FFA8FFFD05A8FFA8FD11FF7DFD09FF7D5227%7D7DFFA8FD18FFA8A8FD04FF52A8FFFFFFA8FD05FFA8FD10FFA852FD0FFF%A87D7D527D527D52FD047DA87DA8A8FFA8FD1EFFA8FD0652A8FD15FFA8FD%05FF7D7DFFFFA8FD05FFA8FD12FF7DA8FD0EFF7D7DFD07527D527D527DFD%09527D7DA8A8FD09FF7DFD0FFFA8FFA8FD16FFA8A8FD05FF52FFFFA8FD04%FFA8FD13FF7D7DFD23FFA8A87D7D5252527D7DA8FD04FFA852FD28FFA8FD%06FFA852FD1BFF52FD2AFFA87D2752A8FFFF5252FD28FFA8A8FD06FF527D%FFA8FFA8A8A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FF7D7DFD2CFF%7D52527D52FD29FFA8FD07FFA8527D7D52FD177D52A8FD0CFFA8A8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D%52FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFD14FFA8A8FD07%FFFD05A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0C%FF527DFD21A8FFFD13A8FF7D52FD14FFA8FD7FFFA8A8FD05FFA8FD60FF52%7DFD16FFA8FD05FFA8FD61FF5227FD16FFA8A8FD66FF5252A8FD15FFA8FD%66FFA8FFA8FD11FFFD05A87D7DA87DA8A8A87DA8A8A87DA8A8A87DA8A8A8%7DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A8F827A8FD56FFA8FD27FF%A8FD57FFA8A8FD27FF527DFD55FFA8FD28FF7D7DFD7EFF7DFDFCFFFD04FF%FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2016-06-01T15:39:46-07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>176</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7Pp35hX6eXNV8630El1o&#xA;Ru57ewsLY2cDW9rYzy273M015PaozTSR148/hHEBa8iVUVpfnaW68yaBLDP9Z8uec9Pa80ZXjEc1&#xA;tNBCkxRiPtJNDIW+LdWUipBHFVnGKuxV2KuxV2KuxV2KuxV2KuxVjEP5i+W59ai0y3aaeOWc2a6p&#xA;HEzWH1sKW+rfWPsNJRT9mor8JPLbFWT4q7FXYq7FXYq7FXYq838x+fPOeneaZ9BsrCG6FzPHb6Ze&#xA;ehKUje5sbiaBZwJh6lLi1JkZSgWPqASGxVmtt5i0248xX/l+J66hp1tbXdyu1Al28yRjrXkPq5Lb&#xA;dCvjiqZ4q7FXYq7FVkkyRtGrfalbggHc0J/UCcVX4q7FXYq7FXYq88b8pYrimnXN7JDoenalJq+g&#xA;ralPWjkvPWN1bzpPFPE8avcM0LqA68tipQMyqM8s/l1Jo+qaOJbs3Oj+VbA6d5djk4tcn1lRZZ7l&#xA;0SGPkscYijVV+zVmJZtlWb4q7FXYq7FXYq7FXYq7FXYqxHzN9Z1/X4vKMErwaYluL3zFNExSR4JG&#xA;aO3s1cbp9YaNzIQa8EIH26hV35g2Nnp/5f3TWUEdtb6GLfULWGJQkcQ02eO6AVVACqBDTbantirL&#xA;sVdirsVdirsVdirsVdirFNK8saVbfmTr3mBLbhqV7Y2MUlwJJTzjBlX4oy5jB/cKBRR092qqyvFX&#xA;Yq7FXYqhLcevdSXVaxx1hgHbY/vG+lhx+j3xVF4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FWLeRl+sXXmTWG+J7/V7iBGPaLTgtgEHsJLeRvmxxVG+e7b615H8w2vHn6+mXkXEmledu60r9OKp&#xA;jpFz9a0qyueRb14IpOR6nmgap+/FUXirsVdirsVdirsVdiqQlmj85XE1Tw+pWcLjsPVmuuLf8Gir&#xA;9OKp9irsVdiqHvpXEawxNxnuD6cZHVRSrP8A7Fan50GKqsUUcMKRRgJFGoVV7BVFBiqFje6vKyRy&#xA;G3tT/dMoUyOP5/iDBVPYUqeu2KqkE8qy/VrinrU5JIoosijqQN6Edx/mFUTirsVdirsVdirsVdir&#xA;sVdirsVdirsVdiqjeXtrZw+tcyCNKhRWpJY9FVRUsT4DFWK/lbqFpceVYURuNw895dSwOpRwLm9m&#xA;lrRgCwq/2vHFWV3lsl1aT2z04TxtG1RUUdSp2PXriqRflzcvc/l/5anf+9fS7P1QakiQQIHG/g1R&#xA;irIsVS271+ztbqS1mSQSoOSgBSHUxvJVfi/4rK/FTf78VR7TRoqtIwj5bAOQN6Vp9wxVfirsVdir&#xA;sVSUwev5h1WKvFm0+y4P/KwmuyrD/VO+KpGNc82+ZNXvtP0GWDR9N0lo7bUdUniNzcPePCkzwW0R&#xA;aONREsqBpX5fFVQm1cVRQ8japJve+cNbuWO7BGsrZfkBbWsRAHz+dcVbP5fgih8x67Q9f9NI/EJX&#xA;FUNafl7p1xI9z+l9c4VMduf0tfV4A/E1fV6Ow+kAHFXXH5eafLOlour64UK87murXxHpmoC7yftn&#xA;8AcVRB8g3EQ/0DzTrlmw+wTcw3YHehF7Dcg/TiqA1Wf8wPL0Bursx+Z9Lt/3hntYPq2pwcermFC8&#xA;V0nGvMRCN6H4VY4qy/R9X0/WNLtdU06ZLiyvI1lgmjIZWVh4jw6HFUZirsVdirjWhpsexO+Kof09&#xA;R/3/AA/8im/6qYq709R/3/D/AMim/wCqmKu9PUf9/wAP/Ipv+qmKu9PUf9/w/wDIpv8AqpirvT1H&#xA;/f8AD/yKb/qpirvT1H/f8P8AyKb/AKqYqpzPdQRmWe7t4ol+07xlVHzJlpiqXjVtTufh0tUugf8A&#xA;j4eJ4rce/Nnq/wDsFPzxVemmXdvJJqV5dx3Fwis3qPC3GJAKssSCT4fn9o9ziqQ+RdGvpvy98sP6&#xA;0dvepp1rPHKsRLxySwrI619SjKS1G8cVZFp17qNyXgneGC+gp68HpMRQ9HQ+oOSN2P0HfFUj/Lpb&#xA;yLQ7rS1mhD6PqN9YsnpN8KLcPLB/uwdbeWNvp79cVZT6eo/7/h/5FN/1UxVDT6QbicTXBheQcPjE&#xA;bBx6fIrxPqEAr6jEbdcVS8eSdLCqOb8hKszsFjBcoFAVvgpT4T95xVkOKuxV2KuxVKrb/lKtR/5g&#xA;bH/k9d4qkHlmeHS/PPm3RZisQvJbbXbIsQOUd1AtrMFr14T2TM3hzHtirL/rdr/v6P8A4If1xVDX&#xA;19AUW3inUSXB4cwwqiUq71rtQdPcjFVU3mn28BPrRpFEvQMNlUdgPbFVKxlgSNpZpkE87epIOS/D&#xA;XZU6/srQfj3xVE/W7X/f0f8AwQ/rirvrdr/v6P8A4If1xVg9i8XlTz59QgkX/DnmxpJraJSClrq6&#xA;D1JkWmypeRgyAf79Vu74qz3FXYq7FXYq7FXYqoz3tlB/f3EcVOvN1X9ZxVCf4j0UmkV0twR2tw05&#xA;+6IPirX6WupdrXTbiTwebjAn08z6n/CYq16Gv3APrXMVkh/Ytl9WQD/jLKAv/JPFV8OhackomlRr&#xA;q4G4muWMrA/5PL4U/wBiBiqYYqkPn69Nj5G8w3i/bt9Nu5EHcssDlQPcnYYqmmk2S2GlWdioAW1g&#xA;igAHSkaBfbwxVbqOnC6CSxyGC8gqbe5UVK16qw/aRv2l/jQ4qwjUNXvfKnmafW72zk/ReqrFHrUd&#xA;urS8LiBfTivYAoLSK0XGOWP+8AVCoahxVmGieZ/LuuQ+to+pW1+g+16EquykbEOoPJSO4YVxVM8V&#xA;dirsVdirsVdiqVW3/KVaj/zA2P8Ayeu8VY95/wD9w+seXvOCVWPT7n9GasR3sNTZIuTUFaRXSwP7&#xA;DlirNsVQllWeSS8b7L/Bb/8AGIftf7M7/KmKuuD691HbDdI6TT/Qf3a/Swr/ALH3xVF4q7FXYqx7&#xA;z95ck8weV7uytm9LU4eF3pNx3ivrZhLbyDp0kUV9q4qivKHmCPzF5Y0zW0jMJv7dJZID1ilIpLEf&#xA;eOQMp+WKpvirsVadeSlakVBFRsRXwxViT/l0juWbzJr+5rxGoOoH/AqMVUX/ACr0qT+91fV5f+Ml&#xA;3z/4kpxVdB+WVpbbWmt6nbJ2VDZtT/ZPbO344qi/8GakB8Hm3WkYfZYGwalP8l7RlP0jFXHyt5oS&#xA;ph856i57C5ttLcV/55WkG3j+vFXfov8AMWH+48wadcKP2bvTJORFf54LuID/AIA4qt/SH5k2v9/o&#xA;2m6jGB9qzvpYJSfaKeAp/wAlsVWr+YumWsiQ+YbG98tySMEWXUY0+qlzsB9ct3ntlr+yHkUnwxVd&#xA;+Y7rN5aTTlNX1i9sdPQD9pLi5jE30LAJGPsMVZTirsVaZFdSrgMp2KkVBGKpDqX5feRdTf1L/wAv&#xA;6fcy9RK9tEZK/wCvx5fjiqlaflx5Ls5YpLXTVhaBleEJJMFUqarRefHY9qYqyTFXYq7FXYq7FUqt&#xA;v+Uq1H/mBsf+T13iqI1vRrDW9HvdI1CP1bG/he3uE6EpIpU0PYitQexxVgdj53by3aReVvPFwdPv&#xA;LYLBH5jmBSxvLQVC3BuPsQTMi8HSUrRzVeS74qzSDzR5amtvVstTtLqJQAgt54pKk7Iq8GO7HYYq&#xA;jrOB4oi0tDPKfUmI3HI7UHsoAUfLFVfFXYq7FUp13zZ5Z0CEzazqltYqPspNIokc0qFjjrzdj2VQ&#xA;Se2KpN+WEN/b+XpY722axa6vb/UrSykXhJDa6hezXMMci/suFk+Jf2a8e2KsvxV2Kpf5iuNbt9Dv&#xA;p9CtYr7WY4XawtJ5PSikmA+FWfsK/L5jqFUJaXfnNrSFrrS9PjuWjUzxpfTFVkIHIA/VNwDiqt9Z&#xA;81f9W6x/6Tpv+yTFXfWfNX/Vusf+k6b/ALJMVd9Z81f9W6x/6Tpv+yTFXfWfNX/Vusf+k6b/ALJM&#xA;Vd9Z81f9W6x/6Tpv+yTFXfWfNX/Vusf+k6b/ALJMVWTP5knheGfS9PlhkUpJG95KyspFCGBtKEHF&#xA;WOaX5Em0zUra9tdNh9OxaR9O0+TVruS0tXlXg728D2xWM8CygDZQxCgVxVk31nzV/wBW6x/6Tpv+&#xA;yTFXfWfNX/Vusf8ApOm/7JMVd9Z81f8AVusf+k6b/skxV31nzV/1brH/AKTpv+yTFVk915vEMhh0&#xA;zT3mCkxo1/MFLU2BP1M0FcVVvLc+v3Gg2M3mC1hstakiU39rbSGWKOXuEcjf8adKnqVUyxV2KuxV&#xA;2KpVbf8AKVaj/wAwNj/yeu8VTXFUuitTdM1+HKSybWzUqBCOgK91k+0R8u4GKpdceQPKN9cG41TR&#xA;dNvpCCoEllAVo32iQ6uST7n+OKof/lU/5Wf9Sbof/cNs/wDqnirX/Kp/ywBrH5T0mA92gsoISR4E&#xA;xopOKt/8qq/Lj/qXLH/kSuKtH8qfy3IofLdgQeoMKkH5g4qmej+TPJ+iSGXRtC0/TJD1eztILdt/&#xA;eNFxVHXv7uSC6HSJuEv/ABjkoD9zcWJ8AcVRWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;5XJovnqP87F1qGy1eTyj6aW8sbasv1L13jat5HZfWR+7SixtE0e5PqKKjdV6pirsVdirsVSt/Men&#xA;o7KYb0lSQaWF6w28CISDiqVW/mPTx5n1BvRvaGysgP8AQL2u0t129GvfFUfda9plxA8LRX4SSivT&#xA;T77da/Ev9z+0NsVVR5l00Cghvqf9s++/6o4q7/E2nf75vv8AuH33/VHFXf4m07/fN9/3D77/AKo4&#xA;q7/E2nf75vv+4fff9UcVd/ibTv8AfN9/3D77/qjirv8AE2nf75vv+4fff9UcVd/ibTv9833/AHD7&#xA;7/qjirTeY9MZSrQXzKwoynTr4gg9j+5xVKfJH5peTPO3qDy7cz3LQoHnElpdQqlTTiZJY1iLeysc&#xA;VZZirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqBhspk1u7vTT0Z7a2hTf4u&#xA;UMk7NUeFJlpiqOxV2KuxV2KuxV2KuxV2KuxVifnVvNqahpC6DcXCRXrXFldpDFBJHC0kLPDeSNLG&#xA;5UQvH05UatKFqYqyzFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYqx668/wDlK11+HQJb4nU550tEjjhnkjW5kjaZIJJ442hjkaJGcI7g8d8V&#xA;TQ61pY1kaK1wq6o1v9bS2YEM0HP0y6Eji3FtmCmq1FachVVG4q7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FUtm8zeXIPrfrarZxfUGZL7ncRL6DLEZ2EtW+AiFTIeX7PxdMVTLFXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXglxp8kvlTQ7O7hvp77RfOl5cea10xbqS+iSf8ASBS4/wBCBuqSR3MJR49+&#xA;LClOyqbaRF5j9L8v9P1Ca4k1+HXL2+gF65bUE0FY7tFa8LVerRywI3LfkVB+IGir2XFXYq7FXYq7&#xA;FXYq7FXYq7FUi82+dNE8rWkM2oGWa6vJPR07TbSMz3l3NSvpwQruxp1Joq/tEYqxoaZ+Znm5xJqt&#xA;2/krQzummabJHNqso/5eLwq8UA/yIVLf8WYqmX5evrNrPr/l/U9Rk1ZNEvUhsdQuafWXt57aK5RJ&#xA;2UKrvGZSvOnxCld8VZhirsVdirsVdirsVYTrv5XafrPmmPX572aMrLE8togASSJLae2lhJr0nW4X&#xA;mafZSgpUnFVXSNR81S/mp5isrq0K+W4dO086dciaJl9bnO0h9IMZFaT1CpJUbRDxFVWY4q7FXYq7&#xA;FUNLI73ccEbFQg9Wcjw3CL/sjU/R74qicVdirsVdirsVUks7SO6lu0gjW6nVI57hVUSOkRYxq7gc&#xA;mCeo3EHpU+OKuFnaLdveLBGLySNYZLkKvqNGjMyIXpyKqzsQOgJPjiqrirsVdirsVdirsVdirsVd&#xA;irAPIWnHW/Mes+fNRj5Ty3E+k+X433+radYytC7KP2XuZ43kfvx4jtirP8VSrStWtbzV9asobf0p&#xA;tNnhhuZtv3rSW0cyttv8KSBd/DFU1xV2KuxV2KuxV2KuxVJLZ4YvOV/EEo9xY2krP2JSW4UD50/V&#xA;iqd4q7FXYqsnmjhheaQ0jjBZj7DFVKxheOJpJRSedvUmHWhIAC/7FQF+jFV813bwsEdvjIqEUFmo&#xA;O/FQTT3xVfFLHKgkiYOjdGU1BxVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSryxZ6RZ6QsGkT&#xA;/WLET3TiXkH/AHslzI8y8gAPhmZ19qUxVNcVSrStQ0q41fWra0tvRvLKeGPUZuCL60j20ciNyUln&#xA;4xOq1bwp0xVNcVdirsVdirsVdirsVYj5n1RtGn1/XUt2um0fS7W/NshAaRIGvWkVa7VMfKnviroP&#xA;NPnW4gjnh8piSGVQ8brqNvRlYVBHw9xiqp/iLz3/ANSj/wBzG3/5pxV3+IvPf/Uo/wDcxt/+acVQ&#xA;s3mHzxcXKwf4SqsBWWZf0hb0J39MV49iOX0DxxVVuPNPnmFAT5Rq7kJGv6Rt/iY9B9n6T7b4qttd&#xA;Z89woS3lP1Jn3llOoW4LH5U2A7DtiqGvPOOvaJNHqOteXW03RJZY4dRvVu4Z1gMrCOO4dF4kIGYC&#xA;Ruy/EdlxVnWKuxV2KuxVxIAJJoBuScVQ/wCktO/5aof+Ri/1xV36S07/AJaof+Ri/wBcVd+ktO/5&#xA;aof+Ri/1xV36S07/AJaof+Ri/wBcVd+ktO/5aof+Ri/1xV36S07/AJaof+Ri/wBcVd+ktO/5aof+&#xA;Ri/1xVo6npwFTdQgDqfUX+uKpZLr6Xspg025iihU0l1CQqV+UKE/Gf8AK+yPfpiqVaBJYeWtPjtr&#xA;bU01XR2uLh3uecJmhknuHlkLelxV0EjsDQVX37KsoGp6cRUXUJB6H1F/riqWaXq/ld9W1lLOSKO+&#xA;inhGpyFgPUlNtG0ZBJ+KkJRdsVTT9Jad/wAtUP8AyMX+uKpHqTXcmou1lfKbaUJyjWf4uRjljfgv&#xA;KopVGAWlW+k4q4+Y9Y9OMx6WwDSrEpYyuSrKvxMPSUgKXFTv0PzxVkmKuxV2KuxVKI4opvMuqRSq&#xA;Hik0+ySRGFQytLdggg9iMVSb8sJpLfQrjy3cOz3nla6k0ljIau1tGBJYyHck87OSIk/zVxVmGKqd&#xA;xOkEDzPUqgrxG5J7ADuSdhiqyzheOGstPXlJkmI3+JuwPgooo9hiqnEPrF2853igJih936SN9B+A&#xA;fI+OKovFVC/sLPULG4sL2Jbizu43guYHFVeORSrqw8CDTFWLflxf3sVle+VtUmafVvLEos3uJDV7&#xA;mydedjdMe5kg+Fz/AL8R8VZhirsVdirsVdirsVdirsVdiqDutZ0u1k9Ka4X1+0CVklPyjTk5+7FV&#xA;D6/qtztZ2Poof933h4D5iJeTn5NxxVw0X1256ncNfdxAQI7cf88lry/2ZbFUzACgACgGwA6AYqlX&#xA;lnRYdH0cafHP9ajE91N6tAKm5uZJ2WgLfZMvH6MVUj6mhy1ALaI5qQNzak/8yT/wn+r0VQmk655e&#xA;/wAaaxolvA9trEsFtqc0z04XsLp6CzQHk3JYvSWN9hQ08a4qyXFXYq7FXYq7FXYq7FUqtv8AlKtR&#xA;/wCYGx/5PXeKsf1cSaH+ZGm6nGyx2PmeA6TelhVRe2ge5snNCu8kRnjJ8Qg8MVZhxuv9+R/8Af8A&#xA;mvFUJIt1cXixeohit6SSHgaGQ/YX7fb7X/A4quvpL6OEJFInrzMIof3Z2Zurfa/ZUFvoxVWgt54Y&#xA;UhjkThGoVaoxO3iefXFV/G6/35H/AMAf+a8Vdxuv9+R/8Af+a8VYb5tE2g+aNG838gbSRk0PXeIK&#xA;gW13L/ok7VYj9xdsq17LK5xVm+KuxV2KuxVgF7+cNraTNEfKPmqYqSOcGjXEimhpUEYqgn/O2v8A&#xA;deSfNXt6uj3i/wDEY5MVVB+blzIoP+HdZtyR0bRdZmI+dLSMfccVWy/mpbqU+uprlkjmgdPLeqIB&#xA;9MsU1aey/Rirm/Mv8smYjUtW1I8ePMX9lqdpH8WwLK1vbx0+YpiqcaL+Zn5SSL6Gl+Y9GiNafV1u&#xA;YIHr7xsyNXx2xVllreWd3EJbSeO4iPSSJ1dfHqpIxVWxV2KpH5LsLKx8vxwWV/HqVs1xdzpeQ8TG&#xA;xuLuWZlBVpB+7aQod+o7dMVTwgEUO4PUYqwvzd+WdnrX1W40+9m0nUtOkabTLu3NHtpHFH9E/spI&#xA;NpI2DRsOqYqgba4/PLSU9K6sdF80RpstxDczaXcsPF0aG4hLePHiPbFUz0rzP5/uLy3g1HyU9jDJ&#xA;IEuLtdRtJ4405UMgA4SOKb041xVl+KuxV2KuxV2KpVbf8pVqP/MDY/8AJ67xVD+d/L0vmDyzeafb&#xA;SCDUQEudLuj/ALpvbZxNay/JZo1r4ioxVvyz5qg1zyta64sLQyTIVuLFv7yG7jcwzWzVp8cc6tH8&#xA;xiqbWcDQwASENMxLzOOhdtzT2HQe2KqVsfrFy91/uqOsNv77/vH+lhQfKvfFUXirsVdiqB17RbDX&#xA;NFvtG1BPUstQgktrhe/CRSpKnswrUHscVSj8vNavtT8tRxaowbXNKlk0vWSP2ru0PpvLTsJ14zL/&#xA;AJLjFWS4q7FVk88FvBJPPIsUESl5ZXIVERRVmZjsABuScVXgggEGoO4I6UxV2KuxV2KuxVB6jouj&#xA;6mnDUrC3vUpTjcRJKKb7UcN4nFWLXf5LflVcy+t/hmytZj/u6xQ2L9j9q1MLdsVQ8v5deYNHP1jy&#xA;X5nvbV03XSNZlk1XTpANxGTOxu4v9aObbwOKqN950/MeWxfSbTybcWvmib9zHfPNBLo0RbY3RuQ6&#xA;ysiD4vT9EOT8NO+Kss8oeXLby15X0vQLeRpo9Nt44PXf7UjKPjkb3dqsfniqb4q7FXYq4kAEk0A3&#xA;JPSmKqdtc211bx3NrKk9vMoeGaJg6OrCoZWWoII7jFVTFXYq7FXYqlVt/wApVqP/ADA2P/J67xVN&#xA;cVeeXtlr3lzzbqF/oenjU9B1J1u7+y9ZLf6tqnAI0wLggxzRcWcdnAf9o0VRr+avO94rQ2nlYGtB&#xA;JPHqNuwVT1CsBTmR08OvzVRUeveeI0WNPJ4VEAVVGo29ABsB9nFV3+IvPf8A1KP/AHMbf/mnFXf4&#xA;i89/9Sj/ANzG3/5pxV3+IvPf/Uo/9zG3/wCacVd/iLz3/wBSj/3Mbf8A5pxVLvLEPmiHz5qmo3+k&#xA;jStL1u1gMkf1mO4LahaVTmAlKera8VP/ABiGKs7xV2KoLW9E0rXNJu9I1a3W702+jMN1bvUB0bqK&#xA;qQw9iDUdsVQVr5J8n2trDawaJYpBAixRJ9XiaiIAqirKSdh3xVV/wn5V/wCrNY/9I0P/ADTirv8A&#xA;CflX/qzWP/SND/zTirv8J+Vf+rNY/wDSND/zTirv8J+Vf+rNY/8ASND/AM04q7/CflX/AKs1j/0j&#xA;Q/8ANOKu/wAJ+Vf+rNY/9I0P/NOKu/wn5V/6s1j/ANI0P/NOKu/wn5V/6s1j/wBI0P8AzTirv8J+&#xA;Vf8AqzWP/SND/wA04q7/AAn5V/6s1j/0jQ/804q7/CflX/qzWP8A0jQ/804q7/CflX/qzWP/AEjQ&#xA;/wDNOKsOn1PyLcefH/L648mP9bntHuTeva2C2UloRxaRX9b1mHM+mQI+QbqAN8VZvoGgaP5f0e10&#xA;bRrZbPTLJPTtbZCxCrUnqxZiSSSSTUnFUfirsVdirsVSq2/5SrUf+YGx/wCT13iqYXU/oQPIF5sK&#xA;BE/mZjRV+ljTFWrS3+rwLGTycktI/wDM7GrN9JOKq2KuxV2KuxV2KuxVRu4GmiohAlRleMnpyU13&#xA;p2PQ+2Kq2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjMv5b+T5fNI81SWkza8JY5lu/rl5&#xA;QNFG0ShYhL6QX05GUoF4mu4OKsmxV2KuxV2KpW+n64XYrq3FSSQv1eM0HhWuKpVb6frn+J9QH6W+&#xA;IWVkS31ePcerdUFK9sVTT9Ha9/1d/wDp3j/rirv0dr3/AFd/+neP+uKu/R2vf9Xf/p3j/rirv0dr&#xA;3/V3/wCneP8Arirv0dr3/V3/AOneP+uKu/R2vf8AV3/6d4/64q79Ha9/1d/+neP+uKu/R2vf9Xf/&#xA;AKd4/wCuKu/R2vf9Xf8A6d4/64qxHQ5te8m3fo+dvOs2v+vazT2kQ0gW6qloA8zerapLzZU/YZuR&#xA;G4B3xV6HirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqwQQid5wgE0iqjyU+&#xA;IqhYqCfAF2p88VX4q7FXYq7FXYq7FXYq7FXYqlWt+WtN1m50ye99QnS7n61AiNxV3Mbx8ZdqslHq&#xA;VqK0FaioKr//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2016-06-01T15:39:47-07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-06-01T15:39:47-07:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>521.500000</stDim:w>
            <stDim:h>354.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Italic</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>7.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>7.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F6A1873D8C216811871FD0BE9E7C4014</stEvt:instanceID>
                  <stEvt:when>2016-06-01T15:39:47-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:F6A1873D8C216811871FD0BE9E7C4014</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F6A1873D8C216811871FD0BE9E7C4014</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:F6A1873D8C216811871FD0BE9E7C4014</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -332.421 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 332.421 li
486.4 332.421 li
486.4 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 .4 cmyk
%ADOBeginSubsetFont: Times-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Italic def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 99 /c putdup 105 /i putdup 114 /r putdup 116 /t putdup 119 /w putdef/FontBBox {-296 -413 1661 1205} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings6 dict dup begin/.notdef <1C60D8A8C9B7D8BE1853B203EFE351B1CDFA12DF07B00368C22E31EFC3300D63209ED6> |-/c <1C60D8A8C9B77FE2CED306AAE853DF6763ABBC1F195078D45F35AC812BA176B02CD229DD186FFB355299AFEDCDA3C3E7A2BBB8C0138FFC2F675F24D8A1A2064E210ACB5567CC4FF99B2DB190FFC6CD745653327D6267B9720C3E2FAD72FF086DC8533109E5D3541C360CBF9F8DE6E15D008E77916480B96C5C762C587981712A1AA76B3128B5597081D3A484E43F2332F97E00EB8CA70E92480D1BBD05BF5279454393B0CF9B35A14103B3932D2CBA> |-/i <1C60D8A8C9B854D0F4594DE2CB230C00D72A8CCCE2ED8277F493FC10530BA725C23B7C5D26CC1DD529FAE26E52F10603EC22FA434A5EF589284E8D896B14DE3C8E9013A43C0BFBD48FDBD41845BD7C76773CBE6AD8D328F71F5EB664393E92995FCC5BC5635E470649C6BA303A1FC97AF04ACCD05A0991A8BEF1CC5D25BC2BAAD39CE1C6888E27BDA0C5DAD2B2DEF6529C8F477FC2CD60CCFB7D1E5F121F78DD2D61A9BDDDD66832C06CF970B6465E11B9DBFFCA3559D4996DEEC891508DB90A89509F3CB209B732203D177FEE5740FB955889645019ADCD680F1EA155C06327806A2C9546A05C56> |-/r <1C60D8A8C9B7361F02D124CF813383046F2E8E102865649E6346E4AE00EBDF515A44A89A952E4A085F5634D3864EE4305B5BF07B55A1EC09E637E7C6830A233BE67AAA815B678D0618ADF7BD82493E4D59F1DACCF465098FD3F8BD765B585BD1D189A5879A6D0BD585C0269FF295E67AEA1F4AB3642251674DA678FE7C86B5D0D3081506FDE935D99DD3ADBB2CD2B97FA0322E9B7CEEFBB873657461EE464C5A1554D8159FFAB5C6676C33746E9EBE4DCF40F31CC622EB1934B2A10A990B6694C7BEAEAE21B9834F16488EEFAE51397E84ECDE> |-/t <1C60D8A8C9B854D0B361E19027CEEF8FD2D54396C85DA9E4D75EBDBD81F1AC8D8D89CCB529371905FB88E8C672DA56CE6373C5F306F6D800C6421BB3535C1CE57B1054E3952FAF7BB933B92222380068B94C8250FB2A82AD2B50FD6BCE69676A831CBBDA1AD9AF95D0F1273C57F4D28940817AB24D70E2917B660D827A327D57C68FF29FBDAD6D47C886C83040C9E0139F754E6CDC6055994C4C5FB073D2E9DCCD2C2CC51F29C870D78E88085143EF> |-/w <1C60D8A8C9B64EDFFAB0865A2DAC7FE6E4C75B01D0A0D9B989BB217E5398ABF336A838BE21848110157A1AD3740E0ECAFF96E272FB9DF387D0EA17059F22282913FE19ECECA6068C516E160CD4A6C60648DE83EF52D186805E8A3AA9C2D2C7CD62DA5E2BE93DE2A9086D5E82617301EBC29B2B9254AED7AD4A395D5754873A0F8F45A58D879C49D9B692EDF2E4265589D5DF8BB8CBE963E56034ECCACDF5A04B11EBD4B8D27BECAB3AD761FAB7477C85FE0D8F1221F8F43125130A101FE3592DE8F482C50AFBCAC302D42E5972A69B94978A33C15BA4B701AE011DECC7102AEB101E174592628325A28F35BA0FBCBE8F037C4C0DCBF46F9D99B94B0BC5C4B020DD51746D8F3AE94C6D68B3CCE8F9AFFF5EA126AD528CD69A0565BDC7773DA5F0> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/FTWXUR+Times-Italic /Times-Italic findfont ct_VMDictPut/FTWXUR+Times-Italic*1 [99{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t 2{/.notdef}rp /w 136{/.notdef}rp]FTWXUR+Times-Italic nfFTWXUR+Times-Italic*1 [11 0 0 -11 0 0 ]msf242.177 67.2207 mo(cri)sh254.396 67.2207 mo(t)shFTWXUR+Times-Italic*1 [18 0 0 -18 0 0 ]msf231.755 63.7754 mo(w)sh246.373 115.043 mo
246.373 116.268 245.378 117.263 244.152 117.263 cv
242.927 117.263 241.933 116.268 241.933 115.043 cv
241.933 113.816 242.927 112.822 244.152 112.822 cv
245.378 112.822 246.373 113.816 246.373 115.043 cv
246.373 115.043 li
cp
0 0 0 1 cmyk
ef
.45 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
246.373 115.043 mo
246.373 116.268 245.378 117.263 244.152 117.263 cv
242.927 117.263 241.933 116.268 241.933 115.043 cv
241.933 113.816 242.927 112.822 244.152 112.822 cv
245.378 112.822 246.373 113.816 246.373 115.043 cv
246.373 115.043 li
cp
.75021 .679683 .670222 .90164 cmyk
@
32.0522 115.043 mo
32.0522 116.268 31.0576 117.263 29.8325 117.263 cv
28.6069 117.263 27.6123 116.268 27.6123 115.043 cv
27.6123 113.816 28.6069 112.822 29.8325 112.822 cv
31.0576 112.822 32.0522 113.816 32.0522 115.043 cv
32.0522 115.043 li
cp
0 0 0 1 cmyk
ef
32.0522 115.043 mo
32.0522 116.268 31.0576 117.263 29.8325 117.263 cv
28.6069 117.263 27.6123 116.268 27.6123 115.043 cv
27.6123 113.816 28.6069 112.822 29.8325 112.822 cv
31.0576 112.822 32.0522 113.816 32.0522 115.043 cv
32.0522 115.043 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
30.8125 114.902 mo
244.592 114.902 li
@
29.7925 67.502 mo
241.232 67.502 li
0 0 0 .4 cmyk
@
2 lw
230.313 92.6426 mo
230.252 92.6426 li
230.072 92.6426 li
229.592 92.6426 li
228.752 92.6426 li
227.612 92.582 li
226.232 92.582 li
224.672 92.5225 li
223.172 92.4629 li
221.732 92.4023 li
220.353 92.3428 li
219.152 92.2832 li
218.012 92.1621 li
216.992 92.043 li
216.092 91.9219 li
215.192 91.8027 li
214.353 91.623 li
213.452 91.4424 li
212.492 91.2031 li
211.532 90.9023 li
210.572 90.6025 li
209.612 90.2422 li
208.652 89.8223 li
207.692 89.4023 li
206.732 88.9824 li
205.772 88.502 li
204.933 88.0225 li
204.092 87.543 li
203.252 87.0625 li
202.472 86.582 li
201.752 86.1025 li
201.032 85.5625 li
200.313 85.082 li
199.532 84.4824 li
198.752 83.8828 li
197.972 83.2832 li
197.192 82.5625 li
196.353 81.9023 li
195.512 81.123 li
194.672 80.4023 li
193.893 79.623 li
193.052 78.9023 li
192.272 78.123 li
191.492 77.3428 li
190.712 76.5625 li
190.052 75.8428 li
189.333 75.123 li
188.552 74.4023 li
187.833 73.5625 li
186.992 72.7227 li
186.152 71.8828 li
185.313 70.9824 li
184.472 70.082 li
183.632 69.1826 li
182.792 68.3428 li
182.012 67.4424 li
181.232 66.6621 li
180.452 65.8828 li
179.732 65.1025 li
179.072 64.4424 li
178.413 63.7832 li
177.572 62.9424 li
176.732 62.1025 li
175.952 61.3223 li
175.112 60.6025 li
174.272 59.8828 li
173.433 59.2832 li
172.652 58.7422 li
171.873 58.2627 li
171.152 57.9023 li
170.433 57.6621 li
169.772 57.543 li
169.112 57.4824 li
168.452 57.543 li
167.792 57.6621 li
167.132 57.9023 li
166.413 58.2031 li
165.632 58.623 li
164.853 59.1025 li
164.072 59.6426 li
163.292 60.1826 li
162.512 60.7832 li
161.792 61.3223 li
161.072 61.9219 li
160.292 62.5225 li
159.632 63.002 li
158.972 63.4824 li
158.252 64.0225 li
157.532 64.5625 li
156.752 65.1025 li
155.913 65.6426 li
155.072 66.2422 li
154.232 66.7832 li
153.393 67.3223 li
152.552 67.8027 li
151.712 68.3428 li
150.873 68.7627 li
150.092 69.2422 li
149.313 69.6621 li
148.592 70.0225 li
147.873 70.3828 li
147.092 70.7422 li
146.252 71.1621 li
145.413 71.582 li
144.452 71.9424 li
143.433 72.4219 li
142.353 72.8428 li
141.212 73.3223 li
140.012 73.8027 li
138.813 74.2832 li
137.492 74.7627 li
136.172 75.2422 li
134.792 75.7832 li
133.353 76.3223 li
131.853 76.8623 li
130.833 77.2227 li
129.813 77.582 li
128.732 77.9424 li
127.592 78.3623 li
126.452 78.7832 li
125.192 79.2031 li
123.873 79.623 li
122.492 80.1025 li
121.052 80.5225 li
119.552 81.002 li
117.992 81.543 li
116.373 82.0225 li
114.752 82.502 li
113.012 82.9824 li
111.333 83.4629 li
109.592 84.002 li
107.792 84.4824 li
106.052 84.9023 li
104.252 85.3828 li
102.452 85.8027 li
100.712 86.2832 li
98.9126 86.6426 li
97.1123 87.0625 li
95.3125 87.4219 li
93.5723 87.7832 li
91.7124 88.1426 li
90.1523 88.4424 li
88.5322 88.7422 li
86.8525 89.043 li
85.1724 89.2832 li
83.3726 89.582 li
81.5122 89.8223 li
79.5322 90.123 li
77.4922 90.3623 li
75.3325 90.6621 li
72.9922 90.9629 li
70.5923 91.2031 li
68.0122 91.502 li
65.3125 91.8027 li
62.4922 92.1025 li
59.5522 92.4629 li
56.5522 92.7627 li
53.5522 93.0625 li
50.5522 93.3623 li
47.6123 93.6621 li
44.8525 93.9023 li
42.2725 94.1426 li
39.9326 94.3828 li
37.9521 94.5625 li
36.3325 94.7422 li
35.0723 94.8623 li
34.1724 94.9219 li
33.5723 94.9824 li
33.2124 95.043 li
33.0923 95.043 li
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 120 /x putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/x <1C60D8A8C9B7A73DEDECC69E6246293D06B267518C0F91E6480EDF632942FD353DCF28B6B327B0B65505E89AB448713A200476CDDC469BBFD72DCEEBD9B470EEF4D42688A9EDE15B6BB099C49A3B3B4F5BDDE740C693534E32D0F7EF88D7C9A5FE566275D3DD8A5DDEA6434DE248A79A37FD000B25AF4BA35E42FE2DB605EBE09D6A8C305BCA5E3D6D3005033B8F0013F25BF0E8CD348B80D0C04A9B817C42D2C65C0276E59537E7C97C2FC289210B275F5A612942FCCB309DD076CA67C4D8D3F07B8A974663CD719C2C66B1C5ECF95FFB7C657E2090F6B2DD4D8028FADB4D277AB24C47867D78CEE3F7806B4CC4E10A910E37D480CF> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/FTWXUS+Times-Roman /Times-Roman findfont ct_VMDictPut/FTWXUS+Times-Roman*1 [120{/.notdef}rp /x 135{/.notdef}rp]FTWXUS+Times-Roman nfFTWXUS+Times-Roman*1 [18 0 0 -18 0 0 ]msf231.567 132.182 mo(x)sh241.712 93.1826 mo
241.652 93.1826 li
241.413 93.1826 li
240.813 93.1826 li
239.853 93.1826 li
238.532 93.123 li
237.032 93.123 li
235.472 93.0625 li
233.972 93.0625 li
232.592 93.002 li
231.333 92.9424 li
230.132 92.8828 li
228.992 92.7627 li
227.913 92.7031 li
226.833 92.582 li
225.873 92.4629 li
224.853 92.3428 li
223.833 92.1621 li
222.752 91.9824 li
221.612 91.8027 li
220.472 91.5625 li
219.333 91.2627 li
218.132 90.9629 li
216.992 90.6621 li
215.853 90.3027 li
214.772 89.8828 li
213.692 89.4629 li
212.732 89.043 li
211.833 88.5625 li
210.933 88.082 li
210.152 87.543 li
209.373 87.002 li
208.592 86.4023 li
207.873 85.6826 li
207.152 84.9629 li
206.433 84.123 li
205.772 83.2227 li
205.112 82.2627 li
204.512 81.1826 li
203.913 80.1025 li
203.373 78.9023 li
202.893 77.7031 li
202.413 76.502 li
201.992 75.1826 li
201.572 73.9219 li
201.212 72.6025 li
200.913 71.2227 li
200.672 70.082 li
200.433 68.8828 li
200.192 67.623 li
199.952 66.3027 li
199.772 64.9219 li
199.532 63.4824 li
199.353 62.043 li
199.172 60.4824 li
198.933 58.9824 li
198.752 57.4219 li
198.632 55.8623 li
198.452 54.3623 li
198.333 52.8623 li
198.152 51.3623 li
198.032 49.9824 li
197.913 48.6621 li
197.853 47.3428 li
197.732 46.1426 li
197.672 45.002 li
197.552 43.9219 li
197.492 42.6025 li
197.373 41.3428 li
197.313 40.1426 li
197.252 38.9424 li
197.132 37.7422 li
197.072 36.6025 li
197.012 35.5225 li
196.952 34.4424 li
196.893 33.4219 li
196.772 32.4023 li
196.712 31.502 li
196.652 30.6025 li
196.592 29.7627 li
196.532 28.9824 li
196.413 28.2031 li
196.353 27.4219 li
196.292 26.582 li
196.172 25.6826 li
196.052 24.7832 li
195.933 23.8223 li
195.752 22.8623 li
195.632 21.9023 li
195.452 20.9424 li
195.272 20.043 li
195.092 19.1426 li
194.913 18.3027 li
194.732 17.5225 li
194.552 16.8027 li
194.373 16.082 li
194.192 15.4824 li
193.952 14.7031 li
193.652 13.9824 li
193.353 13.2627 li
192.992 12.6621 li
192.632 12.123 li
192.272 11.7031 li
191.913 11.4023 li
191.552 11.1621 li
191.132 11.043 li
190.772 10.9824 li
190.413 11.043 li
189.933 11.1621 li
189.452 11.3428 li
188.972 11.6426 li
188.373 12.002 li
187.772 12.4219 li
187.112 12.9023 li
186.452 13.4424 li
185.732 13.9219 li
185.012 14.5225 li
184.472 14.8828 li
183.873 15.3027 li
183.272 15.7832 li
182.612 16.3223 li
181.952 16.8623 li
181.232 17.5225 li
180.452 18.1826 li
179.732 18.9023 li
179.012 19.6826 li
178.292 20.4629 li
177.632 21.3027 li
177.032 22.2031 li
176.433 23.1025 li
175.833 24.0625 li
175.413 24.8428 li
175.052 25.6826 li
174.632 26.582 li
174.212 27.543 li
173.853 28.5625 li
173.492 29.582 li
173.072 30.7227 li
172.712 31.8623 li
172.413 33.002 li
172.052 34.2031 li
171.752 35.4023 li
171.512 36.543 li
171.212 37.6826 li
170.972 38.8223 li
170.792 39.9023 li
170.612 40.9219 li
170.433 41.9424 li
170.313 42.9023 li
170.132 43.9824 li
170.012 45.0625 li
169.893 46.082 li
169.772 47.2227 li
169.652 48.3027 li
169.592 49.4424 li
169.472 50.582 li
169.413 51.7832 li
169.353 52.9824 li
169.292 54.123 li
169.232 55.3223 li
169.172 56.4629 li
169.112 57.6621 li
169.052 58.8027 li
168.933 59.9424 li
168.873 61.1426 li
168.813 62.1621 li
168.692 63.3027 li
168.632 64.502 li
168.512 65.7031 li
168.393 66.9629 li
168.272 68.3428 li
168.152 69.7227 li
168.032 71.1621 li
167.853 72.6025 li
167.732 74.043 li
167.552 75.543 li
167.433 76.9824 li
167.252 78.4219 li
167.132 79.8027 li
166.952 81.123 li
166.833 82.4424 li
166.712 83.7627 li
166.532 85.0225 li
166.413 86.2227 li
166.232 87.4824 li
166.112 88.7422 li
165.933 90.002 li
165.813 91.3223 li
165.632 92.582 li
165.452 93.9023 li
165.272 95.1621 li
165.092 96.4219 li
164.913 97.623 li
164.732 98.8223 li
164.492 99.9023 li
164.313 100.922 li
164.132 101.942 li
163.893 102.843 li
163.712 103.623 li
163.532 104.402 li
163.292 105.123 li
163.052 105.843 li
162.813 106.502 li
162.512 107.103 li
162.212 107.703 li
161.913 108.183 li
161.552 108.662 li
161.192 109.082 li
160.833 109.442 li
160.472 109.742 li
160.112 109.922 li
159.692 110.103 li
159.272 110.223 li
158.913 110.283 li
158.492 110.283 li
158.132 110.223 li
157.712 110.162 li
157.172 109.982 li
156.632 109.683 li
155.972 109.383 li
155.313 109.022 li
154.592 108.543 li
153.813 108.063 li
153.032 107.522 li
152.252 106.982 li
151.413 106.502 li
150.572 105.963 li
149.732 105.482 li
148.952 105.063 li
148.292 104.703 li
147.572 104.402 li
146.853 104.043 li
146.072 103.742 li
145.172 103.383 li
144.272 103.082 li
143.252 102.783 li
142.232 102.422 li
141.092 102.123 li
139.893 101.822 li
138.692 101.522 li
137.433 101.223 li
136.112 100.922 li
134.732 100.683 li
133.353 100.383 li
131.913 100.143 li
130.893 99.9629 li
129.813 99.7832 li
128.732 99.6025 li
127.532 99.3623 li
126.333 99.1826 li
125.012 99.002 li
123.632 98.8223 li
122.132 98.582 li
120.632 98.4023 li
119.012 98.1621 li
117.393 97.9824 li
115.652 97.8027 li
113.913 97.5625 li
112.112 97.3828 li
110.252 97.2031 li
108.393 97.0225 li
106.532 96.8428 li
104.612 96.6621 li
102.752 96.543 li
100.833 96.4219 li
98.9126 96.2422 li
96.9326 96.123 li
94.9521 96.002 li
92.9722 95.9424 li
91.4722 95.8223 li
89.9126 95.7627 li
88.2925 95.7031 li
86.6123 95.6426 li
84.9326 95.582 li
83.1323 95.5225 li
81.2124 95.5225 li
79.2324 95.4629 li
77.1323 95.4023 li
74.9126 95.4023 li
72.5723 95.3428 li
70.1123 95.2832 li
67.4722 95.2832 li
64.7725 95.2227 li
61.8926 95.2227 li
58.9521 95.2227 li
55.9521 95.1621 li
52.8926 95.1621 li
49.8325 95.1025 li
46.8926 95.1025 li
44.0122 95.1025 li
41.3125 95.1025 li
38.8525 95.1025 li
36.6924 95.043 li
34.8325 95.043 li
33.3325 95.043 li
32.1924 95.043 li
31.3525 95.043 li
30.8125 95.043 li
30.5122 95.043 li
30.3926 95.043 li
0 0 0 .909851 cmyk
@
1 lw
342.398 75.5562 mo
449.738 75.5562 li
0 0 0 .25 cmyk
@
305.133 134.582 mo
479.133 134.582 li
.75021 .679683 .670222 .90164 cmyk
@
471.933 132.783 mo
480.032 134.582 li
471.933 136.383 li
471.933 134.582 li
471.933 132.783 li
471.933 132.783 li
cp
0 0 0 1 cmyk
ef
.9 lw
471.933 132.783 mo
480.032 134.582 li
471.933 136.383 li
471.933 134.582 li
471.933 132.783 li
471.933 132.783 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
325.712 11.2227 mo
325.712 146.343 li
@
323.912 18.4219 mo
325.712 10.2627 li
327.513 18.4219 li
325.712 18.4219 li
323.912 18.4219 li
323.912 18.4219 li
cp
0 0 0 1 cmyk
ef
.9 lw
323.912 18.4219 mo
325.712 10.2627 li
327.513 18.4219 li
325.712 18.4219 li
323.912 18.4219 li
323.912 18.4219 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginFTWXUR+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/v <1C60D8A8C9B77FE2C1A754606E11446669EB88AA334E5F3B6D965A8ED701B036229DB5EBDDE6B935BCE3F66F4D9FFE0CDA8564D56F119D4E8BAC84EC6FD74D5F688F93D3C535AED4F795BD797833B416F17640B483FEA92F84680B0E02EE70EA76740C57FB0DCABF0436121561529ACAD441485D5EA7DBF73E6EBE89B58057E6BC80EE1287C37EA53D3DA5C1251D7190FEF062DACD77313626BDA5D066E4CA4B06E58F5108EAF83B066EA29BBA4663677A2E3D211DBBEAAC86400A5F61B11194> |-systemdict /gcheck known {setglobal} if end {end} ifendFTWXUR+Times-Italic /Encoding getdup 118 /v putpop%ADOEndSubsetFont
/FTWXUR+Times-Italic*1 [99{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t /.notdef /v /w 136{/.notdef}rp]FTWXUR+Times-Italic nfFTWXUR+Times-Italic*1 [18 0 0 -18 0 0 ]msf478.411 149.994 mo(v)shFTWXUR+Times-Italic*1 [18 0 0 -18 0 0 ]msf307.349 14.877 mo(w)sh1 lw
346.238 128.156 mo
407.139 10.6162 li
0 0 0 .4 cmyk
@
323.438 21.356 mo
323.499 21.4761 li
323.559 21.7759 li
323.799 22.376 li
324.099 23.2759 li
324.519 24.5962 li
325.059 26.2759 li
325.778 28.436 li
326.679 30.9561 li
327.639 33.9561 li
328.839 37.3159 li
330.099 41.0361 li
331.479 45.0562 li
332.979 49.2563 li
334.599 53.6362 li
336.219 58.1362 li
337.839 62.6963 li
339.519 67.1362 li
341.259 71.5762 li
342.879 75.896 li
344.559 79.9761 li
346.179 83.936 li
347.738 87.6563 li
349.299 91.1362 li
350.799 94.376 li
352.238 97.3159 li
353.619 100.016 li
354.999 102.476 li
356.259 104.696 li
357.579 106.616 li
358.778 108.296 li
359.979 109.676 li
361.179 110.876 li
362.318 111.836 li
363.459 112.496 li
364.539 112.976 li
365.679 113.276 li
366.759 113.276 li
367.898 113.096 li
368.979 112.736 li
370.179 112.196 li
371.318 111.356 li
372.519 110.396 li
373.719 109.256 li
374.979 107.876 li
376.238 106.376 li
377.499 104.636 li
378.759 102.836 li
380.079 100.796 li
381.398 98.6362 li
382.719 96.356 li
384.099 93.9561 li
385.479 91.436 li
386.919 88.7964 li
388.299 86.0962 li
389.738 83.3359 li
391.179 80.4561 li
392.619 77.6362 li
394.059 74.7563 li
395.499 71.876 li
396.999 68.9961 li
398.438 66.1763 li
399.879 63.356 li
401.318 60.6563 li
402.759 58.0161 li
404.139 55.436 li
405.519 53.0361 li
406.898 50.6963 li
408.278 48.4761 li
409.658 46.436 li
410.979 44.5161 li
412.299 42.7759 li
413.559 41.2163 li
414.879 39.8364 li
416.139 38.5762 li
417.398 37.5562 li
418.599 36.7163 li
419.858 36.0562 li
421.059 35.6362 li
422.198 35.396 li
423.398 35.3364 li
424.599 35.5161 li
425.799 35.936 li
426.999 36.5361 li
428.259 37.376 li
429.519 38.4561 li
430.839 39.7759 li
432.219 41.3364 li
433.599 43.1362 li
435.039 45.1763 li
436.479 47.5161 li
438.039 50.0962 li
439.658 52.916 li
441.278 55.9761 li
443.019 59.2759 li
444.759 62.8159 li
446.559 66.5361 li
448.419 70.4961 li
450.278 74.5762 li
452.198 78.8359 li
454.059 83.0962 li
455.919 87.416 li
457.719 91.7363 li
459.519 95.936 li
461.198 100.016 li
462.759 103.796 li
464.198 107.396 li
465.519 110.636 li
466.658 113.456 li
467.619 115.916 li
468.398 117.956 li
469.059 119.636 li
469.539 120.836 li
469.898 121.736 li
470.078 122.276 li
470.198 122.576 li
470.259 122.696 li
@
1.8 lw
407.673 107.643 mo
409.532 107.703 li
411.452 107.703 li
413.433 107.763 li
415.353 107.763 li
417.332 107.822 li
419.372 107.883 li
421.412 107.883 li
423.452 107.942 li
425.492 107.942 li
427.532 107.942 li
429.572 107.942 li
431.612 107.942 li
433.652 107.883 li
435.572 107.822 li
437.492 107.763 li
439.353 107.643 li
441.152 107.522 li
442.893 107.402 li
444.572 107.223 li
446.133 107.043 li
447.572 106.803 li
448.952 106.563 li
450.212 106.263 li
451.412 105.963 li
452.492 105.603 li
453.513 105.183 li
454.412 104.822 li
455.192 104.343 li
456.032 103.742 li
456.752 103.143 li
457.353 102.422 li
457.893 101.643 li
458.313 100.803 li
458.673 99.9629 li
458.912 99.002 li
459.093 97.9824 li
459.152 96.8428 li
459.093 95.7627 li
459.032 94.5625 li
458.853 93.3027 li
458.553 92.1025 li
458.252 90.7832 li
457.893 89.5225 li
457.473 88.2031 li
457.053 86.8828 li
456.513 85.623 li
456.032 84.3027 li
455.492 83.043 li
454.952 81.7832 li
454.353 80.5225 li
453.813 79.3223 li
453.272 78.123 li
452.612 76.7422 li
452.013 75.4219 li
451.353 74.043 li
450.633 72.7227 li
449.973 71.3428 li
449.192 69.9023 li
448.412 68.5225 li
447.572 67.1426 li
446.673 65.7627 li
445.712 64.3828 li
444.752 63.002 li
443.732 61.7422 li
442.652 60.4824 li
441.513 59.2832 li
440.372 58.1426 li
439.173 57.0625 li
437.912 56.1025 li
436.652 55.2031 li
435.332 54.3623 li
433.952 53.582 li
432.513 52.9219 li
431.072 52.3223 li
429.813 51.8428 li
428.553 51.4824 li
427.232 51.0625 li
425.853 50.7627 li
424.353 50.4629 li
422.853 50.1621 li
421.232 49.9219 li
419.553 49.6826 li
417.872 49.502 li
416.072 49.3223 li
414.212 49.2031 li
412.353 49.082 li
410.433 49.0225 li
408.452 48.9023 li
406.473 48.9023 li
404.492 48.8428 li
402.452 48.8428 li
400.473 48.8428 li
398.492 48.8428 li
396.513 48.8428 li
394.532 48.9023 li
392.612 48.9023 li
390.692 48.9629 li
388.832 48.9629 li
386.973 49.0225 li
385.112 49.082 li
383.313 49.082 li
381.572 49.1426 li
379.652 49.1426 li
377.732 49.2031 li
375.813 49.2031 li
373.832 49.2627 li
371.912 49.2627 li
369.933 49.3223 li
368.013 49.3223 li
366.032 49.3828 li
364.112 49.4424 li
362.192 49.5625 li
360.272 49.623 li
358.412 49.8027 li
356.612 49.9219 li
354.813 50.1025 li
353.133 50.3428 li
351.513 50.582 li
350.013 50.8223 li
348.572 51.123 li
347.252 51.4824 li
345.992 51.8428 li
344.853 52.2031 li
343.832 52.6826 li
342.933 53.1621 li
342.093 53.6426 li
341.372 54.2422 li
340.772 54.8428 li
340.053 55.7422 li
339.513 56.7031 li
339.093 57.7227 li
338.792 58.9219 li
338.673 60.1826 li
338.612 61.502 li
338.673 62.9424 li
338.853 64.502 li
339.152 66.0625 li
339.452 67.6826 li
339.933 69.3623 li
340.412 71.043 li
340.952 72.7227 li
341.492 74.4023 li
342.093 76.0225 li
342.692 77.582 li
343.292 79.1426 li
343.832 80.6426 li
344.433 82.082 li
344.973 83.5225 li
345.393 84.7227 li
345.872 85.9824 li
346.292 87.1826 li
346.712 88.3828 li
347.133 89.582 li
347.612 90.7832 li
348.093 91.9219 li
348.572 93.0625 li
349.112 94.2031 li
349.712 95.3428 li
350.313 96.3623 li
350.912 97.3828 li
351.633 98.3428 li
352.353 99.3027 li
353.133 100.143 li
353.973 100.922 li
354.813 101.703 li
355.772 102.362 li
356.732 102.963 li
357.813 103.563 li
358.893 104.043 li
360.093 104.522 li
361.112 104.822 li
362.133 105.123 li
363.272 105.422 li
364.473 105.662 li
365.792 105.902 li
367.112 106.082 li
368.553 106.322 li
370.053 106.502 li
371.612 106.623 li
373.292 106.803 li
374.973 106.922 li
376.772 107.043 li
378.572 107.103 li
380.433 107.223 li
382.353 107.283 li
384.272 107.343 li
386.252 107.402 li
388.232 107.402 li
390.212 107.463 li
392.192 107.463 li
394.173 107.522 li
396.152 107.522 li
398.072 107.522 li
399.992 107.582 li
401.912 107.582 li
403.832 107.582 li
405.752 107.643 li
407.612 107.643 li
407.673 107.643 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginFTWXUS+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B81F2C7477F0B9BCB3EBA4BD58438260E6F0349575D982C091745F57E6DE656DBD360F903D8BB7BA1F42E7A2D05B5102174895284A8AFE5BF20A5DC15D43366CD93FB67607779C4A32BA> |-/parenright <1C60D8A8C9B81F2C3A0B9AE48BDC8A210A6BC24B132D0FFA37976CAF0AD48341BA40F2639F857493B96FE8C9C6A5DBA67902E1141CAD31E1E1F2EAFA78B4F0B158589755ABC3F5D48640211E0BE78E8AD3F692526A7797DC309ED92AB9> |-/a <1C60D8A8C9B77FE2CEADADAD35C681D96377E0B82CC8ACDB5762353EDBADFFACD451A553C5C39302A9F1D177F76B983509B429688ADF52AFA30F8E4A0B23F2282503B97D206C7C183FDE8BFD6ACD2BE6A3B9069791DF8E2CF592523922EFD64768CD99A1F5F1400DB305C4171EAA77202618276E378016C7BA0833F29752C2A461C11A88BC4E527507EEDA9C848EEAD89D80551320178A864EFC8B3562DEDC4F695E8824160B87CA7F395997B47C0C71BBFE9F871E4F5046857D22F807C04061C73B2C0BBB7B44E0200581C40A3AC55C8229AC23B2FBE040B0F089F70BE38746A5E0285A22E4825D9ECD39D6C15171D3EBB391B1AC132DA188B28262B67971885F8F1CB6195A6A7B0FFC> |-systemdict /gcheck known {setglobal} if end {end} ifendFTWXUS+Times-Roman /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 97 /a putpop%ADOEndSubsetFont
/FTWXUS+Times-Roman*1 [40{/.notdef}rp /parenleft /parenright 55{/.notdef}rp /a 22{/.notdef}rp /x 135{/.notdef}rp]FTWXUS+Times-Roman nfFTWXUS+Times-Roman*1 [24.3 0 0 -24.3 0 0 ]msf0 20.1934 mo(\(a\))[8.09229 10.7852 0 ]xsh%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginFTWXUS+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/b <1C60D8A8C9B7A73DEA51CB4AB782EC4CF13FD26F41FC8CB88DC14FD82E5280D80A6DCEF24DFC67DDE70F479EF61F4A2F59FB7C44A2DA70AA9DBE3F3332B05CF7A2A04A2009B46D9C510350AE718270C9D98B76F9594F5A2CEFABA8989AB9C1A83073103E665B7D0C1FB0D95DD2CF6B3624FBE8C4DC08D6FA9DA1460775A9F8E2451D08E82D20D83F7AACFD6C43C3765095FFA99CCEBE8373741BF9BE5B927D964DEAC7210DBA744ADF394D6C616E3DDB8D63> |-systemdict /gcheck known {setglobal} if end {end} ifendFTWXUS+Times-Roman /Encoding getdup 98 /b putpop%ADOEndSubsetFont
/FTWXUS+Times-Roman*1 [40{/.notdef}rp /parenleft /parenright 55{/.notdef}rp /a /b 21{/.notdef}rp /x 135{/.notdef}rp]FTWXUS+Times-Roman nfFTWXUS+Times-Roman*1 [24.3 0 0 -24.3 0 0 ]msf0 195.193 mo(\(b\))sh0 0 0 .4 cmyk
FTWXUR+Times-Italic*1 [11 0 0 -11 0 0 ]msf242.177 242.221 mo(cri)sh254.396 242.221 mo(t)shFTWXUR+Times-Italic*1 [18 0 0 -18 0 0 ]msf231.755 238.775 mo(w)sh246.373 290.043 mo
246.373 291.268 245.378 292.263 244.152 292.263 cv
242.927 292.263 241.933 291.268 241.933 290.043 cv
241.933 288.816 242.927 287.822 244.152 287.822 cv
245.378 287.822 246.373 288.816 246.373 290.043 cv
246.373 290.043 li
cp
0 0 0 1 cmyk
ef
.45 lw
246.373 290.043 mo
246.373 291.268 245.378 292.263 244.152 292.263 cv
242.927 292.263 241.933 291.268 241.933 290.043 cv
241.933 288.816 242.927 287.822 244.152 287.822 cv
245.378 287.822 246.373 288.816 246.373 290.043 cv
246.373 290.043 li
cp
.75021 .679683 .670222 .90164 cmyk
@
32.0522 290.043 mo
32.0522 291.268 31.0576 292.263 29.8325 292.263 cv
28.6069 292.263 27.6123 291.268 27.6123 290.043 cv
27.6123 288.816 28.6069 287.822 29.8325 287.822 cv
31.0576 287.822 32.0522 288.816 32.0522 290.043 cv
32.0522 290.043 li
cp
0 0 0 1 cmyk
ef
32.0522 290.043 mo
32.0522 291.268 31.0576 292.263 29.8325 292.263 cv
28.6069 292.263 27.6123 291.268 27.6123 290.043 cv
27.6123 288.816 28.6069 287.822 29.8325 287.822 cv
31.0576 287.822 32.0522 288.816 32.0522 290.043 cv
32.0522 290.043 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
30.8125 289.902 mo
244.592 289.902 li
@
29.7925 242.502 mo
241.232 242.502 li
0 0 0 .4 cmyk
@
2 lw
230.313 267.643 mo
230.252 267.643 li
230.072 267.643 li
229.592 267.643 li
228.752 267.643 li
227.612 267.582 li
226.232 267.582 li
224.672 267.522 li
223.172 267.463 li
221.732 267.402 li
220.353 267.343 li
219.152 267.283 li
218.012 267.162 li
216.992 267.043 li
216.092 266.922 li
215.192 266.803 li
214.353 266.623 li
213.452 266.442 li
212.492 266.203 li
211.532 265.902 li
210.572 265.603 li
209.612 265.242 li
208.652 264.822 li
207.692 264.402 li
206.732 263.982 li
205.772 263.502 li
204.933 263.022 li
204.092 262.543 li
203.252 262.063 li
202.472 261.582 li
201.752 261.103 li
201.032 260.563 li
200.313 260.082 li
199.532 259.482 li
198.752 258.883 li
197.972 258.283 li
197.192 257.563 li
196.353 256.902 li
195.512 256.123 li
194.672 255.402 li
193.893 254.623 li
193.052 253.902 li
192.272 253.123 li
191.492 252.343 li
190.712 251.563 li
190.052 250.843 li
189.333 250.123 li
188.552 249.402 li
187.833 248.563 li
186.992 247.723 li
186.152 246.883 li
185.313 245.982 li
184.472 245.082 li
183.632 244.183 li
182.792 243.343 li
182.012 242.442 li
181.232 241.662 li
180.452 240.883 li
179.732 240.103 li
179.072 239.442 li
178.413 238.783 li
177.572 237.942 li
176.732 237.103 li
175.952 236.322 li
175.112 235.603 li
174.272 234.883 li
173.433 234.283 li
172.652 233.742 li
171.873 233.263 li
171.152 232.902 li
170.433 232.662 li
169.772 232.543 li
169.112 232.482 li
168.452 232.543 li
167.792 232.662 li
167.132 232.902 li
166.413 233.203 li
165.632 233.623 li
164.853 234.103 li
164.072 234.643 li
163.292 235.183 li
162.512 235.783 li
161.792 236.322 li
161.072 236.922 li
160.292 237.522 li
159.632 238.002 li
158.972 238.482 li
158.252 239.022 li
157.532 239.563 li
156.752 240.103 li
155.913 240.643 li
155.072 241.242 li
154.232 241.783 li
153.393 242.322 li
152.552 242.803 li
151.712 243.343 li
150.873 243.763 li
150.092 244.242 li
149.313 244.662 li
148.592 245.022 li
147.873 245.383 li
147.092 245.742 li
146.252 246.162 li
145.413 246.582 li
144.452 246.942 li
143.433 247.422 li
142.353 247.843 li
141.212 248.322 li
140.012 248.803 li
138.813 249.283 li
137.492 249.763 li
136.172 250.242 li
134.792 250.783 li
133.353 251.322 li
131.853 251.862 li
130.833 252.223 li
129.813 252.582 li
128.732 252.942 li
127.592 253.362 li
126.452 253.783 li
125.192 254.203 li
123.873 254.623 li
122.492 255.103 li
121.052 255.522 li
119.552 256.002 li
117.992 256.543 li
116.373 257.022 li
114.752 257.502 li
113.012 257.982 li
111.333 258.463 li
109.592 259.002 li
107.792 259.482 li
106.052 259.902 li
104.252 260.383 li
102.452 260.803 li
100.712 261.283 li
98.9126 261.643 li
97.1123 262.063 li
95.3125 262.422 li
93.5723 262.783 li
91.7124 263.143 li
90.1523 263.442 li
88.5322 263.742 li
86.8525 264.043 li
85.1724 264.283 li
83.3726 264.582 li
81.5122 264.822 li
79.5322 265.123 li
77.4922 265.362 li
75.3325 265.662 li
72.9922 265.963 li
70.5923 266.203 li
68.0122 266.502 li
65.3125 266.803 li
62.4922 267.103 li
59.5522 267.463 li
56.5522 267.763 li
53.5522 268.063 li
50.5522 268.362 li
47.6123 268.662 li
44.8525 268.902 li
42.2725 269.143 li
39.9326 269.383 li
37.9521 269.563 li
36.3325 269.742 li
35.0723 269.862 li
34.1724 269.922 li
33.5723 269.982 li
33.2124 270.043 li
33.0923 270.043 li
@
.75021 .679683 .670222 .90164 cmyk
FTWXUS+Times-Roman*1 [18 0 0 -18 0 0 ]msf231.567 307.182 mo(x)sh1 lw
342.398 250.557 mo
449.738 250.557 li
0 0 0 .25 cmyk
@
305.133 309.582 mo
479.133 309.582 li
.75021 .679683 .670222 .90164 cmyk
@
471.933 307.783 mo
480.032 309.582 li
471.933 311.383 li
471.933 309.582 li
471.933 307.783 li
471.933 307.783 li
cp
0 0 0 1 cmyk
ef
.9 lw
471.933 307.783 mo
480.032 309.582 li
471.933 311.383 li
471.933 309.582 li
471.933 307.783 li
471.933 307.783 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
325.712 186.223 mo
325.712 321.343 li
@
323.912 193.422 mo
325.712 185.263 li
327.513 193.422 li
325.712 193.422 li
323.912 193.422 li
323.912 193.422 li
cp
0 0 0 1 cmyk
ef
.9 lw
323.912 193.422 mo
325.712 185.263 li
327.513 193.422 li
325.712 193.422 li
323.912 193.422 li
323.912 193.422 li
cp
.75021 .679683 .670222 .90164 cmyk
@
FTWXUR+Times-Italic*1 [18 0 0 -18 0 0 ]msf478.411 324.994 mo(v)sh307.349 189.877 mo(w)sh1 lw
346.238 303.156 mo
407.139 185.616 li
0 0 0 .4 cmyk
@
323.438 196.355 mo
323.499 196.477 li
323.559 196.775 li
323.799 197.376 li
324.099 198.275 li
324.519 199.596 li
325.059 201.275 li
325.778 203.436 li
326.679 205.956 li
327.639 208.956 li
328.839 212.316 li
330.099 216.036 li
331.479 220.057 li
332.979 224.256 li
334.599 228.637 li
336.219 233.137 li
337.839 237.696 li
339.519 242.137 li
341.259 246.576 li
342.879 250.896 li
344.559 254.977 li
346.179 258.936 li
347.738 262.656 li
349.299 266.137 li
350.799 269.376 li
352.238 272.316 li
353.619 275.016 li
354.999 277.477 li
356.259 279.696 li
357.579 281.616 li
358.778 283.297 li
359.979 284.676 li
361.179 285.876 li
362.318 286.836 li
363.459 287.496 li
364.539 287.977 li
365.679 288.276 li
366.759 288.276 li
367.898 288.096 li
368.979 287.736 li
370.179 287.196 li
371.318 286.355 li
372.519 285.396 li
373.719 284.256 li
374.979 282.876 li
376.238 281.376 li
377.499 279.637 li
378.759 277.836 li
380.079 275.797 li
381.398 273.637 li
382.719 271.355 li
384.099 268.956 li
385.479 266.436 li
386.919 263.797 li
388.299 261.096 li
389.738 258.336 li
391.179 255.456 li
392.619 252.637 li
394.059 249.756 li
395.499 246.876 li
396.999 243.996 li
398.438 241.176 li
399.879 238.355 li
401.318 235.656 li
402.759 233.016 li
404.139 230.436 li
405.519 228.036 li
406.898 225.696 li
408.278 223.477 li
409.658 221.436 li
410.979 219.516 li
412.299 217.775 li
413.559 216.217 li
414.879 214.836 li
416.139 213.576 li
417.398 212.557 li
418.599 211.717 li
419.858 211.057 li
421.059 210.637 li
422.198 210.396 li
423.398 210.336 li
424.599 210.516 li
425.799 210.936 li
426.999 211.536 li
428.259 212.376 li
429.519 213.456 li
430.839 214.775 li
432.219 216.336 li
433.599 218.137 li
435.039 220.176 li
436.479 222.516 li
438.039 225.096 li
439.658 227.916 li
441.278 230.977 li
443.019 234.275 li
444.759 237.816 li
446.559 241.536 li
448.419 245.496 li
450.278 249.576 li
452.198 253.836 li
454.059 258.096 li
455.919 262.416 li
457.719 266.736 li
459.519 270.936 li
461.198 275.016 li
462.759 278.797 li
464.198 282.396 li
465.519 285.637 li
466.658 288.456 li
467.619 290.916 li
468.398 292.956 li
469.059 294.637 li
469.539 295.836 li
469.898 296.736 li
470.078 297.276 li
470.198 297.576 li
470.259 297.696 li
@
201.928 252.969 mo
207.4 268.409 227.071 269.15 240.813 269.183 cv
242.103 269.186 242.102 267.186 240.813 267.183 cv
228.176 267.153 208.954 266.819 203.857 252.438 cv
203.429 251.23 201.497 251.75 201.928 252.969 cv
201.928 252.969 li
cp
.75021 .679683 .670222 .90164 cmyk
f
170.348 210.238 mo
172.012 206.147 173.845 202.051 176.713 198.646 cv
179.539 195.294 183.464 193.814 187.245 191.838 cv
190.178 190.305 193.048 188.332 196.222 187.327 cv
199.123 186.408 200.632 188.676 201.829 190.987 cv
202.422 192.133 204.148 191.121 203.556 189.978 cv
202.307 187.567 200.672 185.229 197.736 185.083 cv
194.45 184.918 190.88 187.592 188.163 189.077 cv
183.833 191.442 179.207 193.111 175.737 196.744 cv
172.29 200.353 170.271 205.153 168.419 209.707 cv
167.934 210.902 169.869 211.417 170.348 210.238 cv
170.348 210.238 li
cp
f
30.9922 271.223 mo
46.1597 271.224 61.3286 271.255 76.4941 271.516 cv
88.5762 271.724 100.544 272.134 112.544 273.626 cv
118.108 274.317 123.656 275.13 129.202 275.946 cv
133.425 276.568 137.745 276.946 141.862 278.097 cv
146.576 279.414 150.649 281.969 154.906 284.276 cv
157.37 285.611 160.036 286.613 162.702 285.261 cv
167.972 282.588 169.504 277.707 170.348 272.261 cv
170.543 271 168.617 270.458 168.419 271.729 cv
167.888 275.158 167.438 278.429 164.961 281.027 cv
163.66 282.393 161.798 283.988 159.799 283.954 cv
156.407 283.896 152.655 280.631 149.765 279.137 cv
141.41 274.818 131.719 274.28 122.547 272.973 cv
111.158 271.348 99.8193 270.119 88.3164 269.784 cv
74.063 269.37 59.8003 269.283 45.542 269.241 cv
40.6919 269.227 35.8423 269.223 30.9922 269.223 cv
29.7026 269.223 29.7026 271.223 30.9922 271.223 cv
30.9922 271.223 li
cp
f
2 lw
[8 8 ] 0 dsh
169.384 209.973 mo
169.384 271.973 li
@
202.692 190.473 mo
202.692 252.473 li
@
[] 0 dsh
464.198 283.297 mo
462.759 278.797 li
461.198 275.016 li
459.519 270.936 li
457.719 266.736 li
455.919 262.416 li
454.059 258.096 li
452.198 253.836 li
450.278 249.576 li
448.419 245.496 li
446.559 241.536 li
444.759 237.816 li
443.019 234.275 li
441.278 230.977 li
439.658 227.916 li
438.039 225.096 li
436.479 222.516 li
332.979 222.516 li
334.599 228.637 li
336.219 233.137 li
337.839 237.696 li
339.519 242.137 li
341.259 246.576 li
342.879 250.896 li
344.559 254.977 li
346.179 258.936 li
347.738 262.656 li
349.299 266.137 li
350.799 269.376 li
352.238 272.316 li
353.619 275.016 li
354.999 277.477 li
356.259 279.696 li
357.579 281.616 li
358.778 283.297 li
464.198 283.297 li
cp
0 0 0 1 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/FTWXUS+Times-Roman*1 uf/FTWXUS+Times-Roman uf/Times-Roman uf/FTWXUR+Times-Italic*1 uf/FTWXUR+Times-Italic uf/Times-Italic ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (cytryn) ()%%Title: (FHNvsSFHNPPP.eps)%%CreationDate: 2016-06-01 3:39 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6l!c,&cS.=;^capq&dSVTUO_^tAD_I6-P.a6-Z!5UVpG6MY'hQK[8Bp<97KaP1R%6jJBMNIZ6W)KA;A(um\nTJG!>NR^GgdS%8dpSl.]CLXTT[P(_Vo8$;B+9S,Z6riK,#%;6-MU]F<W5G,^:W!O<c7amhNJ'UUJ_kT(fkcg0db@[^uFRB!Cd&ed7qt52f'bGd"MY%h>[WLXkNZ]l'6:u1PDd[c*fO_\EpY>*I&E2h[bIL<qG-HqeFXH[@1::f3>e<e8)VJd`UBp]/C(T6:/IS;0pKJR]XToW*S$ORmC1O%A$Pr(^qLZd]Dt!AVSre2pXZ::SHIeRj.HjB#P]G?8j6Tr_]^-1J.Vg8_TDb=)$ucu+d#M+OpHQfFB6Z-jF[GWK+D*N<0^kPnP]7#%%Yjr9YhAD+7i=#ZDQd@3Iq-B:(?RmlWiD.O"]M-\CKtZB?E6!6a?1o'&<u,qqo``ii5nnh"=Sjo.[Wu-n<5>Y["^;Tg0[SA5FX?2%n'0.^48>Q&39PP1onQVnrrL&o$?e^adjLKWQI`h81iY]Y/BZCB:V%";7BjYc0=P\P-@u(B)S^!?lWX<e)ZohX>9h)(Ah_,LJ;H=i%rR(HDelqe?XJ^3D]=.q&%7uh;WH:$H"XQ0u$Aq^ca>u]CQXg(RX7n(6hm?g."rlO',:T8&S=]DCT?YY.K.[%*kr0R$4K##`LAiCT%-ShQK=oOK!#t#aD[17g.#d82VZm,j5P:PA'obYtaVq+7`8XWrjrWc9j5Sfo"D--nYVL_7<g>BaET-9Ai!'dcJ^O[fk-_&*4K`Wom%Ac+(%pf*RLW@ZMrjYFPEhbmIUV5j;b<O%ji@P(S3Q[,(R/CqpTYtd38;?Hl-X_\bgi@"P_[0d)=<@HdpK`XFe'X1?CN).W.<Q2Gj%AUIf:ds!4Y'OD+Wm?'TO2u.Mt%YX@2f"s0#DleY&iZk;GE('I?lemTg2iaA;K"d.Q_Vb+t7teX^-&O)(16)Wij1+V4QK":9:Pqm#%5M!\kiGYer/n5ck+,$0DQsu1e$%LD_l,Y=G'Qsg&m2[A5F2Vk@+0:1V_r')ZSO#;OqM`]:rl&&#5!Hju/+d*e+9'8u3'',#pmXU1%-28EpiV;n$SOH-s'X+lnm#f`s6I+hNcP_Ft@NB5]]Q(U2O]1HUEXEWMQaY-$Mq6fN=9h@:.2,4,DpqS4V`6m<NO:0_j7k#tke$U/%lept.@8>LGG:;Te&!XXc%<G_3e:s&`8tiW-q1?pA`B/d6@\*3cnV3.s)<#)#Y[]9A4)LP&:S6)X$9@3A9$MJ'.;if,Ab&4QfALiK%:*@cke_i!=-\M+AF`Y,QkRZQ/BS^`@1!:Q[`]PA3*0^0+JIN)>LR7a.gSJhGU-O1s09qD=qiN0#`:uuTE8eYUj"L?;KMs='@f3&e%kqr?Vr1uWG%/ld>n@g^F-^UT(N5,!4T;US+^[rlb/f&/XnX'6>9(]acQi79e&!c<;GPIZQ/,dc.dD%A!8LZ'eE\RYB\P0S*bL=F8%VHd(3T1'oWT;=Z9icG#fC)-n[.>OPc\QC>J;c65^:SBs7Oja"B9?H@kPbi5m,chR`Mki6$X\@S&MDBTa9OS5kQ.#FDrY6_cMnfQs%;3XIbQh3`j9k,-p.rCKfM=p(g7#Ad=Di6(c$Z1s=8*^Ni.hV#Q%[A6eG49?PL\*1^3"T4Up:cVDg;3?E8g--bg"t=FiDU]sI[9Rd%>Uc0tkI6Cokd]Tb*:JGB@5DNf;7=-8s-9qApPdsj'@#W@Mq(MMchJT16S:&4W"+6>+.Q"%a'56UneV"E>*>'D\1)O^G(km+/('"P%7StXh*8?"Q<=/cT#9O8<dl&'07VdTN/X5se6I(=l%&I?F=WnKXd!*Sf7KpSa)=gItn1lK@WDgmlg<B*DOBOpb1a&7`+22T"1<$2a%5@mr9H(/f1aQLbOXht&Q(q16VP0l=U/VZCHV2Pf*k#m<)3ea>nTb<.PR'hoY7`ULb<@2i>j#4p9KcpYI<j)h:9^1?T;Zoi/g^G.%%D=1$'D^)A!6[B)"CQ"^cWSB?%"<"[``A,daK2XJ3=k*7(c2!LE(9qPcc[*_!T@.Nan<TKfFh*g7'TLmXi<@a?-QSmU"">Q;#doaA%A^4)+CbWAOefuIE=q;dSZ@Gf.8L>=\gq^6El!lADR;0eSiu`26:aqG4$C=M>0'dN>.@9Poi&Y8`^T?I&2Q-tV@JnC34Qd/R?e:0E%<e!%uqrF-@o)V`DX1,"T'p$O+PV6pe8_`2:=jlh2i8@K_D2)(b1#2%lG^e=TTofZ]R.O;cftusC@9_gF.ra/nX)sm0/Jo@pJ"RPZ%CRc_DoWKHBA\V)0,u;lHAYS?3lAhfSE4Y*eDTEja?]$_=-XM;5F9.<)AE#)$A&`BQZi6f%TN;Tohf=Hd7k'^5/^:+=duk88.>Aj7%Voa%;dW6:KD#H<@)X*#OqidE>^j>$eU/?PW.s\^\OtdcOVFXc56W6Bdn1UQq/E[377qO;Jjc1Lla0e@YFf^9RQXg5>P70*W\BHn=%%jnX3'K3:^-[cqLQ_a5:C7u4Q7_/F4b>_h)BoisoSPiX0LMMmTY%=DshH;a;U(l3YFNLA_J?F3nJTE.E`nk^d)C[O'Xb(_b[_Br\%9]:;UZ!r<TAhl?bri03iar.W'UcE>f\=HZDZTN5X6'k85-dsMuA(6TrL9ATCD1R\?BP;au8^GYd[Dnpe)Uq%8-I9`7lN:;d6rnQG%EnQ1I!Ya/q%?4$4CF88#G)8>`*&kl).+O&R0DTLO?b3\dTX@Tb?Di'9M_j]I;J+!LK<brXjVSPO4&-tTM<GV'(HQ%1DFk;ZJA[q8%N5"-I&\)m/\;TKmM%sgb$;0'])(XrLc)_T4W.iA:6N8s7d*`]]\]Q6n;m`\^[(fk#6\;`4H6J<<ntT?Bk)=GM_eI!#TcN,2WaiFb%)B+`Ik\F3=:jKs$6V8q0LS=aXG%T\c[\=-ZK1oYNWQ%BigsV*T0;L^KoYU7./@R]$O-4gD">OTqbX1Ch-sYdFF_OQm69ZHj3AVKd%SanQtjJjionn.0]SdpW<8d1B/<L'^<>Ul2E/<@OmrEh$Nrhe&)f""ag;O9_2p&UN'<$KU4>7;rIBPe*5AE\m**]$[R2#gqtpbn[g%8YgG[b..qigUUp1BL]SA-r>9799ZaKO\BsQ;6$XbW(Q.20^Ba;d.Zgp*blKj[\S"._nX3HFG!['KYsW]"8A8JVa@kPgO]OA$[(=p%[^r+'RJrU:\^H5-?JmO\B9PQTmSFiZ4.e)VQrT?BrRtTsmUmheNMb9^-\Gs4&!)p.GHK8/[;*f]m<ph@P,H30X.^icGdTg-7Xq1&%X40[UakD*Js#t1I['[T325:Y0^IB,kkDa9<bs51%YA0q92>u&PD8&U-1ei+]HCYO[5*5-Z\m8LKCT?.>lZO^*,?f4XX,`.=J`KA*%gSfOLCAhZF!7\C:45`1\(i'!bNaeZpj">#N5&.L4@Bru#,6iI$8U."9lSRlY^f$fk)aeD#jEnB1Vr.FM)CC7<>!p2uj!9=Emk3#P%%NF+l107)>%9g0U=$SG([75dlZSO?dn\9R\:9m$g(C.tFn\<n/j$SHrRN2i%[qgWj;%(/.$8j5E^&O%u!=lE_rD+f?rVbTQ[E1q3%Y3()5"Y](XIC-R>\`7(FNaSlpG'DTe5).'9M@$E8CA)W-K3mqN9BPGKj;>/,5G_m,Br'2XOHNe:r#p_%-mjrE0=4IEbp]KDNTOSB%,S1u13mR3e:ETNRS^Glah^+?s:=8#Ihahg>j@9jfbfBm4:A1?QD?C2ubdG9"p"D[[!@2$FlL:i9)?>TsOuX24Q;!olPVPilE$^C1%"'U.]-J&@5dK-Il7Ot$tg>h3WUGZq&N>lpp2tTrLB50,6-;AF-M.kMtqag1(NE3*n'8E/29fY7rr#0]AC].,B<>uBu&%`kL48E38%pB&qmZDF0SI(^S[g=g0.'HY[>#9p$;SbF`@[;6%S9gL"i!0YBuq,,RFNQ)K65L9U##4go.fDUhTrMQPfffKX?Z,Wj.rR:4,92-K>%4Gp/[KLo!6b=S'8m:TC6_&"u^m!Je3%f_nu*@HG<!(j<COL4LM5g5&*nK;h+c!%0qr:ih"R+`fF-/%U.)l%V=7nmZ:LlrLAcX`5P%D=+YF%#ES9'#Y<$Dc"ZTPI2IEn2GtDRn4C'f!#pS7"qlSYknB5SPLgc.0<Of!>E.QrFslqXk+isCDhDTU@T,HHOc9kJJ<[a*^7]Y%T!q2YW7(-pH3^"%DBP*XFR*-"]JfZpk$,XZK4p@3dB>k4#*^/fs3bR`U=S["4kmSpa,l=10]*r]^4OtmDG+p!qFGOq'pDOss6o13%S@m3/lVI_DpV\Q6Hcl#:s12O0[X/PSnDE#ITa%P3=k\GM*BJ.aY4k>V:!m+S<U4G?qrB:-l[p_p6T,0dK,RH1k9r%@>M@UL:eBB)%>:XG1h1"+32H!`Dr2$g44VNp'#qTf,?aY?$EmrWgN+2YmT%/=C)?ju^!oqb[W&aJi1!V^KbQb9iWGB^J\)"q%al(]NXf%;$&&68_%k*6I+B[o/OIZTf[9qqC`7K@^G'hPc+D`!/Wh^nU^2C?O6Wk4HQ.5!S"P`SW?(f2r=B75:olMW9t8ZkX_#@]G,9Me"$CbULHi8M1#%;'=j$()2ZP$rFl57R7<Kr`^eh=o&82-\m1Z\IBgF3hYDo0>U?_^=.eH:7g%j=th!g?8^KA!qN6Un15\-eDOti7nX3*]0GfH&3g#H%UAk@]i(<G.=U6pYo^7ml]*#I%P1!AR#j^j_r,q3\.&GH#4\lDhAJ!Dk+n3q[DX]F]C@JOW^Df<2h[EgpRP_ST'N:m*m(XGnZ=!_e%#NkA[3d=61/s_tYe5,%o_ABQsU_RQWPQ6qY<T4$6R(R8GRe7G1E4glTYQDS;BH^_%1uF;E-R`)kHV9Bf<A6u\"AC7P88q[;T\=O0%86V-Ho<#@ueZds0-4gr^`!K9+rs<QE._ESkmC`lXCkGD@WQ$V!^g6f/n=9*'9/,>!@%D;=L,2Te3>_bN_<<fB4=4/cK?9TX'.cnW%LF.:#;JZhhXkFln(#K+(?><m2!NgatQBDtb4"m:sc(I_)PGTaB?@i43#Xbl1\(b*$8ISSlkQ#96+G<=<aXq6j2!rR>%kj'n3a_tM%4sc1lSqt$DhC9rgF>3@\/AUMHFo\X]3J(%7\C=\>A@(SS52$>V![;H<lF$f>(V6.Akc90b`M4.ngF;pCMlNI_*p,3p\J](W^U29h%UHrPq].ce3YHY<pY24sBG!(LMm/7*I0hE:QFu72mN7V@U&P/5ef%ru1N4Y='K[SSQ212""MNFnIPU`gXk^R+`R9p:]N*UO.G)4QT%>.1+[:Xm#&CFsB_e-L&af6ma:cak=LG5"4PZ#$N5pV;&\#D;b/NS]-nc']qlCm:a4/-^hWcpuRqa(G<(<X]Gj$=+Q_Yjt19\cq_p%jPPN#n=,:0iObONaXJj>%^JACdX&CRDZnrPnI+hgDiG#OLL151rW&3#D"(JpK.a%(5t-do)L>H`mW@@$];&g(PFB`u<D48\!'kLt%_4#@H_p+;*s,`WV)Q@9>NKg50)0_aM+?E9rf'R5^>#Q1fE1DoB4TNtN'$8WYcrk#.X7`mGq]C?]fa&(Vs.fCC_Ed_2))2S<@U4D$%U1HO6qq==$s.on&[D.L5;PQ7ReXN]'n;fbYX@]@kP7Q=f$m+"]T;1,<(-M'Zp^AM<:6&+9Tl?e]=R,p([lX#'UG`5iUHTT2"86'(%hlkF2s)\n^B\ueTrN"UdoJIR"n>H%spnu0p1U>^P]`(ps&%4`fF-XpRorjfJpS<2p;Qg2G!3O6`)-FWO0?"E',FT.]Zp8LO/Pj@p%YIPdmS98*0-BX%WO0J_*!,nEk5ti>l\b:WPIni[nSs]")ralV*%mP_3EE<)u1&C$>^0)JWrg,&PL\EtN%(kp,XsEo-k\tT>6OatL%-X\[DjS4f-"i0[^!p0Fk>WVZTcbF]^r\(UoT[eGih_'i[ZVHlSmlJA#B(s%lHM%AE-B.)JT@*T4Di[B0W!Pm(PY%YG:U;eRnhVIj%n\7.8=dB\X,\/9^l:]%10L*J72?1k,`skPJ!S+eL:^N/iO!-Z%`QuoNht\'>s$Z9\F[uCSNLZL1?XNhAQ25EOd+3rZ#,jo\_NCB&%Nb.WEnj?][b&O=Za[/X%>,tgG(;'#?(m9/@*0@'n<2\>1m_7:VBRlN:RO_X<WeA(NmM%,anh!RO>^(P(27$6+oINf5_Y*FF$3\i,%Lo;SPKOD[=GOD+dC:1Rtk#UdY@-$fVDbg$.$,I-uUlj4=G"4oYljXH4^PCkK,'2$'<jNTin"Q9KG7]Cm]3Okt)ic>i)h$^2g\=Eg%+*ROtHEC35]\@"Um?J`::Nc]cqE=Ij%_Q0,n.3V>f>)[gAX+LH=)0X/#\hlphmP]Q^$a6JX4D%Vd;l5>kVX#i?"52Lh,[m\M;1BN%2]?j^2r_>#2&ko4H8((>ZTW'R%+h4rl;:TNAmTS%qWTYskBQW$Y-6C>%dt677uVC)0gQ<n_'@+ta-8"AO6")3r"Q!2M(+]Q18p6C%=msgI%T/KIZ48Xfc9eZ)=)DoQ,:2o*U,AC7[`Q_h4MG%ajHM4]PX%@#_k>[GOu.%EfVl[$qdZ>(Cp;AG-ns<?&A%<?8-kUg]I#n?%+O%S*E+XDCFUQ8s"ial8DX9fl;Mn*';SL:Xpr_r#VmS#lbDQYDco^N%\%/drmVhsM1%H$57H-tY<G[/!1((s-l28[W%VTEt,`L><%A"8$[k'StfBJn\gU=H0\(4BsR\g@t1kLu`*rZlu;l\Tq/fWLoEZo$oEqn:NU]QZG&ZpPO7"7M[>ES'_+8#?`m*GbBgM/FD4;O[Xd%<;_:Bqs*nTLXo).e0:D>0($Z)"W1IO?K0.@]t`?2l[?4V';-hjilo>jA6cd+]g,k0+3g,6ruIK6+\%JG=;"NS$#EMITm\$aRqrpC%d!N/rXkEO6:8l`&D0esU8lgmsXZu;?/u_sn25pEBOh`4Yhj&uQT's7=_q=KVRi2jF]'<Ii*4fj<g.,]pC*.Rm;#@2.L0A\g'7Gh7%JHj:;=oCMYpnKW=1g7Tl8%7Ntm_(mf=0Ff"m!+]4+9CI>2(K^K_dqS*c+eU^^0Mur=mAuXduX!MH;&KboMCTp<8Vb8Z/=aUX;ilS%bn@"q[E68#^$#-5K'T<&m6BJL@aM(+*I_^N%ts]R9Z22&"k785O97sfYWb-G)q6YMP'#9_QJ&_Y.;BqIJJuB$T4"o7C1;[EKS0".%HcoP7gE:L>A-TsaO][J,XS\0p\6<'DF'SInnFi[>V#NH#aalKh\M8f!fkV&4=O_S"'C0op?aN_7p&<!a5Y7O@cG0ga:hSEsR6rj%%-..6u0mV7ldV@2[e)q@o$"PO$/5tP1B/$@W;9@+8X/5ck[6-l^]nrbUB9eMN=Yjk?=&IZhP'q,,3\:pIDN0;84Rjh;^M43ObOgll%4Y!!2fp$YXW^&,hX_UGSfkU69!J_$<hReQ#5q3:*L/'3T7am`H[b&21QjW.VkM;Ii+LQ!U%QEJYgLRD:,Uj-Wh4W3;:#[W7r2%r[%:oOmiGWnR!I\!#o7>$(]h@PgGTkikUP&j]lPM,"L/5%sq=52P3Me8G_m&RDb#K%<a:l,+s(T7Y]`7J+>@ugK"dq^)g=rlKcp&$9&%p^3QMr=*8'`4fh@nVh[U.QFE)Xp:i0MK_dY(77k-Y.:pB=U4S$4$`leBO:Nh>s3&T*3I892J@P_9]gj=`F22M$8U5B=,WlKM1e%X%eHXNN27^Xr"<.,9EkHkJi[p]Nprqek];kh+SH/IBHS$hi]OEd9%c'1S7XMNQ?T(;nho*4diIE1+&kDtSi)]/If4uaY!h@4D_'u8P%!?+';aZt9Tj]uZkh<]^[hso'(Yo4t[pBOlgj:D+P[V!Lm&$:i+@2bUS3%3m'6d:I\%_Hl-d56uLBhIVhfOe*%FX\2l[5C-67XVO"%g_O+f@CZ(nIhkRa\[_hj4a0mc367nQ)WCp)NU<V"d]pL?H;[;R:1CKAYG$oI,\?j^;q<$qkb#qK/U?f2QnNo!/)Sn=bFMi,6b)%(%T1ZAZ9D'eLmIulBr:]4p&.WPfiiQ%Q+Xj&:mWUB"Qcb#8I%5n/Q-cNdOB4&*ccY+tgTFA$45<3519k,-ICZ<Lo:o4MjS2gHkTFud%T,,0Ta[)r<2>XscMT]0CH7AM/hcj<3ibbR&g_c<6L$I-n\=VIAVF$"#"m]ar@E?uicpi'C&jbE0Ys_A0ZD%%p'-=i8,XSc`k#EgY%E`WZd#UbdsgprK-Z*7!"_$P[Y$r,#[jG`r.[NDq:hTF[H03Ms*:PJ)7<p9:%GNpl]n_WNhr_[jCS#L<*8sHpub&+-XoH4hib4jNL%S_VLP$n^9i%BZk>IL5rnX)>75#D@>/+V+W_9;UZ7^V;Y9L/-_56;k@OR&:'0)e@+/>Nr!]]dbj>7FLdqd;8hc(i2RoR1Yoe54CfS%-7Vqk1-]!XTqKhc\*o7+:7qC/-VkQ(SQ=/lWQg'^KO^o5/#UF`;l!qs\"ls1GuP)3GIefPoESj8n(d0<pnTH4S*RLXTbm'=YSKIV%E#L6ijB&.cG$f:X<4TaWb/4"3A#Du]L:WP^N1Ro!3/gic?iMUeFK-sKc`_@L[nbh6b4<H0X]+G;G$EYP?TY26mMli:oXh!+:=%PC%D!7.nL91[E'POaXZHh]_s&hD$Ys>eGnQARK.Q]#3(j)d"a%5H+]Bn6cWcba,ZunthR<Dg#^T<0.>rjRPX.;+JG3j=4H^<JKXX`/I%qedPC4P&nraC$U5g3;hh5C+!\dE(2)ZW!bg3Et4FF\6sgZat1"gY[&><4RJob0SU2a,r!>#@$0UjR&4BVj7#_k/Co5lLLD;\UW`s%dSR56kaenbVs@jV]dU)QV>!>)ctU']3Xpa:h&`KcpT2j@NJO]8p$2>LQ?HGXqCYuAqQMUm5F,3-SM!ol#(^aiHhfuc\i"VVZJKN2%G.R_P>0+6rqA9sM2RS+`.?)6qmErr&;+$6P*BUr\h:lu;o^o,/R!7l'!0hlCG*d1ilgaQ0lEf?g3-KUp/9Y;\]r<8-/Yc7;0h\uG%_JN**GNj3&HMd:!/a(dNYJ'eDCT!i3]]Os`>fQW9#g[/8;<L\McTZj9't;d84+/.s/rWP6?EDtkcXX#"DOm)If8H8<k>'@sU]&6g%T]"<KbY.3pL?^PF9JuJ.<&gbGes;%*/(<kX8&$)[lngW?1hY!9d?d`-'ft18#K$2>^9(bFYYMs>laE'j<B*!5O\Va\h+6)MBqdie%4C#m$2f,#h_B9t]';;=8[1(mZ&&q#r;`@?2h2@NW2Y;`Ejg-hul18lcd":-<9l-lAF,6A6OiHa^n4)2(+0YZu:<Ol/Vu>aaP]aQ_%Og'kQHBSlCDNdiW]pn%lUXMIF`k)(-8C\g.Z!1WF_5Gu:V7Y^*!H]fN8`tQ*hRSJsj_a1Yq97Rkc107+=cpasO(tA*iSZ.CFEtI+%/(Opfb>(iA#0QI4358A0VbRl%>48ESnqr7La2hklqUOV!RFBV[5CN619fYAUfrkm@)0,BomJQ[oC2!Y6=6[T`l#>tPi,Eu"r:EO)%5*!T[,Dn42kN_BtrpFIEjlt15q.BJH_sqI'oKhOgW>'QlfWhZTc_[2piMjD7;gU(_\ief/g_R>Jm5mI"N#h*5J$&@4H'c"@n^iA=%rT*nK,ZjuY':#?<:JWXYILfaX0o@]@kBF\qnfTBl4Dk+?2nl\Yo@*U"F7liI@=$O_Z01dM6Jp(,^]*#/H0Fb)FslZ.`RABWN+mL6%jl+XUk5=q.nGK]fqd@P9C&$:Kj#.N2h/dnrn*dnqaSQd9#fTnTr4/%V34m8@nS*$6j'UPnd.:Ggn`f7S1U8(Y%_W`Ubnu)r443a"%?gBT0q/.jsh:!si*YD;^g$6^u,/(cs4YQ#r=k_C_A!TPsrFeh4`J^(tcuK?&o!NHXMEF?upurbMcpDF+kS835]C.QkT"@)?Dh-tb%TCcdgS34o8f"`9=)\HQb7-hn%Z0n58-_!3j-tmiu,qsP+<k6mjP1Fg%2jgkVdP\4_]?;ses2-`PG3UTEhhJ?^SYA#;\lGJ#Ug(l7%Qc^s#Y+5p]]R&_g.B(3+H0a"nm[M7sgqS)U=p_%\40;KYpNi_ml',lAUt\Rcq*uGgnP1Sd.tXD<SLR\kB(TEr?^a#mXKF/pS]8*A%2lENq?a_*pWNG@=WH*LWhW[r6;m:B_#b)D7[Y%5N?ql7?:j;64k0[m3fX.aWf!,jI`3iOn7rI,/)n0r.#[>;pY\KY-0b1c!l(393%'6-'Jpo8PHXP%jUV<64Z:<5q`rR'qTfH`%fb_E<Z=aVQid9)Au@eoHMPYs_n.\Qcb5S1gfX)i[Mlk48b&neuQ"I&_;q1k40V+%lK%4^SB_\Fs$4:t.,h`)F,!M_qU(?6eYtTD[,p@JmO7GHgMrjpHbBT#[S8T)W*98ht8#&:;%$V6K2#84Gu([e],>&Bl5&Kah,X>l_s_%@4E6D^Q99`L'E:s9HQPT[Tf*!-3WU_6id#E*58SM6Y*QAJ4)-S"Ot3n-j-8UF*TQ:ISkJR3]SY3O$Q^5N-+XVdVP+/N,MKS3d)Mc%@Z68-r2SQf?"]8CT=fApI55O9i[9[kW'(:DZg.I1KNmd!aRVQFQ)bDZca8R(6C(,O[hFQ\i.p(oZ@n:HT=_'NbFgB7=9rJ\`S/I<%FaD7ni&tf4SOo4%0jc$tO:8Y53$AZ_O'2,1a#eIl;gKqcbT5oBG7ZpeUZaTT0.!mq4K.I<aNb'm*3CumbQ2paVmE(^/'$QkZ9=5_%*mII31#/&@Jj+2egFc_KFWHp`Z?:7OrQt1:N"58iGquC$.1`ri,&"C9)r%=`<Qq-3\*,:ZQ*V=@O8#a!KV&:)9:4.+0k$1u3ZD8d%>gUb0X&`N^4AEGQV]Q!mPf@<$bf=>V_/5IOd"s)eU?%\3@thjrho<[)i`sNPYe,%WCZi=`dd`B*^@U?q>1pjk/oqm``T]$6=(94<%/F)ehlZ<?JV?t4K9F;C[[K@o/Q;0j"`fa]bfZlH]Rm1fVIU2f4ndjD@k<[,Z&I0o3ED!a[\,2`\fqno/^?L!e>/-f0JnQU>4cAia%BsQ#tRbpTR.TPlZ;IGCXrQ^@6e=O[)++UPM]TIp.925U=]B$4t)Y!Mul(GepAN,_E%A"#^rQLq48r#IHReQ^t1:^8MUsf(2^V7E]%adeOWBrnR?/,=]G&GFN(,eIP1>^T>;2!.C$;[q0Pe]ik(X/):"@oeFEjWJPG2Z$pYr8%=+eSqW7X-@5GNX]Z`P)$X_,_nsbFd?O0%<H%Ok?r=/!FbQjO&tae,5HE6(."=(-Tr^3WZU!X2?J'uOZe":U49!JgNZ3mXJPGlagTMR4ALtFqRo"(^(E_*_dDW?lJs8A-as8Fo%#8"Lb3>5.7Z+\+36lN,L;9't4J+os:B9Udr:#3d*M'70!,b*k]B%M4%31R,R(T57R)RpM`*QCZu\1e2U@8#H""f;97Foc!:Q;IPS%_1DdiN,NiBHf&snH^bg!5#<;f$rh4[dhO5*1WD:tk3J5&#@HJbLoPLQZUk@=-+OjVDDq=Z"5uUP](\jiAB2gp=];T8X4[T`(a(=d%#I8[<(>j:i@gjt2NWNW2<qg.ndNN%=+!)%J?NTH5/)JWtlgNuD;I8$E8&6IGfS<,nd&+RAff'GekKkDO\Mon@1koSrZ93bdUO=P(%K5WfA*+Q;`k]#V77n7:;d7YjjA:KiC&EAA.fDYn[T1p$0q.fsl*r[&k-(>[Nc(FP$?.L3S-4<jSqT,g34!6cG8!ugI^H<%p?sY6D%mX%jG1gs_$G@Xt`AZIC@eO$ckYlK55ZEJg8d.ufmaB8B(qD*[^>2HjtbC0\LPjD*.7q7J6$j*)G6rlC-4uO?h-92IE:J"pY>]a,e%:3sKoaK!EeI7eG*8B`!e!Md6<o"fP,>c1LU#iW>g-d_\'iA>0<Y,G]W'fMBM6XI@5($EP)n\E.tH"D!sn@:dS,Ek9)Q-@sX,qn2_%*NL>D/Mq!6S?t(2#Ei,Z*.@N[-;W+9COc2':\Tk')merD::5o3p'3*L*P+%9ei9pV;*,3='J;>A>oje?o\k%G`k43X>k[sJP_cqe%T;XTIT.&)\X-cn4O01Q8[$qpZRY-@uG[gaeD=DE"Xe&FC[l3B_l!k!mJ=di-CeU:);_!<SE4%MUn)(WI[-;i8Ak%Vho3IH$k*Ka?%MqNG'mC^#JSa?g=n0Z7j#]p*=b@Ap(9T'Gd:^F3>Zt8RM=\$k^9*WNW(r3cL[\0e&![#'bY3p2@%;B0Rnh?W;6ItXcq\?HaR"JH.%/S*]2?D4VAUE<1rqQ\%67`,k277"bOK:"k01U.rj7;aSg!o\id5S.Va2*oF2qo![53QG>M\*kZ*`hrD)\bW7fp>aA@@9j=lc)olE%,(9;Bf#!h,5.%RA/7?J$aRs)qeIWYjANkFCL"rta`od!*'OZ[&Q2+Ld?Sf:#m&SdB\b1=+MKpeDFVXf8Wo#nG@ab)mg@;orHEW#F%@;8F_dbLmsYnge>Ghf_CP3DP-WD!r6E2:*-f<p^AQ0.!R,7MJ4quG?la:0a0._0TbZ299q_?>kHYGM[a#*&Ff80=9Q1mONj<Uc6\%<fD0uF/lfMnsrQ?pY%b6<ZnP\=3oFXE&p'OmS(3Qli&1'Z7S`V#:&WmHWbC[-bD!)omqm\jqYGhB^aj5A*MfGl%ch?GMc%$MRLLD%IN4[idT"#dS:0b\?t7(lFp;2*k/X+\[PM<^8J6D4fa#\=F&=Y!M53Z2/Z/juPE#>t0;*.9T[PS2Y/nflA1.jC.,:L\o@Y[WbE[/t%rq6-q1ZOK_)ju[ef*o5UGVM4#3ZsG#FQSOUH#i,]1[&48?:YQsG6XU2[c#XqF>;)M3^$\dc5\m3:0@dlU%QZs6g("+B4MCqQUBri%.ES6(bncg)LX%u6N^ftmT0qdI%l8nUO[Ebk>[%CQo>8bC6YGPYnI.IqPnS3%X9$H2Bl?.9D;-WHhE;Ncs(?Y>*'CptX8PV@gH5(a%O*iCo`PeNhB(b5WYPO(]p#YEA4Io7]9CBO7GJ5sYd`aA9lrc64>Z%rG^@!cp/ER%1eic3X`o;mo+5/C)R</AJQ^G]E^6*<fbjc"&%A*2eS2jah@/h(kM9We]9@t1fH52Nc:IEmtmP7jgk%0^aZpg-SA]8^*N[^"mD8o;Gl-EHP85KRfo8B;YgK@J@3\&Z#>]kq8bOsVNf%\a00W2B6gQ$&J-(f/9%p'?q))b*nr6N>nMFQo,!SCt;5&lD5slg#Os2jP&%QX&$jbkTtQkNb34_43;T%'N<69o:*TVfsWQGmU]=F%bgCRqkr=W]]1EnUf*%hIGHAM7mYUnF=^\h<A.>hOgNabk.Z^bc=$:'OIE1"u.c(cW/EY)o>'U**gcKTYBp'r_o=tH)mP45-eG5QJ%X=4M/3<jqi4MHjM_$nLcjRGsgM4$U;VWdZ0E=The.*JpfiL$#g9k.[1p%)SXBnFkj'uo%<6Dbg"=ea/k0rs=nh&d#H)Xc=5d$R#Z%:RD$]:/#'VXR>5[S<P[>CVm%OS%s$dI(U6ZY6iuIgfs;a_uqD(HXj3a%qEp_'pJ4_9</_$DOK.qh5e0<@a$XOXEVM&=K:0K1Glg%%ibn@tVmoI\I=_lgG^`&9q\Grdls5`^3`f`&3kR;9lJs0cQG%\+<]s?,*n1j(4n;uY<\-c:6qVnLFJa%^31EO]PnOhlXA[)%,Ka$*%QrY:2OR,Q@4uP?*oWdRfA9DcP+\6CW#bmaWjQ,1&Oao:nhOOcrA]B"JACrQ&c8LqX`WIK3\lHs)_eogBN(8!$O/+`GOR-V(m"pK"%S,ZPran@(6FFH>-HfEH$r)%3aIQ]H`P?ZhdLA'T]*Z=pZ!V'i?ri@\1Nspm5n=PFnUIW=m/XZL).mTK"ToF>.*&CJ?jl]A*OW!ob%,@Z%rkP.Wo!SjWf.+qsl`;XF$%s@If1c]I/O0[P&>!u-FhMo%48;8A#+tpm6dlVT0S.1/MqAs'Y44+pujG`c.GN<jdQsZJZ1$;<*%$P(jAPOe!NLh3q`W#eYJYNIr6[Pc>^;g<>5#YD1?5GZH=]t/+G'rhL%0<a%qoq3kq*Kao:kf?k2"-XLc%l_VV^R0DY.F0**0ct9a%$C]&M7H_S5)PK2t5+Ht)h]h[N(6^=0.3Hia,,f:)i*?(sVJ%AV7bja0iN.JFSe8HqHoURn!Z%%3(N@TSEsoCG.3EHO(3A0[6!qc>%)g"Q`=P8&N^1/A/+iAbN90Y.n@o3lFnc$f2l1HHXHq$I!BSR[F0ujbW[UV+bVhTr]@YX9o^9MF-`l2g:Mh.KOd;D&e@ZK[U,\t2d%%3;nJ0SO?f)qp\+g"V,mZ&jpCZQ]&mbftm=VqVNJ1G6^Qfs(*j5AN<ZToB/g(Vke"]nMs\9\PoUL(g[jda#LAaBIOr3;Zi;ZlQ@:%E2V0l>f3YJ1$]E-P>4Iao1GMH??(WQRh#nM-7iOg$u25nqJ-Z\WD>_dbXdH-(710[oWs(,<,j@pLlBj;dRi5L]UP:N$LQ%j2eg!n%Y>[k:6K;rI9p(S'rtsrSQe#8D+(5_A6W9ll1.(LBa4[r,iFZW;7/6@hR8`(7jOiHji<&&Jp-4WGk:eRh5UtQjI`ptRiI'CFF/?_k%B+V=Y3#BCn?RhT%X5G5OFG<aS#QL1+YWH)SI@gf6@n!O2X8rs_Sd98ba6jaeTGf/I=kq'#B+OiX+Cep4K?36&@Hms\+i?*P0'M!P%KgaA@(61oK!bV6gqrh-85*DD;jH]@/&LQtF_t(T*5Ss(D3(J"tgk23tGl1)K+3M&oqoN:G\C?#]H/6"`IZ&o-o'f^'>[5hiYDR\3%X6Z>E>>0`HQ#in7<[cigPoJ0*mS]0"8&X5!ngE<U,eKW8R<,Y*">G9dp@@VL\_2CB8HIT%/3Me$-+i!DB%Z(eI%kcXc'I]CXIm"E%W\3>>g<XZYDA+elHEu"%=gHfQ_i8H0GcCD7>:rt+RUKi%FurJkVG=6B@-">%]i09`)d\WZEm([cU)k1q9BB?o[8WcH[!hAjWOa'M%:5a&Y)0W2ia_iW/H`*-ejTf"fk54qjB?cX/>Gmf/\V-kN\*ffQ8iL>I?"qLQ$9bVDIq#s5U\11RYBk4TE2n\'Z.'KEei.Y6>)[<A%LF$HpKJD@7G"#Bf^g[3sl[i=0MRf>rEbc&H?dGRCe8K'f&Jb6K3)**6fs.*J1!c\'<c`@lb`t7dKaI:F52n[qUrl#BP&g]HI\t9c%2p(mi_MoR^2KLceQRq`,`:Zj=7*Z5e#;=m!QcQ^uDuAHN^TkA65alrLJ8_5Z]OunK`6V>NrVeeVr6h-X?G9@JlP(/^H$FXJbbglG%%l6R2SZ<QEU"OP%cA.fLS'K,'B]YRLACER#d`n*R3:/W4;l'A>flU!"F:RJpc'_;he<Kt]BYW5B1Te_sB@Am.e'PLCOkFhO^44&W%?W8qS;_FW5fUh?5l(!.g`-P^&2P"pGl_:`M>^&UQRSDt09BUQRr*7os::YIaRaUQUFABuXK;Wq=Cc\KiZU[C-T1rs4C>tf$ZY%ZH%kDUrQS'E\,k0'X.1r[>-(5&m6=Z22`VK:H\EP&c+p1udf#&mpcZ.X6Z%:"gBn=m8RS9@QLRaPZNkpBN9$d,@<g_j6s2Vj&ZAO5!k%:<;A&AM#O(c9%5*;;$%d>,:b<I.J;-H]_dp0E@+0`BGZJ(d8VO6;Dd7hTb"4n]A8Id(MH"g;R=keN)GdkNRbil+T2;mD9s:-JiQ#%L*m'rVF\c1+,Yb:&h"6,pWts44aR0?!Qhf!R!?6uo^q2I&rBJUPY^`a:Tf6_/eZ/+:RYYY[:F;\/L#t`kOtTl8T4sAT&c<7X4W)`%mcM7G:-[paT1V<-20U[^bPBg5T&Q2#k=dLXM0/aC"F#i$2ICPbqgd<VGEZs5nOumPH-P.JO5f,WfDR[S'IR1.2to1R7)DV8#OIW5%'jGi%Zeoi,H:J@dZe4$Fn<No43CF1.[MbJpQ`#&g.i*cdVt2MO-IV_#Do\&*Nst(%h#m+!Oj7>#D]h.c_pCQ&_gd-/3pdre/dh65%G7ojkP'u2kFl"1c-TZ0m06C]:6b2UY@(KNNedE3dd83o&Mh\fHA2Mf$hpp#1`Xq$+0qV[!@5MAB4BFTca+:SMpY!h3q4-54,43Ut%JYX#.g$OkM4?9^*2!-U!<^2GX1U5MW6o!en`p/TY.dd785]!MUS6j*SNp)5;,[Z\mVR=S^Q+s_L-WGELpZ`J\%GG"8*^L6HNgDT5%>N2e?e2PjWm`mcQ/aN\Zg[5,]0YHe!-SkJXrP>u3HYU5M+1Kha<@8.6V\IIa>><h>+eNiR*ilOjMJ!rprLUqV0B05kLlXq.s#[ll%H``>T19CFJa@u-iJR?2%GJpfV\DqH]2r)Z"DtVU=gpq&]0&VU>rJ%r[Dp%[h5(7Cl>=`(`k8ecqN6;*4Df]6JO8P(WDn'l'mkm;s%_jYtjS_mAj0h>k!M-]7_%7fa7Iq!83l.&9V/;rh`PZV-oWk5kOHl/P>o5Oef[80#iLZM3Lc4t2/-?#4;N!O*0!K"5:MC$WkeJ=Y0%Nr-A+@nB@Y`a$u[ISHHlmZbYcmu"hJ2]UK>DD?SlH:GAjAu%#<Bjs][CZ!7bdT8/QBh[YT:1:T[H#Y^smhQRq7Ci!7D]4fMN&fSZ%1YJ%\kW)WUPG8@(dgU0N"nRsM9E:5=<aj-16G$]/88O56L4r$9nu5?tm'D$l`UN62'LUmO7_18)P8`6&XEW.6$Af($Omf'ETW+0j%q^h[+\/#^WYM<kW3Ni)N%=aiTDKcK6J))>UP/ip%8QjB'-/-&q)/lsbB<UF5:l'd8q/sTS5FuJa(&Ikl0hbO<Y4pB=`J=$_FWaq:%./!=U<V?3mOAEM*$Mi`pL2gPmpqd\^=i"V)-/1S!2nde;F$AB&kV3YB\EN?ioA!#3Q@-3pf)(k>&mjj=4hMg#RUrc^@EUh.Dm32Y%,[EJHb1HFsQVQ)m5hM5GB$^F&oB<QeOYq8r^P?Y^2UFONBdT/Q_91TcnWli9hbqBM26B)h'A\lATU5&J[f+K3A#rG7lffXBoZI)I%S'hb&5%`(<lX!r1G.N"$I5Te@eQb0FKEmpoM`]Oq$Dl4lMG'k8Wo`e<H`%ZLVfY@6-EP;h+J0LIDiW)VF1j0oH:EAFe$6(lQ0:61%a-OhWeNrH\N*@@2`pS<HoFp[TX`e#ZP;1PNElK\CX'NL1@pWsBA'l&!j247DSs&_%'hGM)qZ,,FTePnk9q^`'k%9q"U3BjH?j]]X%q3ke!RZFGSh9>FlS1_1k,6?#;o&LdiJ.j+`q6,;ZHKmO'k7"UY`Mqk(-@k/BRT=n-NV'3E[*h+HPE%?_cJ;8Y*D"o2rRQpU$I<s5%XArLO\mq5]p[OhLQ_!ZlPaBftgQsO<YPPeLIWt>;S6I:Krq\V5d)Wln95+F=4>=.?q>FeVV>61'`]88!ZM&dNofSgW;s\13&][.H%%\V^,Z&)Kh2Wc'Wji9St$Q?!;?$k.=D<]]"b^Lj3>oG<77OHDg5GnPZE!DXlA*3K)cXPo,FV`%ng^h#;FkKnOB(`1NP9DIX"I7*,%/i`,@:6p."iitI<QUmD[g@g]l\X)X%nXP6bEi^V,`EU![(6C*C05EY<lT#26ZuIlm@rY+^U]O`]]mD6,TddOM!`$7]a2e,J4H$V<%gPr`_e!mZ+r&CeTrYnN,KhKapok81$jhK8PCuYCWrWd.5$^qH5p.Kks_O0?:fN>_hMfqYdA`bO/^H$iDc671E_PcY_C;'Jd!q_ra%(ms9:/XQAsNuUF`KYs4`!<)$[#/]tB!W(%A%/?6$f.92%3IiYYA\P7gM)g*;\Zu56joA9uH.FN3^H$haIO0\\CfE=[Bsp\1r8,LQ%hkb_sD-?o&V0k2)_EW,kTBD2M$bMXAOrR]MV0mj`1cO@;H7>K2$hk0;b3*q4nmX96o5T9A*1-5!]F"qoZ1?rWeCfhbe6oIarT63]%9#&trhFt)+SIMuWHi<T13@6XY(N&JeYMU%68oreRB:8@r>Q&.n)p7\W5B!`eP9iE9]m``@Ln86Hc#g/H,YDCe]me6:+YFJ-2Eq/S%IU8FI@X*K#anNJthXO9jn.Z@<O*gi<LM"*3EfPMF$pYSJ",P^FIbk/FMbou7?9e<DH(Sh8lb.c(&SL-:6!LTM<Vhhnne'FKk.fNo%@i)1dhSr[`7GR4l4d5k@T^ohKceHqiO+Ntj?9_ZDPjMMdH1']s5gK7kp\K0CEo1*FI=.5:<!!H=f?ZPKh3sHeqn7I8\,$uO1X('H%T7m`pDY8'1LLd9/rOfT`9c9pOh<S_2Vm365<j%tk?9dn/CHWnbc?oM7rg*/XIcb^Sk.0*i)hI'DqZYd@k;K71<kj@Da#A!^f\_+)%o:Fs8ho@[*hLikNIT'g!GhhWJ]g_9)D*,YKIbqR13M&,n_nCM:\S[2BA>T*Zc_*@VoAAls^#*X`,+.\&581IGbimaJj-qqt_rX(r%\I[/ohWd&gI=2$1C%'Li`p`Sil7+uuKNZ+(IbqR1@E-Y<me,?-][^rCXL&kq*%)Yoj^(/Q\;4-Jhl0>i]mb%b^&#Cncd.#e$V3MV%][^r3qtOb\T.JE2ls@H[PMrXQqXIn9&MLKGlfW\sTCXLEe)0KS*St@6`TF__cTBLqiZ4TM?GEajZ/"X-FY92VS0rchhlM:Ml0e69%D-,#*YFgr@kd8X\(d0j%YFc%gQu2nlpKg(&`=RB!`4^U`<oaG>lXq:"pl:>6+.N485OWi)\r+a^YFdJ,c$cdfOVd;iJ`E&%470_1%hM[#5(?]f6qKX_(W/hrLM6Z1$=RcBZXpa8%+1?6ejH](UOuRX0CSe:ol,:m(JbRa&7Cu3Nd[7:dZYEqG8DEM%,(`t4&;6hcn._g[%g"C5M6tu'n..S2qKf5*0-OKT.]>?'=&,L]gO:/1?p+MRJiQYBuf1@HY;Ib?_K4K1*>H;M,m/#T!b/7-@?l0@7b*U5Hq\OBrjm(H<%1&Tk<3aU:LH5l/"n]ttnSGmCGJ*qg$SUMSn=4us);t]>I9'dRH>^]m7>;qi.alrH+&rjQ<(1P\KpSm%_mISu]7kaS?5O=0/,&@.k%]FnE5C>EE&=S^[.4rh>p`j2k5aR7AHqcINb42@-[rncd_B`5J^&sDfuXk;4:Z7hGr]j7=ZrMqJKQFj%]jm;W?hf%q"oLE9#CP0%i%BcRF"@[WOo5Gd"-k4B7`,Xg);K[O`6[6OFK>S`K8>0P[KbN=N>QgP?<`J8L%\@e$[GrMmVV"Y.tjaSnROjt)0X08"XTDj:0"W@dI%3^&A2NjV)t9<>4uL@<Dh10^l.q#%.4\Ft)gYbP`1:Xkc'*"(0e<8'kbYPna3Lm83<jb&Oh^\OD<oZ^%'_4L>%r)>AVcWdnjnZANH%_>LE\@q`mIA&cDmH>R`2.k-$gku[lIG!@ul0?1:i4ddrpeU8i-3SaYE\N\8<e[O"02RTkmcE:D1$I=LN<AIH$Iig1<R`;u/T_i(.%gg>oVMXg27*2su!Lo$H_m6\.F'TlbJZqflaq^3m>n%L`Vf4lN_,\oU`\Ak^[7)T;D%1D;npKQLd=\=e#)D9d2f8).,,Z@="Hj,Jr%GN%k"N-ke@^APfR;YqE?i-D!7aX;@FHi'rC)LX^\5$mqIpU?/MI=V49$tro0]]fsXbmt0?])EgI*X'@Hd>cf*+!o/"I-uCG%g:@6%NKo,LrnoV*7OhH!QYLhLbbtrV?[55Ul]3qtm8SD$!gY.cP)q^>0O^q4<n1[d^Ikm#qFaq/q]\M1e9`C2dW)O#>$k<\=<_uSbXI+a%H<1L,c@nNDN>LKQBB1RYpANrI,\Dpq]J%<g-Wf1\4M?c=Vc$LMeBr<-i4TEDQ&HinY/7#[2Ys_o-/>Yj8J4E<'r]'f*4K7BjG+M7%<!GCjB8u<KhkFLn;+rSQ[UV7#I<G9R3R+Cm)\L4ed>+b6TjG[irM,TmGE3!>UL1dm%.]RUUW,57qQIC`@8aAAK::^O9&3D8iBX2L%?[P(2YtqJ@M1$:*^9G[2W>)JJZ;8n]$CaT6-=.efZ,MJ$a\e1,>K6enqfR#&g4"t:l.#DLR@ni[CA]Ch#f[pM=R#O^MIWXO@sKc3%[((RREcZGN@?[)+V1>V6$&"/.0oMHaZ43G7&,29?hB%e:`DQ%#bYcU:DWt^HJ(UWq$S2EX10c"T%uG+YnOg8T+>i'a,_65KI2_%m%Ud!Q](,qcs,=I3IHT0o!HC[Zqg<u6Qg.!%H8"Y3k0I3J624"Qp+)^t?)79#-2AOU]2k,kg/f9[7:Q-Fh?hcmFYC.]o>"#J*-9K.e%%ZY!ZaNjk9!Pl3L+AshD!M/-Del&Cs`a@/_8a>Z>Dl\T$mp#rOe6\^P@3Je,N8iogO:.A25<2)f7BG941,-J8B.,t'9Jh/I87SP(%2Wt&f6=/@#W>H=((3(_8rOOs\2Ks@cnnReJ"%H9N,K=Xh-S,=e?0eL%%F462-8+54*,_iL;G#^t_7M?jDE3P#BB&BkE;3_k'ok[U%2Ml<_jP7=c^c_gUD=WFkSo5>-9NmuA@PnVWg>5j;<\ZVD>rm*$J=67L59b>Bd[Tm7-%(M->JahIV8,2FPK((lQMC9l2Gdn(9o=>L%.`,WU+R,irS$Y[7SeCA0O%$$m\Y7*FU%KV:E`p1(iRMY(A"G47l8'e-hUP\Ygb8DqM3Z6EOhP47:uZEFNrauK$788&KX0Kg8oF:7%f:Df>0hG'QI_Udp^2u2WEZN=od<;rh>`fLCQa&s]*>DRI_GTC!#bA,u_#(D*K7,KR'9Ynqs%'&$^YH3j`:qIB6QgD(/\RGC$I[\n%kojWtp"WK+TGl)!$aWi*gqn!O#`.jhQoN:D0joO$]Pt5,4ums\9X-a]o(GAT=h-(._5bB2I<eb;$Y?@i&8ECPEGF3"!nhK+jF!i8%V;D=4:/@%)'ER%)4`AHCle.J4o,`]IqJb[i:JTDm1j2r-Qe"OWMX^/9*rdIT'::K)M'J"[:cVLNkWKPo]2J0=rQlmOfL`2o&NmU&%OF65\H1=&1Xobd-HG;WXoNe[AT8?IF,2VZ`oL@SUfa5?('@n<2SrpJ[Alu?Tmj*Ar9,u3@Wh:r?P(kh_b4,,r$Yo&#GPX&cFHQj:%pTBm5N&G\F'Mhi#ptEE,?,qnfb97e12jQg!W.DPhAXO.8rBdOqd\-u4oXL.QZP'O]BbM<C9oLVt<*-,TJWDdaVlS`J$JKb&<!&h(%(UW4I227_9H<HDA5gWD2>2r[K6?3q-;fbEa,T]X>!'Y"8oZnI@iFW<0k`ZL%&?2j<5/BRg<,>(^OSsU%\)Mr%`V&$[`C"USfc.WF%#Kt=>DV^gdg^U<$2D=miO`"r8T+al4DhsefQ8mNpBEXiLWS&6DHYchi'YEZF@rhG4RiUB1NC<,TaZ/kt/\35<NTpA-FgbXKOmq"i%lPp5#U4Iu2iM#eYOc\5"a91No8&:*$"k)RfNe.Lf!gjeE1RNp/5MerpO)!FI"q'G3QC+r?alo96BALo`nUZ@H62Pl"DR)Z-d*LT6%]$c-][YFtk'>bfE$m^Lj_;hPUKKB]*T_BI'/3Xp\Yk++W2*li%`gZDE!;F?md#H_Ii!nK9>koNSp;IVgCuu]kYe-Oi*(GA7c.;)#%RkP7f3%#,A,=>Y[85u^QNs<[.C9I-l[c<^dSU(,1Srsf,fPF8Ep#_MnkH?L)b3s/:f+!mhTbqicik_Z%D(orfelRe7:r3oq\s=\W%js6tumua^QN\UQ.F@26hC$,oJC%Jt"r?^==IG8F%W1MeZS*Slpl/Lp`1gHaP>d]6ahS8d^d$WF`md%T`N_X*X-FEc"XE+>P+qQPi%q<.PMn*()\`\Q+5B/Jd*qKAjU0K-m(7SD4J@&:,`jlK(h-4QQ*-:2LW?WZ@ol?,UrK.F679[pJB).ClnjSIJu6rj7.\5Iuo7J<10%H=o4&i3J1kEm)[f?1(B8Fm>``q<RqKP3)#p17e@bk\J]S*ZGYXY?B$/pG*[+_Z]DU?%t7XP'*gCHtUdtRSmrG`pURiFEc9[\N0*3%4H5MILrTu!&/)LHZ7E,M5&:VK8ca-"c3r,*MP$8RM)J/bA/jNL_p`!L`sm*-&:.Y5OrY=nZ,psg?h[c<X@hg.gRQ$*N>)2#=l5K0%[#lA[^&9O1B++1AbGU*X.pD'1U&I.2at.1EoZKe5[8?e/E?0qg;@0[P8pUO(PSh*UB)1c<[)ZhMbF<l<W-Qi4%DL/W1.DGGXMgMk%ohJVtS&bBl,)q^F=5oRrP@WBk3+'6e\75Ymh!t?/M=%<@>Y(_)COhHBp_<EcL#VNIA%]e8$mPY:\bijR"_Qe40_SoQ.#1)o;=nL#%i6r^>1:;b^;"`k\*)O\Z/[d)pAn_!$-6*bLUN)I5SMhoH7JGnR(05*a]/cmc+$@a/jZCqDf?t[m]#Jq-kV0(kMO,::F9Y;Fe7kbl%-0ImIG\Y]39T4J'<TUo`KOjNHme\oN(E!_DeW\<24Chrka*g)[BFaL+]Xkh?QWHhV;tL'eUt:7l'<*6Ye*s#PQ>G-!#O$$N$:gSF%?)`(Q:Ai$6H11J!#ccqrP0MKZ$,*+'_GTB<?Hsq1\!R^L$]!nS3Y7T`+&uu*Zs?Ba/*/mG/1!d.-0Z\-e/bq>0GOc'ng)M80n@[C%m9+Km!@:;!.d,J)k!ooq7j8i&5J-+UahcYOBW7(tdRAmI/rn/Z&P6NUi*N2,KM=Bd4Xd5"GF?5IRV)Etq&`Vo%fhOe^72oD_'Enj%DWp[32`T3La4Je4BDfV;"bj[W,`lfYG0f'&a!Jj?[].k%pKHTF&:"Q-[6/)ek[ETtS#MWn(PTohd6Zt'\7DMkn*f\oMgM_0lf)6H%nK=tE[aS]%B/a?,"bC#R<\Se5bouF#+"d5i)<"@rQ<)Tg5*3Z?,o%Fhk"$_,B7pKB;[7?W;']%@c=c4^B&d=g?C/5=Q9&.&,'UA=%DQT^cbtb<)ajEWS5So,WiZXKU%s$4aC+FdZH`BjTOjb^JYE6_%$0q\8Vc5tQ/aoeg^Uj;fZ+@65Upi-*?uj2e'Q%cd/7O@a`%#<0%J(:KQmeV9G#FI2ANS@9$-6"YYG;8Q*/=Y3,b:M;+7[NeQQcL4!N\s+]^XUD(C&7r*""mWnqFdU+r4=@m8CCU3qG^n5q`coumu\TM%,3QD@YfNmSNaS<5BgC8@+gc<4K\K%e.+*+aRp8Pfk'pZgeG25HICLXkX5b-pR6;,*lP1+`.@?I2?dHd7k-DLRI;d<>dqe0Nh`PQ>%DS)u)@51MpQni/u=,G9MJ"hVTO'J4(<1D!(-"a)eZ*FWie(ToT=Wgh6:5OXKY[-D'a1d\Z"'QP$Wq*D&bul#LDEifO&Yuq]@4Q^F%^Q_=9!OcuA>jap(Oeb(Sg2AQX">nb_"ZAS,CH(ABP1!o6GOK-$'`\#X*Ejnh#GK]*D*1KR1Gn+AoSasj7a^LG!es9ociAMI?U<#r%K+r[2UU876&7EV+7YK&_Hk5tkb!'J'Ksn;1,dBd#UebcQ4007AQC(eSr4Rl$AKuO/P3P,_HP)$2FCS-Q[(mi_c#6+9c25MSSGVS#%,YAtUnXUX(1rq!Yj5`6&/,.fQ21Te&HhglcZ/-E>Z9V>A]nW'3ZeDj%2Lb9:F/NB>S/7Kpn6A`)gb[>nUg-=6'-B^3a*67e$4)gP%,\TT"[t!ju.O(3fp+)k:$446&G\ti?8pd5US0+*mY1_iqS6p]Z+=hJ$&M&QUNbkq`XY-T_;(KeigY3(g`YTPUbBk-IV%(/ji9b#V%7^dg*CfGsb,$bbOYA6Wb@*5e(cYri''e[N*P63I=/#du.-"aa-_92ldKUE99K0b#rW?Bm)O&/,?HHHhR@%GIZi,`)@'(^Vc%g$L$%kCa7\g5O^j(ur%bZl'dl;YesQ&dG<rALKEo:heFDo[<\E2/l&thlP?&<,&(*WAN1QXLRKEK3Y<UBjsiLh\ZsaZN&0Y*M&-4[$&G*%cA@`Eb#[t$1h.pM"]MC$Kf'oG-*WrUY3tDJde`4*7A\t+#V6Z&,8=dR8:#P#2rX22Ua]f7%kf")dNrGH,0A1I*IBNKiRV^8N.%VQ%+Dsgi%cL8#3VnaUj["3dpJF.Q8KC%pglmW_r#s3s"jE^]Oq_d"*FRq6$AEXlN/P_2Y]r'V?FoAA^(F'RRJ)j>^@>@!W[&Ed8J:3;%3m;nNJN:jp,%N(lC3*r^338IQ_FL<.c_R(:OYI;4`a0o2G7k*H7;XMI^b0XI"HH-Zn%MsJ)q?"GYQhiZ)?S4m8?UBk<[L^>3fI"`%2!4F<lcX=5[R5>=ZEl/aHB")\eIVA!3#0S1:fq^cd:9/7]NDmKDYj#E);YTC'UY[maPlme#5XR/A?@;F[]u97$d&:PKL,Cuc-BoE%GI+m2i?=Uj4X-FqXZ@lC&*8S&"^/2K)H9<%`6Wem."hCYd4-7Y[5I#dKmVdSY..e_HnY^Eg,&)S?"*/^_[%1pQ^ls&oK%oq:nf-B%SJ>XC-JNf/<[q<"''=E\c)0Ym4(J&SqJ]$54u@-/Wd8J==Mdc(aOaXLcj\;Xfh..GC*f90eV<r=iGeR;BS)<KT<@RTeZs<h:XT?]%>6<Xd<Fu%Yq=Pp!&<R%BA>:VC0DEc%[k"]mH:BcE:6Z+897Ze^^O+EuMKKD>0O2rmb4=h7)ar$>#"\V5Th92U]pIgLBWr_`LJCt\%4D<bl(/(5sU*e\HIs8YYaluBsG/;eK5N%;Wb20i0s*g>hpgM<hQ)/te+,692djm!c)<hdnMA`BUaE<&+$`YcDbgGt/P=^/m:)oQ@%AJ7)7jQ[@dO^rc$_WSA!TA-Q)`mRFAk=?`VhWj-,&ld*ADl^SHH`al[B5oP\n]4HpcMbm-i*J("mVd+KAeN\noIcE>.)=LJ3MY(R%3I-@u^_:E<L=,jp.NCll-+(+h`QHG:*c04)#a0>@!2BCgBTY/Q5E$:&UYc^A_18D3QkPG!";1D)HX$9$*,!+7g,j?Fq>R#Y_\E)7%j+ge75N7I?rd4PsOkK[eBKk)/TgM7ROdQHJ"NtX-#7M5o=L9tR:=V<V@*j!ef4JQt-YiP=MFF9a]q)n+12Z/]V8-Q+]sj:me<*\!%Aob`KRW$dpSXlMI]<[i$d!qc.[LkO;O'"k.VO(bQj%cNSma;++@&O>Q-S,#qob\C-RgR5ufV;T)dDM6WiS?,(2sh8SR(RaVSX4Dq%Vrp&:;H*[T$1t"E7j7!VGQFTuNimKE$R/SE3*AXEp.umEBT'sR*hka/1Km22Z#(8=P<G_&AJ#[iD@N1HcZu!W'F<$&(>W?<ZHDSj%l7d,lgl5m9g$c/WZq?PX%4&ilYW8*$5f,':X+=ffpI,KL#MkPZ?ZSBRd9CtV/7om`:Ji;BS@\]K6Z2Wam:,6Oe2@"16^'49-P;u*%Hd[]G!jJh+WJ\hk+RE0X0mAL8Y(r;@U9eWZ.lO[mG2k$Wo55i8XAgm1iW,/r;e#Z:!7kFhS%*VF:s+eWV'9#hB%O1;oqQQ3K:DXK%A><<X4q,T,]JRa4):GMfCSeNcB\s'b`OL).!f+h69Qofh]=5[h^TLk3@op,j(@0\^/`5]q/C:e?F6kNp8s17@Y>b#k73jY'Pr,%I%f@`cJ"gr;+S!>7X\TVg/(Rr)>l7f-/mc+f@Jup;^A!^=iMg"LA*4pdkCp)SG+QE*_(dF$0QC`qae:'>C@7^A<fm,Mfi$feJ+04Du%rgErqc;u_\W@/aX4UJtqTpHSU?_G5s';oR$MWaEVq[2#CY+EMCJ52B7m6A/Y@8MuRr%NB5nRDGN)qs8i<,m(NPb#N4cPC.0q.q-/%F^dJYcJUS'=QYLI,Bk;`F>m_L$+;(PG/dWr$atD1ImC=g'j?M:SsmRbp]\n%\YA`;.<B[eKpt/N]!+9pr3=M)`/J,K39I#"[kHMJ%Nep@\ej"(2@7@?eDu::=0Z_-(`Y%dq)NBMLFQQeK2H-oP%C/.!>:@4V]V[f2T2&^)MZGm"1SEXUSCo$[l:WmC;-t1.Lcu$qMndb,%qcI2YiM/6B]lldc]O.go^c>L]Y_:YGT;"_@m4g(^`=4)hqS<BUhI5X.k.^Igr4N2)a_t!JeuK&&MmL$LU@f),Q;k:s"A&3d[#A3\%$e^U7hMijglY2TLqo`8Ugk</b@T-E'-QUI/ZnrHG,4OBD-L:Z<qFW_)>VkUpr7(ZH4jT*@m_nh@9)6MM=N,*S:<]iDd%3Pj:^pRE%r@gF3$,4)"GjZM2m2@_*eH5K)S9BnaF%7%TDre9@6tpJ"qaO>m7Mqo1fR5!B>pDIUFKt^4:>1TIf4WZ9@M_\XTt"(9SpoS<adl(Q%(Xk?cqaoc9rhbVZV27*cY1X?USR"2P&9t\B]Rb4ZpL`.6PAB,L?bY=>EbKUY9XX_;=3[>lf29b<aH$V?=LAYl1j8^oq/RMJbr$`!%(]BZK#4\EJ[q8WD*-2:B9ECS<o$?A((mtI'N4XQ`=28e<>%`>i\H56t!8<_<<3Cb6.6sU5rh3Qt#>[!;&rn%rip.jJ^ZVh`8<oT=%@e4pV)d+\(5)IPQ3Gc'h=\iMuHOa7fY*7N9T#4$DRJA*d^ZVg)_IEi69Q:]7[n#6K'q";42S\FZRGqXe3/PoK3G]rgETWJ;@d`E`%JX'WEEGWD<^P`dC)nt1h&S4Q;%D)bjUNF>Z7aK5-`Aklu'\RoP[3im%g\Yl?1%p([RIP2=&LTa`&9[31^)JE_EB)5<ArJ^AM6?#`%:c4B8goJ699hUTF:iG!+CqJr15-*"Gh:UP?EKH76l"%U'30p>8ERYk.(,pS6b3^5X6E5LA7sSGuF7"3C%8j"$(hGd0`3TPWoXM<O%6%Z^m#64F8+J$f8M,Z1(O?^k1;+p5Iop_Su:,!aA$7'ZtU3P.$FN]),]@Qs&(;'%1[al<#2hT6-<T2jYP:C>9h1c](;tJ/!i>;ZI%WI_@-\fhsZS`3/Jnm,P8go2#QK_o&ed^dr@r^!(](8app4V:/]cQd1u=.r0-&BD!K1j.Aq^mdd1,DsJ:E`)/c8#=k[nLnAKfo5+\%gN@(_*$qUjmO&73gRHOP-e[KHEUR[Y:Wt*TdIuj*iVB-H/3U_dC1L@>Xs:h%j*;\`B`5J(K!E+QmR$HuQVo5\o'7nBfr-L=&AA\F%f2cQ0-_H/PP,g70BX>)cg?;d(iTP:I5AM\1/D^A$(LdI1,kkb.K!2W2I\K/?D<F)oUq.amCiIRc+"YK=EGK0a*.$&?_=p"HFWpR^%TQ\;2)9*Fpj<pbbC-mEtF@r8&!5Dec@do-!LdX/sK?\NPe!O25h>OkOLk\Dhi!qk!-VP&B7ka`DmhcROk6KG[>uT(7r>;LB]cd$m%I94Q1#$M%Y2o+77j!8i%S-c-t`5!X4&)li66q!D=XUVV<!T5r=&nb,#r*Vl&#K6eV.BAs\-V,P\k+5oeW)JQBX+=XHBX>K-SHPLu%kXm&A=3Z@WF`i3M[Db2?5>/4eW%UtoM1-/QeFFJuTt33T?!X8QiapQ;]g-i9(2j>2h<MJd=8Jk^]?YPJfj-*uBL=_$D*Z[olchQ,%p#EPG@5YJJ?GE:R,$8B5;>R9#FA%k1\A$d[S$qNI,n:0c.$.5@C?qK@_Co_(rqe$nmU/m&9\Ri0YRP!M_@D4\]4NV_FX#SnVCaq,%<;:e/OE*&AH84`rqrX7sc_(>_lo#1h]9nGH5"%*H+2lB:o,M=92&),>>s!k1'tY4IY[16AIR,Kml[$ffIk`I^l[!E60QXGMY3RrF%Ybtg4-W>[EW.N6Oe`!Qa]j"70gG^3+Qg0l20modU3dTH3FLS]bl0r'uBb3-\&T<tO9uIAhHSg></@&/!HS=.!iEKL>h5g$dpq#e"%F8,gq_,@g[5)7JC.)3C+o:4Z*1Lb@8!pS-X+.U*oe(08d](IHQNf.m6Ms/joBO!nRXGaOo>5C@+Q-$VY8H:nt-Hn-HREllCGI1Ph%^37usjn=2+f:3?(_aEg_SIX=_]<j2gO8(iQKUeIoID26'&UPeRW"NT2-k<D%,WqKW0R>k1O`4qr?S5qWJ_Lc`J[!`LHg1Ml8$L@%%+a1(Sl^")V:T%_Y''Pkq50k*'N^klK+__Lrha@)g.#:>d=N&Z,8_Ba:o,=ljW3$@J%6._S3THNifKdZ;+3;+ijbRSt7Mq*VSERu*%_aq;CFWg$l(s.&2T\!rdo+I>Ph#KMRe#S=Me-C2EnTK<9FSP-[:!>8!ic1;3r),qQP*FEmU)(U(_dIE"cU"'H^5C!BCncYG;<B4f%+t@EE+=Y+YCe]^L:hakQiI-%d&oU*B2V;fL<&lF1l6Y&AH7L"]l^ZKU[j>h'QnKBL)HG4He-UdkS(O*lcBAPJNQoK58`'ZFe(@b9%_S!c?8Y&+k[UD^*_8)*D[PT.'k-h:qEror:JYBiJOt@,6G,\uQaF5ie`M\L-[N\B9&s\]#U56&hfkWJk5KXEI>W/iuXN6R_QS.*%%&?T:cgKH&JH4J-+crf*GcnIJ.4,TjFcFt<Q5s^F=(s%%c$JjNr\/<;63slW$(ND0kpN@7YOlsIraEouUq.1-S"*nf+)98GsG;2q<%F$%Mj6"@ac;1\4G/dCn'Nl%Q9(3)'*b]>kgA;Rq1\)qjOd:E%Zm]F$j>Bh".7/,9fc7SZ<9QY3lB&/L$$A<E>l*]#TR!5#$i@pL$%Bu:O;U*$1;o@di`F'SU;o`JZbr[5L2pcG#UMGbcLV,He/Kr)i_5_RVrMUC?:==p_u>^ojl^(6^h:9FOD\;<Xu-c\.N`Sb?iepW7`%>JUS1,J6?[GSJ+KY#g/C2'<$CnF,d0JJ%fMp;deKBL`=TEMj4hbb-li<blIUSVHhsrI-WjpAaXN>Ch=?+G\PI^m@F`n/I8a'3'Q2%_8g13fYEM""/JC2TEZXgi8(RcqGa!]['V+^cf!\.r.Al"l'*:k8-q/E<AQE++@qXu+0pKs.NDP-ImQ^-S>$QWJN3]Aj_Qu?aTtL8%cH$;HSP9@Djt\ZR9r5e$S5l7.Q%fob;MFS=KW5@ls8EMs-j`=C<252<:_[[aH3rmDhpT^+F[;:FVKPj6Jrbl)=:)^>_kYi3@FeYg%O6k\2[&lSV+MsJ0.Yq[VR*$9D@Rbs4Peop=_?3pQA-3&\Hk8_8`tC4o&1'sg7YqV=WJj,\C57eoe<c0t'0LRm*G2u2qoIV77S@\3%r"#W,CfZim=#0a$-Kl3Kp'N6a"g3BAe6jRf5SKe]Ob!ugJJ+'/81QB*H5Y;#TF8\+"rgBl<$DLh)V0YKZt_4/OYZLT<^radPR.Z<%r[p\hQDoB>;O1o+REJu;)-3%=huf8o#urWOAM^,U:.Y<=$m!$OL2j/BF&J=LAkACU#o1Xh5djdlAeQUE;%nO2d#q'H71'n"AMp#T%l*+.*,jA3,.7@:8LpVFb`Of(_WGIk/5uj#nYU#d5J>lWoSIe3?^RPjK$(EkVPnF/;/G(GiN2\#A=?;Sh0K=Uhl"Di:]V$g@9h5=9%j-WAK3-MV"".#bs;MNCfQI!=9;CSXsU-K[6Z4n7h87WO=V_Dis71'$\aT*)*iH#5MFP]HCJrXEX&.0j`q0SXc6m-XOVFWBB-#!i@%V]eo/a>0<--(@^dUkI'iP$q95VY'SI1n,+TeaX#YU_`l:PGE.YK//HEL%25gB(X2E'ZudsiC7T<SQSAoN:uI::3MMZO<eXK&e2WE%es$<mbj3(q$>E*jRM(]778h,kPI"6>.$C=6-PN5>JB,a?1a@*6eIa./%+S6Z-Nc@tVG54saG1E'M#CluPb_iDM%;#n,EcWT1akI'%<Qhs=+TnK9LkPK\OUd#b8.ccu6ii9D5pFKuCX?'^6KH>"f[/kOJ7uV1V-PY4U^_t:mD89+Q'>es;ZIF9+"=M3:k0uUD1FSU*M>2]%(]_]<;*c(21)]>9NXM^NcB*A*"J$iq;)Id':)G\<Zo'8l(kFHbG)F+25U[=-.,tF`P(q5hOQ$E:->s>A;cVJ>]N:b6ME)q%-=WX,%c7-QP8K%=iARjYc'2s9*1:jCgrlPKT:DB9p6L^,gB*L>\/MICSJ]CntL<Keb^tLQ^3Q_necRKSr+D[(H@I?->:eD<#!+fCl$%tR+%C,c`SbbJXa6sUog'hV&\4sgui'K/f)VRW(6qW6`M'KR50F$;3)U\kC/>j_tTkAPu?"GtM3PUQaqK#g>/&?Xfi^j.]1cRP09]H/#m%Pg/dM5X81]Q*M:a?CFfi"POO.'9oc`9ENap;?X9+j`1Ya2P_uS@@STS3UHoYAE\D4T_hUF$"Ze"8Z4VqYpp_@&dGno&r$uIb6S`W%(?6YhP9jQB18IU4Xl@,V$lMr4jaot];]pX_`'=n,mSLm]A`NrZ8R*NujK$B!(\BGW,!olYb4qo4&J:Bqc`j93&OG2;#mV[!f6SiT%4=-h&CdsBF5t]V0N:`pQ`)hjR-[,m(&qQB(EgKT)+U]"EF\-.*0U?\c!.BJOJLS<@9;#Lbk]4`)\HJo7>sX!4R;sRP>Ub:\hIVR;%'4[/i5UBgrl7+&]H[MfZFLoAd?6pnF[SqR%"(p]%%8/V@4&P'd-c#jY-(U_h8.&^hJE])M_9tt&4UM8AT#,a]aopRmaORgP?TBAG%HO;4\4FmQ?AS"Q1P<^NN,uU*%&r7<\FWmO/$j[KHJgJN<3IqgO6;(4BBP!]]J>_TF#\hT4&o^<t'M*%8JAR_KX=JmcW%4TiIRT89%6cYEZWa9]a'0/2ng9?77nM87(n3J_dL^*t"aqP=IFMY@YKu5NTq*G*nN%Dmuf6L12d`E%d#Z0n#U`grt0gfInQ7rn&!oGg#aF&TX%$l?s9bkYBEMht/iba/hk'6lZ0n05pY.ZOYf<5LDfY3TY#;jd:D\7s8O#NI-pRe?ebn4FH)/W&6LBJ`Xs7Dp^phNGFPSmokk#Z<.<%bp>-S]NC$3ENb]_nkSEV@O=HaC3,5(PWE<WM>_-=;%-*W0=r)S49S$fb(ra1J248SJKRZ)`.c4$_?Z65)Flj+`3Ik.UCu$l\>dIJ%FX&KWh_e(_0`%.KWTq'1>3<b<=C>j*%UIV-Ji))YTo<,b=["+%+1]LkF"Ec-$ntcm\9XumS&nJE_;s)4/NtQobIYB`RufBI<)s55%KXG]9EV3Pt,0aY:JXsiI"&Y[@Pq*08B\7T88J$`H74gaTR]I#7`&q>h;3,3$UK`?p)17>-b@6@f$qe%O6lSm@l(0Vg4"``l`_f?:%7MMr7S2P?bOP'-+S";C??=_p*bW&m+FQG6R.ip-FM2*hnL6Q:WW>T?SB2VtB#<e#A)O/YB*)-s(!g-XqU-@B^Y,faO!<e\e-I!7U%3NAanL;*`2W:5u!k'D-TAWm_Oc!!PCqll%E_dG;V@>Ld5Ym+_kW3M"R2(Y#i>0I1Jc1Omm-lK]oKl\b.@`/`u.C#dE2Cel.8P*1*%@i<7(9%F:\b31UD18YDSToq0C$$rM&!E>jRceK0@OJq#`L++)*`*i.+i?jR7kiS5KX:kc*`TRC?:LGVh=?m0fW+m07$<tIa<RK3R%Qm%Zp)P/0),F#(j9/2`0q5pO=I8V+c1JAK4`(!X(@u;"=Nhm2+9_V,SNG6EgU6)2\%uS5Hj>?%4Kr\l0qm_aiAX'FIMXCY"1.kY_%'7"OA0Q$B6&=KJmdg!OST1T+jcH-sHk^&]C)KV`114h:,0FF#g0Mf\>W/NiH+lPa+BU7'K/3'.o'kS%e).sh@X=t!-6TO;]!iBKB%"2in\a=%A49*8O"#(8"<kccf\/fHWEe38-K1)j1^22FQ\"4/VLo]K&FKJFQ>&gO32iEZK_PYSs'*`nQLm1Etfl.,8+iI]<3UDECq%0Vk[/n&\_hVf&i7+,J'W.-&c-;i:j&V2S`tVTRh#&7ERGJ8RPrbWCLO(AH^*Ws>MY:V3]I9^64/QI3*#URQ,a1Et;I)f:>Ua@%`+%B9X"<pPF6Ud`/;=@Tt$%9%a9jDTY(UI1_2hS_Q6$&lk3iKX7Dk(IMREPQ-FkeS.HRQR$H9"64B>*L&9jjQm1!XA=J*V%d.BdO("c%j%:"">T&W$7#pK7.9slh'AO+p$RLftM6E_TTu9N=mf8'35"b7#7IuUfVl40Z,*YI6(K_6VCci?(64h1BYb8=#?t*@7F#!]t!a5`)%-/J<\;@QtRGP.h2AfhoPUm/^B'(mTIA-;]Q'AP$(@-F2heGn"S[IqUd,M-9Vs.Nd(E#r''qZZk-93,G.P8N.^+M^/LAk*M;^j'B\%E]--H4EVl5Fuu;K$T::]6bmg:G9MlTZ0KhI[?lqj):Gl^5m(J1/D:A";];N5+64+i.hc[I9g.Uk/16W49tr+_@Y`4^^dd/Xa%Eh_%\3PEG"ZdML!/oQ?Et[2+Ro?PrRe7*sYJfZL#6F5NSFlV>!S=(5A:UW]_dNl_G(mK>H&96cW]_LWY7:cfOU,u2YpMdd'f"-Rd]4_r%.!;8P:=3uI31G5/hN[HY-1K_AS=uP7%oo._c$k69]ga,.gYdG7fSAd^oI<Ei.&ptUWRm1n_L;Mu`<B@/#08(dD%jpj)UC">W:%Mq%@,uSLT(+Z`&mr\Y>2=n'T;p7DfXVaL-1/Z8Q`WchGHP%$^(-=.L<X>].PciAp&(!2<NG:=lO[c<HR2+YLiLtV-u'0YNJJiU.*gA@%8Y6UZl3([G)%si`,?lK_^G]e;YEk!3-'#=/e$J`,%mm.Z_["H9::&k-DM5q4<.%?[(Ap5_dq7+i,m?&7nr]D![WbFhG^&rH,lX#i%OH^.D:`X<o:ebK3'O9[d,6@fH6egC0_-6nUo>%du@<0O"G?\f7X4j*^=[50P:>LfJjJ0\LTs.Q'C9\89P6_0kX7jGVSV>Ob)j<*5%mm&V+hWH_XJV?dhB%%&_2jkCS3ed(Cgs(4PRddf%HB9"<0'aUCfIQljZtJ%l`\'e1A-RPh??93_$MS\HMkV%:fZ!PNVFYV=Eu)<s%9oR)tjoBXaOt%!A_;.M3O:F+:knY`LmZp=!_\<jWL<SRsVf-6`O+DT"SI=FOd3MD?8B;UcB17c[j96@+&r&2A<2PIc%J)V$^<6GD%F-`",Sdo[!c;!Z:.R[m:Pu.$.E8i=#&^cI2Ff(pC"9i^gC=[7HGsft8g\W/AHq#`G,$EbXA4)j13s*DR!03K)M/bW#,6?hjN?Hl<%JS.hNU=r:t!P)U+#^?n3;=,Q*#kB6qEMNB@c8KU6gX:PoDZS\&2AhUJ'_SaC3CNQ8<ggNUO==Ahk.NgQU!2)U/1Eh'e7f3)lY$Gh%g9K,9UVrf_H4Z#s%ip.A![H`XX,8@lA9,epShdLeAZ7rPgUtgBRA]0k#n"6s18egDPdRC0hh!tWjfK2UDJ-8RjH2kHPWWuJ`N\5=%?L2l^S`gI<rJ/RD4Q>%:_68>4@N$X]Va"Ob@/rA;8`Z)#P#";I'f+gg:DqW=T$1f!s%bE^!%@e#*ZEi]UPC=)mR84W+m)u8auq7a%VK&r?D/.q=>ijKW/@%q#RF/bp>F8FoN;0*n&Zh%;gIG_TnGL#QE(#n#_%<u:Z2!;I/B0+E:'kFAg/S[,<NBqcg1As0Srr%=s&4s<%YMhpi-h&=p;du28*#%noQtLs8>q&=4A:W8VZ6b2>=-@6doS[6;VJ6:a=a4n?'C&17fm$O0/^`#i)tBJ6DYQVR6N/m[CQ[!`jM?3a%+Rd/jIgIt)+j9dG5Hb06L*]_/1<Flu;/U&n!>&=SZorO:klHp+m5^mI#eA"0UUD<*6>[V!1d(ssC_#Y^"iV\'('<1AEI''rAFT82%0-IJg.YIG0-qkt-.dQZ^#kQ*BiR`$uOl;Pji4Pb_9HE'c%c8]ng^>YUE1>f-O^8T-M=*IP9Cs$7B@.+b#r3mbYp(9m13RXU&#;O]%aF]?_EeunJ);ZdtlV(@t$*@%W$Zab0$uQ<I!SfZ&#2*#E#.^-f?3*!kFE1o'G%L1"0U-OAHQ\U9iU`8%g$P*k!d>)[I?`l>GcM!#%HXZk<#"0)@Bpm!AZD":OpU70'b$IOU=ZMr&O>WUU#?_l&CdYtJ^OQ`]aQO/U]XCVu0P"V#O-U2bM8)ME=qDS24*n))X,O``hU.ne%2s?,>qU6Sh6]6(/Fo(4`U`YC975(n(XF$%Mp`2*YmK:5OmS2IPo!tR@;4";hAX#JBU8:++99D(o\oEh7n)uOWLm#jU9=i"aA<lkb%TMno=%V1En)C;\bGq"Y/+BAlb!o-,J66P-A>*,4]=m,cLf#<6#IQNru@oqWS"X\hC2p8E+rQu@DV<:t.3pi&I+mUo;Xt%Lm<]"4U%-J(,H69r>..:b2=T!1"V1*DS7'hFV3j,gEC,?3d4@s_dH+sG#30c)^YR<1`0.C(?-2f'e%X@e[t=6#Gm0#0Q+;h$#n-Uqs[.Eh<4%5ifcg+0X9")3,>GLak:4$hDChKoP8>"H5=JV5iLM"HkmNM@h=(%9TboPXUlTA6k->o!C159oWlT2M6g[,W\b-_%EI\NmsH'"cJj/%J8>E%M#^Wek[(.pr!4>SB5IkF6.[8=,r<3W:aXlj+::0h_2Jrp*4GlApU1J]Lq4@Q"EE$)Kbi>h<!AiZAKrU"$lrSCIRf2T]Z',S%!%6jH<h-<:Dapi?Bb/P]Z8k2$eJJuXFN(;LSIJF>aG11fD$n602*slo5liUZf/]B?`Ref8AI9/_\A\s$8/C*.gM&r2=pRJII+1F*%;@0YNJIS;K$XV%AYp&nE"E3>W3dV&B]Ob?7ebheS/[!b`$5rN<g.qVu#CRH?iO-N*puX%NCeX\\#nVJY@SKr)3]OE9P(F[6@oTOO%5qktVp_6:Z[`+[^#F]fMp=Z^"$+E+>P.jfQjKU1q+1jF/-!5JP$S=+?gC?!\-*FFeFl'/nD11YAGI)K+D.>:8I?6kE=A4=m3/rs'%R,m4RS"q/4kiAZo:[H91V+"6;UQ3gGU+iBiN[0K<eJSG/XUL*`@$slr6&9=iM;/fQZc*6"7GqC8##kd2%;%+c5UYp_Jk/0SRPFRG%9@fcAXOm-%4_kkMJ)T'nBGP-8>A"ceA4%AK7?'jXW0(LLbB8E,5a'Sg7"`EkD1/jFn:QF&L\;>h!r#Zh7dV"SI[gh(OEubUke$,:%+=3+kA;W[m5p&WY?&#QRZ&!'F)>tk.aR]JN6KsIbS"N8G-F^?1WXCJml[Yk=dg;*jA-BfF6OM-Vc%;Rd_l&=/9\_m&+KD"i^gs6R%^u;O9,7=O/U8YD*noA]$Cm>j4hs3DAp-Ng$NfgD'%>ghl$Ya+F;44NUh"*W9+Pjmq'_]6qEAA:0F`k"fYt%^P3Co=!:a3)@,#82S%m&qCP-Tfh@Ro2U='bIt_-Tb5#d5X3A3#KSu'TpHg8P<`4G"oUP:AbT)<thBGk#?G_kGE;8N",%)fOlHM=foYCM/9/K5-%GLAD)"U%=h2\<&?s4G1s:D[VCuSF&Rq;$e/MP39bRTtm%b.M&`FIfd=RR]=t7ZJ:R7QfXs9hk/;8Z2M>0ld!.\k.X)4-D-))NU.BaB!gnZ]L%pm?/GY-RUbg7rRY\q!ga&3(6g(9Jq:=]S[i'[tdNW-l3G%u:72bSQ\qifXmn&5-0c>@g)VY)BH8-6lSpf(LuX82;A,0;Bs/jf9qB%8PE]`"X^:m1t+>IZhDQ4Cl"8-18Le5(_JZqW+8SJ7-@k1+hL-cMKCNCd1u&6A`U.\"buh)((&oMN2n9(1B;oil"9CSC=k;`W=-%R%=_Rjpo"#g)Z)!SG92[_AAmR%(:.1LQQPj14hQ0W'9bOsoR%pU:"j#cg:n2HhS-@,6dd+PheZ51*\o*>^+,D%]ZCbEF$(4n%3U&mD%4u[%@\E,1b#q(AG-d@0J=bLH2[KnWL&*?h33k'_&U*,YJ_DkKXHCA'`d+EX_DCR=C>u=ETYJtke"0tOIp9ml]&G\APT9UO'FQHqU%H.CnZKt]p[qUi9`9F<\35,`fp^h/psOj_&mgDN*s?7M',Pat;TdcBDWirPQ-2J"KAS[+I8%9ZOL^Fj[pq>B)'Q\D"'osRRT3S1O3%f<BWbql5'M;W@1'F^&\H/ZD?MFJQJonS-14*(+S8O:]Nbe@%2.?Y2*eY3Wc8RLlBWVKjXF/#4]*ZKcE(TLi7,H!ul3bsk\5E$mYU%o7gYu3qjk4U(BeTQB>&=*sfB?G8OHh+<<%Xo%<';6.YIe8Vd,,35q@9$o2[dR",2t\Q<nlRd+h2'@G'L6Hs$4)R=YA;_4Y?D^\f3%h"\ZFMR0NV1pLi=I*.TU-dKA_'K)mmA=:-32/5bV4H]b?=[Os0AJA."5YZNa)D!Ep=kX*`e\GaNDn43HE0VH\iJ4Ip:WfX7_>\b,%b/?O?]ZJWpR=?q#o=P\Tr^%k0il:eP"Zu^T`A@>sLSBgJ1E\2PnI-D%>)R%7kG<EX>p5'BjV]CZB>lZY;rlf,1JO1L9-m7$N9)O)%ZTW$kg"hA=*f=S]3`op(/"RnI["9'j""S\k=(i>(q2?c-2D)5K(!j,@c$)l&bkB8]XNgI7]k;O*H@*2I#/4E$B9;46fnJE'F;/aG%Smeq2iY`mXN^guD@!#*90T0R[12b&\F)8']R40t]@C+r2#FQQ&+\KdQ4Mt]6nI3M4iYa#rMJ#2_(=0eq9ueI0nehuijYJZ9bb(0H%J8?m2!SO`*"sck;$kQL#jYJ%4b@a)KQd:1u0;!e_SpU8AaS,0BT[<&e1EbGqB7uYub%EuJQd5Y+k?'p#NhpXT1W%dhO6&0L(3b"j%jYM\sF=<a^a^..5"JTE%$qU*_))sspQd5XLku^+OKVcA0#%W)V$ln'Yb@cA)[$T+36bfsT#!VJ:1Vfd>b@cK-ccTmNK=.&l#\hjW%dIJ.uojde+&A%Z3JnR,SIo\ac:-0Q?BAc2M?9SH213Y.=!QhTo#+:OSHj9@Za7:*-QbAa3!0:tMT)mVO4p)e7]mRhe$"r?U6CD@g%/tW0d?9SIhbP1QF@,pY91EbGqBAflf?9TSJ4gCdD1Vib>b@a)KQd:1u0:r9uZ$aQ;Q'T`uT;G$IorUjdL28N860IXEnemPVjYP9`%]mN9tHFAt#c-YQY5%E-RQHt(t0;!e-grj?WW#j)o@-mXY)'SaVHq)3EXF/#K]<lqi<<q1!B4.n1jYJ%6b@b4Sn)Z>JgWO62.n%Qn%5^"]N61kJknemPVjYJ%6b@b5Mmc?5IgWO4p[[5<j/NB'B#^SgZ.A$VSZBrmfCbMC]gN+p<!QeY3"'01dT+OuUb%JNfmH$,HgWO6F%FRJ6H+PY(P"F7Z3pY.,#UCor&Qd5pd]f;>(+GT2_4p/+(I)`HTTR6r-mc?7/X6eq(641d(),puQ/"Zjq?9SI\gTc,1,^]=qCl<Z9%%*8/5)9X@BjYNjl`)]&(>P>=L"seQk$uGrjq$b@<nemAG@-'3&@-lu2+PY(P5dm$*#Vg2X1EbAoB0`nlc[_LlQd:3K=?^57YbZXN%I5/oX^an0_B0^VgT)lc75%AR8V0iJmMHfn8`Q(CB%!#(Onem?MCumGq4-n3CA1sPeJlRi9nemPVjYJ%6b@cK98>MNs!873N5(i(N%>PS]Kp@9)_mH$,p[[#/E_%)`4q$b@<nemAP3TW'nPMqHJ;Nq=d:r91$PQS`jAYgiVkV$KrK@IT@PYLjE/7l'(O"BDSep3OX"qS!I%f6);W;I3n#=N\Nq=Gb&3QD_!PYpo,mAN1f&QEjf(Y`o[(rFqU0cXA93^DBPRrcKc'S/U$_b#$a:Y`pB+lSYapA]X(<$VMACP\N<4%/7ijA2O6,RRBG-J_irlD:eqHjR62;!9M!<Jnu5W<XcSe+PO'RVJ-0=$8NF0%$Z@1;_f==#b+US#C>gT$U_#7h(QL9<gRpMX*+e]P%<@/\sGd]\().'1HV]9:Ac]/uVM@N#$F:DrP[R/BSEg19V(UYY])*?s*;5X;HheO3C1>!O93<W9GEg-Y9@5H'0']hU#LC7`dKP?=M%0fqfad*^/a76,m&4<4%C_k\^@fF5%b*[X<9pi&]"`icdLP_$.-'P5?R;asUgp9mna%l/^uE3BeBe8X,(GK*Ghb2@W6$t[Ln\NEQ?%1:kkX+H<(Rm`M=\L2ueZN1ipo^rB1t29S676TNLblQ\b7Sjj>M.mo`[&\V6_b2g!%S!B\+h0ioa1QYTso-+TSEjkT\>pifUodN1p%:4I*`ATEck"D)h-g,^N.F54R";M$Yi)]M)2%_cc_Ab`Z.-C#4.iW!Y2Q(SQCGpb!FWfG"[At^cm3EHA458iVdGCD;mru41J":2GB%KV(rCKfi-+afn!0LaYSc7dqUfe`b+/?-]^LPb(RROm#p3abZX6H880fW*S)u#f!Z-:>*_pe%Ap4g'P\KQ-4gi)jl*#FIf4GW&E@%%:52G'VVG^<`,HSQ)(jOPa_:1h9b*B7C><>\Cat<?DDIqPD2N@tThmV"b"[WIFf$QG)0)6)=fKMol?4ml9*`k80p==feFk:HR;aHd%S2-;54!_)<b"ThCYVVIFQ&ds]P:<0YR)oJ*DTlVo7GM>s-?H\>,UQHWYn<0eYjjGWo%XP1Q]0ik9RuYr".djn9NJ7D%*Ip6??1"5%k9]/EjN^Cf%(#Pg"%[q42!$"g!a^o"jP]qR00.r)cGiM3D!**3B"[3fAPeM_]Y;4sB=RNa2ormAhcStpZA5$aE_'X46`'k5&+,rt%%5VK=PhEQo^)M:pDYulN]D71grj_r.!Vt;BD;srHJ"$EeJ.r@n/n8NZ/h+[<e]LaeO.!Q?[<'RVC5>Ln\:QN7+cD[(eA]SPat[fr%kA==1rUt9`YT9Pd0=dW;SrC'X,_@(7k`?q/?4u]f[>jtYNq+,P<ed.@:]OL:F,9pq<'d&3HZjVifnZX.=Q[I:?bUgcVu+rdgP:Q.%Da3%Vq#.h:doRW?qY:$Rp[@!(r"Edd9Y>lTp?HtB\/!ZPbMHQj'OSUmYO_"_in(?GI-j7Jm?[cA&:XD%FoAVBi-sh'd6:oDNrOI*%_j:)fRc,KUTscedX.$5pCFkiH*`'@(dh-bNGk_",`;R6?0&44Pq=aO2pWN#5bdFZD-%FZprNG8=(XCR_@g$/"kC:@l?C_D9$&@Op%hG(k+l,n6BQrnUt[m>K%1QE@Je$$Nu^O6q+H[P^0s4u]S<n$QYHYE93X*5esqfMjHq0I]$?,-C,rD/Jm*q)=B[-rKcqBGE9q`B:A%U=fMNHP-kN2if%Fh*0]Ohn6Q!FF3W(X.+ULrGfI1bA[7%fDfuCpCgkX]O;\*O1r>X4OrZ6%#PW:&aAm]+`egH$pj]`m]i76A'_Ic%hK?i.kRpW6q83GK!,i=eoRp2oGS*:;XRh/R]bPK-Zt:sk-leBKBi^kJ_SAMCJKWBjUa8IoWQa3sDi"h,#,sS6kgrfK])Wd.@h%D+%1b(NgTPSGT'Q=R9N3$75"$BNhV%$phH:nurNp71_nHVnL&\=Ko.>]WFgm9GK+a%m6LZ(]X1ueg=^]Wq5U*Hp(S/Y?UP>4qEEdW;0%b`>Q[-5=7Qi1E"!VI2>mV"Tb@)d4%^g*>i'isNL6h!a3+doG7u*"WUH'l5#2YoA>;pGJ2@72*]&Ol'4T%dGd=\1V=/fLO4Lh,1>a%j5H6D_QT],G%H:Q4S8^'#fUH''h8N3Bp.bo2JOPeblGWWP\@4Fmj$0!K]=_)6,j+]qZ:A?*IAUT/euS^3#f88*_4n_i:[SK9X?nZ%9^dUpPru\+bTK=Pn4G>4Lu',k@\5&mkB#hX`cQK9qHmZ=5&Y08J$q1CL]Mt"\V>nIIfk^@\lDQ^*1,QV:^gE6Se-JSM[JBS)"2e1%'IYui3)%q!<j=)mdDNt&P8nAb6squ1JQ`&'&Y$o'`OUbq(lNEVFEE1NXTjH#i)Yq"`??X!!)nbq,:`Ka*9i.XQ+c[YNi3r:+3Ea#%,/Z&mN0X@&gf7AS`$Y\N=t8jE,I!g_%%mkCea4gs$tY!`E>f$R2E&8pi>uOcF5T\r6c'd2/2IJ4QlB"E8,;!R,Vu1K?"T27(Bb9@%]/c5]-n*4_(M\MI!HsG#$eL>s3+I15EG&f(_()DeQm4ED)%#p9RmnMEHcuU02V6T#N=D]sX@SIGV#'*WPQ45u-GC]W7B;^H:hVAs%mi\FIOQVG5&gkj2RM<iMpo[h#UPVnn9`S/!ns*i-[P?Nr!&2Sj!F#(l-9/jmC-G@0TZYnND*K:G`um$n?'JCJ>YkGjkS(;/7lIfT%Zpk^Q3(qaW*(qj<a;1>5?(]3<UH]@F2t1B[)5Ic3HL@rgmig\+@RqR.OtRXaS@u^qUS;`C,=3b7Ei/r"eVG34ULB&f\O,$o&M3-$%Jl!T-RAL8b7%%[t_lNu])62aS?"CmgKuBD*'Zm\srL'#6(d2mCW@*\oUI7$f\kATtl&F7V8k/X5/'Bsd6uXk9B7`pj:-,XYE=.=c%n^I'&T&se!>?9<fBB,_mn_*Pml2U,=r*Sr;Sp?2ZI@Sb.gPNAnF5QgR)tN7&=22@.HGjoj8dM$KX/7aoVglG?m<la?-*-gYcX>3<%+RBJ,pE`6*,'&,5@)%B4TB#U2E;duTs.qioV0p.V]Yf#@i^+:<4Op^4]r1(8f)'BToff"S32?0$YP<m3^OCPt5<&M@?X6rEIs_(d%rq@LPh`]bE\9e&Bp-8"A[uZU=5M^e"s)EF-HMc\#j/;VnmS=q>J,a.P`[uN4p%?r:pA4'h!F_[sQ2~>%AI9_PrivateDataEnd
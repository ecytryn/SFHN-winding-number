%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: reentry.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: cytryn
%%CreationDate: 2016-07-07
%%BoundingBox: 0 0 526 371
%%HiResBoundingBox: 0 0 525.2002 370.8389
%%CropBox: 0 0 525.2002 370.8389
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 7328 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD80FFA87DA8FFA87DFD7AFF52A8FF27FF7DA8FD79FF27FF7D527D%A852FD4DFF7D5252FFA8FD27FF52A87D27A87DA8FD4DFFA8527DFF7D7DFD%26FFA87DA8FF7D7DFD52FF277DFD12FFA8FD6BFFA8A8FD11FFA8FD6CFF7D%FD11FFA8FD6DFFA8A8FD7EFF7DA8FD10FFA8FD05FFA8FD4EFFA8A8A8FD16%FFA8A8FD0FFFA8FD05FFA8FFA8FD4CFFA8A87DFFFFFFA8FD13FFA8A8A8FD%0DFFA8FD05FFA8FFFFFFA8FD4EFFFD04A8FD13FFA8A8FD13FFA8FD05FFA8%FD1AFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FD13%FFA8FFA8FD0DFFA8FFFFFFA8FD07FFA8FD31FFA8A8FD30FFA8FFFFA8FD0B%FFA8FFFFFFA8FD3AFF277DFD30FF7DFFFFA8FD0AFFA8FD04FFA8A8FD07FF%A8FD30FFA8527DFD30FFA8FFFFA8FD0FFFA8FD09FFA8FD2FFF7DA87D7DFD%2FFF7DFFFFFFA8FD0DFFA8FD0BFFA8FD16FFA8A87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87D527DFFFF7D52A87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA8A8FD16FFA8A8FD0BFFA8FFFFFFA8FD23FFA852FD%167DFD05A8FD177DA8FD16FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8A8%A8FFA8FFA8FFA8FFA8FFA8FFA8FD61FFA8A8FFFFFFA8FD0BFFA8FD0DFFA8%FD60FFA8FD05FFA8FD09FFA8FD0FFFA8FD5FFFA8FD0AFFA8FFFFFFA8FD70%FF7DFD05FFA8FFFFFFA8FD04FFA8FD10FFA8FD14FF7DFD05FFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FF7DFD16FFA8FD06FFA8FD07FFA8FD11FFA8FD12FFA8527D%A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8527DFD04A87DA8%A8A87DA8A8A87DA8A8A87DA8A8A87DFD04A852A8FD11FFA8FFA8FF7DFD0D%FFA8FD3FFF527DFD2BFF7D52A87DA8A8A8FFFFFFFD05A8FFA8FFA8FFA8FF%A8FFA8FFA8FD34FFA8FFA8FF52A8FD16FFA87D7DFD12FFA852A87DA8A8A8%7DA8A8A8F87D7D7D527D527D527D527D527D52A8FD0CFFA8FD26FF7D52A8%7DA8FD19FF27A8FD12FF7D527D7D7DFD09FFA8FFA8FD3DFFA852FD04A8FD%17FFA87DA8FD13FFA8FFA8FFA8FD09FFA8FD3EFFA8527D7D7DA8A8FD30FF%A8FD06FFA8FD1BFFA8FD26FFA8FFA8FFA8FD31FF7DFD05FFA8FD1DFFA8FD%5BFFA8FD7BFFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7DA8FD55FFFD04A87D7DFD22A8%5227FD22FFA8FD37FFA8FD25FF7DA8FD1AFFA87DA87DA87DA87D7D7DA87D%A87DFFFF7D7D7DA8FFFD047DA8A8A8FD22FFA8A8FD24FF7D7DFD1AFF7D52%F852527DFD0652F8277DA827272752A852525227525252FD48FF7DFD1BFF%7D52A87DA8FD057DA87DA852A8FFFD047DFF7DA87D7D7D5252FD41FFA8FD%22FF7DA8FD18FF527DFD20FFA8FFA8FFA8FFA8FFA8FFA8FFFD05A8FFA8FF%A8FF52A8FFFFA8FD05FFA852A8FFA8FD5BFF52527D527D7DFD04527D27FD%04527D52A8A852527D527D277D7D2752FF527D52A8277D525227A8FD57FF%527D5252527D2752525227527D7D277D27527DFFFD045227527D52277DFF%7DFD045227522752A8FD56FFA852A8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FF%A8FFA852FFFFA8FFFFFFA8FFFFFF27FFFFFFA8FFA8FFA8FD58FFA8FD13FF%A8FDFCFFFDFCFFFD9FFFA8FD7EFF5252A8FF52FD7AFF52A8525252A852FD%12FFA87DFD19FFA8A8FD1EFF7D5252FFA8FD27FF52FF52A852A852FD12FF%527D7DFD17FFA87D52A8FD1DFFA8527DFF7D7DFD26FF52A852527DA852FD%11FF7DA8FF7D52FD15FFA852FFFF52FD21FF277DFD12FFA8FD14FF7DFFA8%FF52FD12FF7DA8FFFFA87DFD13FFA8527DFFFF7DA8FD20FFA8A8FD11FFA8%FD18FFA8FD13FF52FD04FF7DA8FD12FF7D277DFFFF7DA8FD20FF7DFD11FF%A8FD2DFF7DFD04FFA87DFD12FF7D7D7DFFFF7DA8FD20FFA8A8FD3EFF7DFD%05FF52FD11FF7DA8527DFFFF7DA8FD20FF7DA8FD16FFA8FD27FF7DFD05FF%7DA8FD10FF7DFFA8A8FFFFA8A8FD20FFA8A8FD0FFFA8FD07FFA8FD26FF7D%FD05FF7DA8FD10FF52FD05FF7DA8FD20FFA8A8A8FFFFFFA8A8FD047D527D%527D527D527D527D52A8A8FFA8FD24FFA87DFD05FFA87DFD0FFFA87DFD05%FFA87DFD20FFA8A8FFFFA8527D7DFD04A8FFA8FFA8A8A8FFA8A87DA87D7D%52A8A8FD23FFA87DFD05FFA8A8FD10FF7DFD05FFA87DFD20FFA8FFA8A852%A8FD0EFFA8FD04FFA85252A8FD22FFA8A8FD05FFA87DFD0FFFA8A8FD06FF%7DFD07FFA8FD18FFA8FFFF52FD0BFFA8FFFFFFA8FD07FF7D52FD22FFA87D%FD05FF7D52A8FD0DFFA87D52FD05FFA87DFD06FFA8A87DFFFFFFA8FD0DFF%A8FFA8FFFFFF7DFFFF52A8FD09FFA8FD04FFA8A8FD07FF7D52FFFFA87DA8%7D7DA8FD19FF7DA8FD04FFA8A87DFFA8FD0BFFA8FFA8A8A8FD05FF7DFD07%FFA8FFFD04A8FD0CFFA8527DA852FFFFA8FFFF52A8FD0EFFA8FD09FF52A8%FFFF52A8A87D527DFD0FFFA8FFA8FFA8FFA8FFFF7DA8FFA8FF7DA8A87DA8%FF7DA8A8FFA8FFA8FFA8A87DA8FF7D7DFF7DA8A8FFA87DA8FFA8FFA8FFA8%FFA8FFA8FFA8FD0DFF7D7DFFA87D277DFFFFA87DFD0DFFA8FD0BFF52FFA8%7D52A87D7D27A8FD17FF7DFFFFFFA8FFFFFF7DFFFFFFA8A8A8FFFFFFA8A8%A8FFFFFF7DA8FFFFA8FFFFFF7DA8FD18FFA87D527D527D52A8FFFFFF52A8%FD07FFA8FFFFFFA8FD0CFF527DFF52A87DA87DA8FD17FFA87DFFFF7DFD04%FF7DA8FD05FFFD05A8FD04FF7DA8FFFFFF7DFFFFA87DFD19FFA8FFA8A87D%A87DA852527D522752A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FF7D%27277D7D277DFFFD04A8FD16FF7DA8FFA8FD05FF7DFD0FFF7DFD05FFA8FF%FF7DFD1FFFA8A8A87DFF527D7DFD09FFA8FD0BFFA8A852A8A8FFFFFFA8FD%17FFA852FFA8FD06FF7DA8FD0EFF7DA8FD05FF7DFF7D7DFD1EFFA8FD04FF%52A8FD09FFA8FD0EFFA852FD1BFFA852A8A8FD07FF7DA8FD0EFF7DFD07FF%A8A8527DA8FD1CFFA8FD04FFA87DFD04FFA8FFFFFFA8FD10FF7DA8FD13FF%A87DA87D7D525252A8A8FD08FFA87DFFFF7DA8FD09FFA87DFD08FFA8A852%52527D7DA87DA8FD16FF7DFD05FFA8FFFFFFA8FD04FFA8FD10FF7D7DFD13%FFA8A87DA8A8A8FD0CFFA8A8FFFF27A8FD09FFA87DFD0DFFA8A87DA8A8FD%16FFA8FD06FFA8FD07FFA8FD11FF52FD26FF52FFA8527DFF7D7D7DA8FD04%FF7D7DFD28FF7DFD06FFA8FD06FFA8FD11FF527DFD26FF7DFFFF527D52A8%A8A8527DA8FFFF7DA8FD28FFA8A8FD06FFA87DA8A8A87DFD0FA87D7D527D%FD27FF7D7D7DA8A8FD05FFA87D52A852FD29FFA8FD07FFFD047D52FD107D%A8A8FFFFFFA8FD12FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF52%A8FFFFA8FFFFFFA8FFFFA852A8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FD16FFA8A8FD05FFA8FD2CFFA8527DA8A8A87DA8A8A87DA8A8A87DA8%A8A87DFD05A87DA87DA8A8A87DFD07A87DA8A8A87DA8A8A87DA8A8A87DA8%A852A8FD15FFA8FD09FFA8FD17FFA8FD28FF52FD0EFFA8FD25FFA8FD06FF%A8FD1BFFA8FD26FFA8277DFD0DFFA8FD0BFFA87D7DFD17FF7DFD05FFA8FD%1DFFA8FD26FFA8FD0EFFA8A8FD0BFF27A8FD17FFA8FD4AFFA8A8FD0DFFA8%FD0BFFA87DA8FD13FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7DA8FD24FFA8FD0EFF52%7DFD20FFFD04A87D7DFD22A85252A8FD24FFA8A8FD0DFF527DFD24FFA8FD%25FFA8FD24FFA8FD34FFA8A8FD24FF7D7DFD21FFA87DFF52A8FD0AFFA87D%A87D7DA8FD48FF7DA8FD21FF527DA87D7D7DA8FD08FFA852A87D7D52A8FD%69FFA8A852A87DA8F87DFD08FF7D527DA87D5227FD6AFF7D7DA87D7D7DA8%FD08FFA87DA87DA87DA8FDFCFFFDCCFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2016-05-30T16:24:05-07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>184</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6ncfmrrGm+T7vzpOLS5t&#xA;b27uo9J0SeZ7SVbayaWMCIw217LPcTejzZSAiDuoUkqsm8u+ab6483XGkXUnr2moabBrujsUVJYY&#xA;ZW9Ka2l4UVuD8GRup5EH7NSqzDFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWP2n&#xA;n7ynd6h+jYL0nUPVaA2jQzpKrpIYjyRkVlXmpox+EjcGm+Kp9HLHIpaNw6gspKkEckJVht3DAg4q&#xA;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&#xA;/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>563.833008</stDim:w>
            <stDim:h>390.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Italic</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>7.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>7.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -370.839 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 370.839 li
525.2 370.839 li
525.2 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 .4 cmyk
%ADOBeginSubsetFont: Times-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Italic def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 99 /c putdup 105 /i putdup 114 /r putdup 116 /t putdef/FontBBox {-296 -413 1661 1205} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/.notdef <1C60D8A8C9B7D8BE1853B203EFE351B1CDFA12DF07B00368C22E31EFC3300D63209ED6> |-/c <1C60D8A8C9B77FE2CED306AAE853DF6763ABBC1F195078D45F35AC812BA176B02CD229DD186FFB355299AFEDCDA3C3E7A2BBB8C0138FFC2F675F24D8A1A2064E210ACB5567CC4FF99B2DB190FFC6CD745653327D6267B9720C3E2FAD72FF086DC8533109E5D3541C360CBF9F8DE6E15D008E77916480B96C5C762C587981712A1AA76B3128B5597081D3A484E43F2332F97E00EB8CA70E92480D1BBD05BF5279454393B0CF9B35A14103B3932D2CBA> |-/i <1C60D8A8C9B854D0F4594DE2CB230C00D72A8CCCE2ED8277F493FC10530BA725C23B7C5D26CC1DD529FAE26E52F10603EC22FA434A5EF589284E8D896B14DE3C8E9013A43C0BFBD48FDBD41845BD7C76773CBE6AD8D328F71F5EB664393E92995FCC5BC5635E470649C6BA303A1FC97AF04ACCD05A0991A8BEF1CC5D25BC2BAAD39CE1C6888E27BDA0C5DAD2B2DEF6529C8F477FC2CD60CCFB7D1E5F121F78DD2D61A9BDDDD66832C06CF970B6465E11B9DBFFCA3559D4996DEEC891508DB90A89509F3CB209B732203D177FEE5740FB955889645019ADCD680F1EA155C06327806A2C9546A05C56> |-/r <1C60D8A8C9B7361F02D124CF813383046F2E8E102865649E6346E4AE00EBDF515A44A89A952E4A085F5634D3864EE4305B5BF07B55A1EC09E637E7C6830A233BE67AAA815B678D0618ADF7BD82493E4D59F1DACCF465098FD3F8BD765B585BD1D189A5879A6D0BD585C0269FF295E67AEA1F4AB3642251674DA678FE7C86B5D0D3081506FDE935D99DD3ADBB2CD2B97FA0322E9B7CEEFBB873657461EE464C5A1554D8159FFAB5C6676C33746E9EBE4DCF40F31CC622EB1934B2A10A990B6694C7BEAEAE21B9834F16488EEFAE51397E84ECDE> |-/t <1C60D8A8C9B854D0B361E19027CEEF8FD2D54396C85DA9E4D75EBDBD81F1AC8D8D89CCB529371905FB88E8C672DA56CE6373C5F306F6D800C6421BB3535C1CE57B1054E3952FAF7BB933B92222380068B94C8250FB2A82AD2B50FD6BCE69676A831CBBDA1AD9AF95D0F1273C57F4D28940817AB24D70E2917B660D827A327D57C68FF29FBDAD6D47C886C83040C9E0139F754E6CDC6055994C4C5FB073D2E9DCCD2C2CC51F29C870D78E88085143EF> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DOOUQX+Times-Italic /Times-Italic findfont ct_VMDictPut/DOOUQX+Times-Italic*1 [99{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]DOOUQX+Times-Italic nfDOOUQX+Times-Italic*1 [11 0 0 -11 0 0 ]msf268.477 269.607 mo(cri)sh280.695 269.607 mo(t)sh%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOUQX+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/w <1C60D8A8C9B64EDFFAB0865A2DAC7FE6E4C75B01D0A0D9B989BB217E5398ABF336A838BE21848110157A1AD3740E0ECAFF96E272FB9DF387D0EA17059F22282913FE19ECECA6068C516E160CD4A6C60648DE83EF52D186805E8A3AA9C2D2C7CD62DA5E2BE93DE2A9086D5E82617301EBC29B2B9254AED7AD4A395D5754873A0F8F45A58D879C49D9B692EDF2E4265589D5DF8BB8CBE963E56034ECCACDF5A04B11EBD4B8D27BECAB3AD761FAB7477C85FE0D8F1221F8F43125130A101FE3592DE8F482C50AFBCAC302D42E5972A69B94978A33C15BA4B701AE011DECC7102AEB101E174592628325A28F35BA0FBCBE8F037C4C0DCBF46F9D99B94B0BC5C4B020DD51746D8F3AE94C6D68B3CCE8F9AFFF5EA126AD528CD69A0565BDC7773DA5F0> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOUQX+Times-Italic /Encoding getdup 119 /w putpop%ADOEndSubsetFont
/DOOUQX+Times-Italic*1 [99{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t 2{/.notdef}rp /w 136{/.notdef}rp]DOOUQX+Times-Italic nfDOOUQX+Times-Italic*1 [18.9 0 0 -18.9 0 0 ]msf257.055 266.17 mo(w)sh1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
343.933 336.97 mo
517.932 336.97 li
.75021 .679683 .670222 .90164 cmyk
@
510.732 335.169 mo
518.832 336.97 li
510.732 338.77 li
510.732 336.97 li
510.732 335.169 li
510.732 335.169 li
cp
0 0 0 1 cmyk
ef
.9 lw
510.732 335.169 mo
518.832 336.97 li
510.732 338.77 li
510.732 336.97 li
510.732 335.169 li
510.732 335.169 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
364.512 213.609 mo
364.512 348.729 li
@
362.712 220.81 mo
364.512 212.649 li
366.313 220.81 li
364.512 220.81 li
362.712 220.81 li
362.712 220.81 li
cp
0 0 0 1 cmyk
ef
.9 lw
362.712 220.81 mo
364.512 212.649 li
366.313 220.81 li
364.512 220.81 li
362.712 220.81 li
362.712 220.81 li
cp
.75021 .679683 .670222 .90164 cmyk
@
350.252 278.27 mo
377.433 278.27 li
@
371.372 276.47 mo
378.572 278.27 li
371.372 280.069 li
371.372 278.27 li
371.372 276.47 li
371.372 276.47 li
cp
0 0 0 1 cmyk
ef
371.372 276.47 mo
378.572 278.27 li
371.372 280.069 li
371.372 278.27 li
371.372 276.47 li
371.372 276.47 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
385.092 133.731 mo
445.992 16.1909 li
0 0 0 .4 cmyk
@
343.933 140.331 mo
517.932 140.331 li
.75021 .679683 .670222 .90164 cmyk
@
510.732 138.531 mo
518.832 140.331 li
510.732 142.131 li
510.732 140.331 li
510.732 138.531 li
510.732 138.531 li
cp
0 0 0 1 cmyk
ef
.9 lw
510.732 138.531 mo
518.832 140.331 li
510.732 142.131 li
510.732 140.331 li
510.732 138.531 li
510.732 138.531 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
364.512 16.9707 mo
364.512 152.031 li
@
362.712 24.1709 mo
364.512 16.0107 li
366.313 24.1709 li
364.512 24.1709 li
362.712 24.1709 li
362.712 24.1709 li
cp
0 0 0 1 cmyk
ef
.9 lw
362.712 24.1709 mo
364.512 16.0107 li
366.313 24.1709 li
364.512 24.1709 li
362.712 24.1709 li
362.712 24.1709 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
381.252 81.1309 mo
488.592 81.1309 li
0 0 0 .25 cmyk
@
.9 lw
366.172 112.071 mo
393.353 112.071 li
.75021 .679683 .670222 .90164 cmyk
@
386.292 110.271 mo
393.492 112.071 li
386.292 113.871 li
386.292 112.071 li
386.292 110.271 li
386.292 110.271 li
cp
0 0 0 1 cmyk
ef
386.292 110.271 mo
393.492 112.071 li
386.292 113.871 li
386.292 112.071 li
386.292 110.271 li
386.292 110.271 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
362.292 26.9307 mo
362.353 27.0508 li
362.412 27.3506 li
362.652 27.9507 li
362.952 28.8506 li
363.372 30.1709 li
363.912 31.8506 li
364.632 34.0107 li
365.532 36.5308 li
366.492 39.5308 li
367.692 42.8906 li
368.952 46.6108 li
370.332 50.6309 li
371.832 54.8311 li
373.452 59.2109 li
375.072 63.7109 li
376.692 68.271 li
378.372 72.7109 li
380.112 77.1509 li
381.732 81.4707 li
383.412 85.5508 li
385.032 89.5107 li
386.592 93.231 li
388.152 96.7109 li
389.652 99.9507 li
391.092 102.891 li
392.473 105.591 li
393.853 108.051 li
395.112 110.271 li
396.433 112.191 li
397.632 113.871 li
398.832 115.251 li
400.032 116.451 li
401.172 117.411 li
402.313 118.071 li
403.393 118.551 li
404.532 118.851 li
405.612 118.851 li
406.752 118.671 li
407.832 118.311 li
409.032 117.771 li
410.172 116.931 li
411.372 115.971 li
412.572 114.831 li
413.832 113.451 li
415.092 111.951 li
416.353 110.211 li
417.612 108.411 li
418.933 106.371 li
420.252 104.211 li
421.572 101.931 li
422.952 99.5308 li
424.332 97.0107 li
425.772 94.3711 li
427.152 91.6709 li
428.592 88.9106 li
430.032 86.0308 li
431.473 83.2109 li
432.912 80.3311 li
434.353 77.4507 li
435.853 74.5708 li
437.292 71.751 li
438.732 68.9307 li
440.172 66.231 li
441.612 63.5908 li
442.992 61.0107 li
444.372 58.6108 li
445.752 56.271 li
447.132 54.0508 li
448.512 52.0107 li
449.832 50.0908 li
451.152 48.3506 li
452.412 46.791 li
453.732 45.4111 li
454.992 44.1509 li
456.252 43.1309 li
457.452 42.291 li
458.712 41.6309 li
459.912 41.2109 li
461.052 40.9707 li
462.252 40.9111 li
463.452 41.0908 li
464.652 41.5107 li
465.853 42.1108 li
467.112 42.9507 li
468.372 44.0308 li
469.692 45.3506 li
471.072 46.9111 li
472.452 48.7109 li
473.893 50.751 li
475.332 53.0908 li
476.893 55.6709 li
478.512 58.4907 li
480.132 61.5508 li
481.872 64.8506 li
483.612 68.3906 li
485.412 72.1108 li
487.272 76.0708 li
489.132 80.1509 li
491.052 84.4106 li
492.912 88.6709 li
494.772 92.9907 li
496.572 97.311 li
498.372 101.511 li
500.052 105.591 li
501.612 109.371 li
503.052 112.971 li
504.372 116.211 li
505.512 119.031 li
506.473 121.491 li
507.252 123.531 li
507.912 125.211 li
508.393 126.411 li
508.752 127.311 li
508.932 127.851 li
509.052 128.151 li
509.112 128.271 li
0 0 0 .4 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 103 /g putdup 105 /i putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings10 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/space <1C60D8A8C9B8707C25> |-/g <1C60D8A8C9B7A73DA347F0DC0A4CC25AD3382B8351D419D81B2F540C0F665DA2122211CB75D621F53ADCDBE7815157FCF3A7D9C98329945893598F8138F5D5F74388A15B63DC4DDBDB1A01CEDC68DBC335D575F070C3086679BC845D2E738427D0F7B681E970CAECC1ECA0192676764BEA6F787CBC115862B9B44CFD83A96CAFA21CE91235F59FAB64DFE50A98E215046D4BF1AB210098434AE88D505933B6B31BEC443E9C48567AB352DDD15143CE343B08927EA9C965F9F904D0C1E9AE4FECE14141B4365C351A577CA516601FBE0AFA3AD74B770DF0E6D6A50EC77FBA93516C03FCA671EDEBF2CCDCA919590D5C9DEA3D43029A729D3EC913B24C08E5BEFE573AAB22339502EECDF5C8F0B813EECA1A3643E46181D1A26BD0E961251C6FA14F9824242DA4E6EBAD7E5F2872BFD0F6F6BE709AF20CDE3BC39F29118C3ABE69D00325A184273C17639A8F614CF5086AF810778C30368743992A90E37B88A00B0EFB39F462A8B7048C5ABBCF6C197AE88D4F99C80A2B8E1DBB> |-/i <1C60D8A8C9B854D0DE8FF03001C7DDCDF6D3A68A6B597D794E646C678EE584A1666CB56CA9FE75811CEA2087E2C341C7E1E2BD6147E5E1B64DFF133BC2DEFF475DA598F822B2BE3A9DBFD7105A3889BD250D9F71DE0C91B5EA539C526B6489E8D9E79757A61E2352A71C3AC0EEEBBBD4B096AC9707E6604D45F8B4EB690BCE5B5F037666EE3D29DC12074786C8164E88903799783957677A476A9FAD9CB291219231A21175873BB2> |-/n <1C60D8A8C9B7A73DD30B80525D5D675DA4D0977F59D93029CA5D14D1D6563E1C35EFF4A3EA44981DFE04749A107A1C9F060A076451BF62C02FE2E474DD187526384A6F42E0021FEFF54C8346ADE1D28DE56A36764BAF6B66BF7DB43854DD1D363EB418A371ED43BA933A460B2917DEA26BF87012AAF7B195AB0B8FD490EC07235D6699814C77751D4CEE45D35DBD8B1597438545A60B7623CE491483A014FEEE65ED4FEBDF80A721F21A9D4DE075A36D58250AE2AA345A9C5F7B6CB7C99BA896DCEAAA4342B927737814> |-/o <1C60D8A8C9B7A73DEA5F658431FF26DE1C3CCABA5A5AF56EE1798CA324BEFFED162986DEB20473198E3AAB17E1F76DC8A1DBB020158974052802A30905F0338BF503D35906BB108F3CEAC35FDF3D8BC51C5542899E6D21063EDA8732DC154AFBF51B7EEDDA621E256B5E3E8A8E86389A77366F5766B3A5B4DE72C37DBEBA04E9D5CF3B75> |-/p <1C60D8A8C9B7A73DB91641F6BA5486CB0712FFF8C326A20926BA28A071CD0FFCD4BDCDE0C44AA39367FAC8C71A39B0507E6FBE92EF479F1F2157486F55AAE915EDBBFC8AB4F6ABE34EECC784D333D526F3EA5559C73D1624B2F3DCE5E44F60A831A8E502DF5DA28E74DD48A45198849C8DE213E2FE4E0A1787AE987D40470D9B397703069AE4CF0F4FA65EF586834864FB9B5616439B96E2FDF7EE91EBD164132EB5760D047D5E96F3A228E48459DCF4120D33BB6B48C8A10CD605E653E229921D2C4C571224A04CF9D3CB95F244ED16B0C299C503EB8F189CFABBE5056C928EB45A907FB0C0> |-/r <1C60D8A8C9B81F2C5DE210A78B7176966966FB4A2E70036BAA4A8956D597954FF33C419645546BDDA5A1C075630C88C9E9E0B6B2EB6B2FC3FF0331B1902616E9791F7398738E2F17D5E54890C7A065EB2198D4708DA7213806F12669F67678CAD7B30B1926E6F30FE45B0DAB7BE403E568FB7F28C7F3631BA5B608F502310C8C5FF767FCF95E7EC0C2EC9F2F173FF41F0C7459D2154243B15CA53A73779F93E107279F803A71F8179756E718854D0BA7BCB1168643F72763D9FF> |-/s <1C60D8A8C9B7361F4A471763AC73DF2CB4D0E822A2CECA1AE242CCF137FE2017E1B84759A659774165B7FAAFC754E62F16566CD871C047B4DA1FAE5370C0C235D54992A5E0FA7700C9EE743A2D940E9CA5D26B3831BD83BB30176B0537C44AA3FF8FCDF5B3ABFEF1C2B6D9ACB1822B29C0F334D4D83CA74FAA5037DE49F23F9CF057A26EA493317530A59C4D60B62C344BD8DC7AA9CDF22723A4837ACF83C7D482D9B0FF4236D5FDED500C27A8FA9429CB11EFEE5641EF6FB1753C2B2C35F423576031D731309BB9AC2BE1068E6CE69B054A642C61> |-/t <1C60D8A8C9B854D0F41C7D11C14207BE1C0BA04724483030493967288AC8D5095C0BB34E8B56A5C53BD1B7A25A11F231F6182B9300CAF4CFD46C1EFFF4B0E38766187499A1973473DBAE4D98649DB8F7DCCE25964559B9BA93E6803E419984755899DE68C87EC2F530AC81AF61BCF42839E59E8A14B5E2DDDE3A4AFB0D7D86FA4DD21DF5669B371465EBE7C64497A6C50C0C5658D7> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DOOUQY+Times-Roman /Times-Roman findfont ct_VMDictPut/DOOUQY+Times-Roman*1 [32{/.notdef}rp /space 70{/.notdef}rp /g /.notdef /i 4{/.notdef}rp /n /o /p /.notdef /r /s /t 139{/.notdef}rp]DOOUQY+Times-Roman nfDOOUQY+Times-Roman*1 [18 0 0 -18 0 0 ]msf108.07 158.264 mo(position on ring)sh57.3525 102.931 mo
57.3525 104.156 56.3579 105.151 55.1323 105.151 cv
53.9067 105.151 52.9121 104.156 52.9121 102.931 cv
52.9121 101.706 53.9067 100.711 55.1323 100.711 cv
56.3579 100.711 57.3525 101.706 57.3525 102.931 cv
57.3525 102.931 li
cp
0 0 0 1 cmyk
ef
.45 lw
57.3525 102.931 mo
57.3525 104.156 56.3579 105.151 55.1323 105.151 cv
53.9067 105.151 52.9121 104.156 52.9121 102.931 cv
52.9121 101.706 53.9067 100.711 55.1323 100.711 cv
56.3579 100.711 57.3525 101.706 57.3525 102.931 cv
57.3525 102.931 li
cp
.75021 .679683 .670222 .90164 cmyk
@
271.672 102.931 mo
271.672 104.156 270.678 105.151 269.452 105.151 cv
268.227 105.151 267.232 104.156 267.232 102.931 cv
267.232 101.706 268.227 100.711 269.452 100.711 cv
270.678 100.711 271.672 101.706 271.672 102.931 cv
271.672 102.931 li
cp
0 0 0 1 cmyk
ef
271.672 102.931 mo
271.672 104.156 270.678 105.151 269.452 105.151 cv
268.227 105.151 267.232 104.156 267.232 102.931 cv
267.232 101.706 268.227 100.711 269.452 100.711 cv
270.678 100.711 271.672 101.706 271.672 102.931 cv
271.672 102.931 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
54.4321 102.891 mo
268.212 102.891 li
@
54.4321 55.3711 mo
265.872 55.3711 li
0 0 0 .4 cmyk
@
2 lw
54.4321 79.311 mo
269.532 79.311 li
@
.9 lw
159.612 130.431 mo
159.612 103.251 li
.75021 .679683 .670222 .90164 cmyk
@
157.813 112.311 mo
159.612 105.051 li
161.412 112.311 li
159.612 112.311 li
157.813 112.311 li
157.813 112.311 li
cp
0 0 0 1 cmyk
ef
157.813 112.311 mo
159.612 105.051 li
161.412 112.311 li
159.612 112.311 li
157.813 112.311 li
157.813 112.311 li
cp
.75021 .679683 .670222 .90164 cmyk
@
2 lw
54.8042 78.0098 mo
136.818 78.0098 li
139.854 78.0098 li
142.925 77.9312 li
145.032 77.8511 li
146.182 77.771 li
147.382 77.6948 li
147.624 77.5347 li
147.909 77.377 li
148.237 77.2188 li
148.601 77.061 li
148.993 76.8232 li
149.407 76.5859 li
149.827 76.3486 li
150.262 76.0332 li
150.69 75.7949 li
151.11 75.4795 li
151.524 75.2422 li
151.923 75.0049 li
152.301 74.6885 li
152.665 74.4512 li
153.007 74.2148 li
153.328 73.8975 li
153.634 73.6611 li
153.919 73.4233 li
154.19 73.1846 li
154.44 72.8696 li
154.675 72.6318 li
154.896 72.396 li
155.103 72.0781 li
155.303 71.8423 li
155.488 71.5244 li
155.666 71.21 li
155.844 70.8921 li
156.094 70.417 li
156.336 69.8633 li
156.564 69.3896 li
156.778 68.7559 li
156.992 68.2021 li
157.192 67.5708 li
157.384 66.9385 li
157.563 66.3047 li
157.741 65.752 li
157.905 65.1196 li
158.062 64.4854 li
158.211 63.9316 li
158.347 63.3794 li
158.475 62.9033 li
158.596 62.4307 li
158.71 62.0342 li
158.817 61.7197 li
158.917 61.4019 li
159.01 61.1655 li
159.103 61.0068 li
159.188 60.9268 li
159.273 60.9268 li
159.352 60.9268 li
159.438 61.0068 li
159.53 61.1655 li
159.623 61.4019 li
159.723 61.7197 li
159.83 62.0342 li
159.944 62.4307 li
160.065 62.9033 li
160.201 63.3794 li
160.336 63.9316 li
160.486 64.4854 li
160.649 65.1196 li
160.821 65.6719 li
160.999 66.3047 li
161.191 66.9385 li
161.391 67.5708 li
161.598 68.2021 li
161.819 68.7559 li
162.047 69.3096 li
162.29 69.8633 li
162.539 70.417 li
162.803 70.8921 li
162.974 71.21 li
163.152 71.4458 li
163.337 71.7622 li
163.537 71.998 li
163.744 72.2373 li
163.958 72.4736 li
164.193 72.7109 li
164.436 73.0273 li
164.699 73.2632 li
164.97 73.501 li
165.27 73.7397 li
165.576 73.9771 li
165.911 74.2148 li
166.261 74.4512 li
166.624 74.6885 li
167.016 74.9258 li
167.416 75.1636 li
167.829 75.3994 li
168.257 75.6357 li
168.685 75.9536 li
169.12 76.1924 li
169.547 76.4287 li
169.968 76.5859 li
170.367 76.8232 li
170.745 76.9834 li
171.087 77.2188 li
171.401 77.377 li
171.672 77.4546 li
171.893 77.6147 li
173.078 77.6948 li
174.214 77.771 li
176.313 77.771 li
179.371 77.8511 li
182.406 77.8511 li
269.42 77.8511 li
0 0 0 .909851 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOUQX+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/x <1C60D8A8C9B77FE256F7B18763C7A7C72DCD5BB6BE677861AB8491129EA0A9B90BAC2782286AB292F39893D623822F9BFDA394DF3288BB1E2C0731DE2274E95585890989774C288E45C07FAC336E7CAED1CF76F8C4ABA933B07C9D08F35A51DA19FB8D6A90A415AED1907569EA206F80BA2A34EC4259B21B20E0F44A082AAE50A4358E22A49D905B014FA8511F7144EBF05944BAA07BFC30501EAB38D5EDB15555BD53D7F7D15B60F6D8E1115CE9E90FFCCB77EDADFCB246798D9623417427C1C1AA7C7FCE4DA7F97CADDED9E1AED0FE4273BE451700930E9D67E7A87B594ECDADEE331A2C9D7072DA0B54A7A81F17AB92A2665CF5BDE5C2ABD133111C3C7B9A6FFEB838F4BC847501F9120DD61D13EA3BA7FBF23E1073C8FAF240BD52FB010B6779F0D879E48DC70EE8962F3E93A1107E76F5B80BE87C061FF2A440DF259EDFD6146A5ED6138BA9E5D266E03928CF037F57808893E155917B7F2856A3C95C54DD109031ADA866DDA5> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOUQX+Times-Italic /Encoding getdup 120 /x putpop%ADOEndSubsetFont
/DOOUQX+Times-Italic*1 [99{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t 2{/.notdef}rp /w /x 135{/.notdef}rp]DOOUQX+Times-Italic nfDOOUQX+Times-Italic*1 [18 0 0 -18 0 0 ]msf256.933 120.061 mo(x)sh%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOUQY+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-/S <1C60D8A8C9B7EF3269E388B8847AC1DF83DCA2CC95EEDA1D26C48C8B4394FBFD17BA4272844B3F99D23FAEC50A7EA6C72D284BFF0551BD0E244EEA994D67C8032579E70EC4F728A61739D5AD8DBB8B4129DD5B722422FAFC8BDE88E5D08E42CFE364B4791DA2E591F9FB2CA99F1F124E961FBD42E8AB878E8BE3BAAF755A9CE4977D5E9A7ECCF71EBFA0B61D69877A9EC87A882973E75CA7477FEDEE90C5AE4E9BEF9C7EDA4EBF0E4CDE6ECFE92BCEC5C04A7E39072DCB2A7B402F52671B6022D3586A809E7DAE9919FE8815CB8D620AA8EC995DA478361CE758058A7DFF39FC38C2B0C0AAE9> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOUQY+Times-Roman /Encoding getdup 49 /one putdup 83 /S putpop%ADOEndSubsetFont
/DOOUQY+Times-Roman*1 [32{/.notdef}rp /space 16{/.notdef}rp /one 33{/.notdef}rp /S 19{/.notdef}rp /g /.notdef /i 4{/.notdef}rp /n /o /p /.notdef /r /s /t 139{/.notdef}rp]DOOUQY+Times-Roman nfDOOUQY+Times-Roman*1 [18 0 0 -18 0 0 ]msf137.112 127.732 mo(S1)[10.0107 0 ]xsh%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOUQX+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/v <1C60D8A8C9B77FE2C1A754606E11446669EB88AA334E5F3B6D965A8ED701B036229DB5EBDDE6B935BCE3F66F4D9FFE0CDA8564D56F119D4E8BAC84EC6FD74D5F688F93D3C535AED4F795BD797833B416F17640B483FEA92F84680B0E02EE70EA76740C57FB0DCABF0436121561529ACAD441485D5EA7DBF73E6EBE89B58057E6BC80EE1287C37EA53D3DA5C1251D7190FEF062DACD77313626BDA5D066E4CA4B06E58F5108EAF83B066EA29BBA4663677A2E3D211DBBEAAC86400A5F61B11194> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOUQX+Times-Italic /Encoding getdup 118 /v putpop%ADOEndSubsetFont
/DOOUQX+Times-Italic*1 [99{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t /.notdef /v /w /x 135{/.notdef}rp]DOOUQX+Times-Italic nfDOOUQX+Times-Italic*1 [18 0 0 -18 0 0 ]msf517.211 352.389 mo(v)shDOOUQX+Times-Italic*1 [18 0 0 -18 0 0 ]msf346.156 217.264 mo(w)sh%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOUQY+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/a <1C60D8A8C9B77FE2CEADADAD35C681D96377E0B82CC8ACDB5762353EDBADFFACD451A553C5C39302A9F1D177F76B983509B429688ADF52AFA30F8E4A0B23F2282503B97D206C7C183FDE8BFD6ACD2BE6A3B9069791DF8E2CF592523922EFD64768CD99A1F5F1400DB305C4171EAA77202618276E378016C7BA0833F29752C2A461C11A88BC4E527507EEDA9C848EEAD89D80551320178A864EFC8B3562DEDC4F695E8824160B87CA7F395997B47C0C71BBFE9F871E4F5046857D22F807C04061C73B2C0BBB7B44E0200581C40A3AC55C8229AC23B2FBE040B0F089F70BE38746A5E0285A22E4825D9ECD39D6C15171D3EBB391B1AC132DA188B28262B67971885F8F1CB6195A6A7B0FFC> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOUQY+Times-Roman /Encoding getdup 50 /two putdup 97 /a putpop%ADOEndSubsetFont
/DOOUQY+Times-Roman*1 [32{/.notdef}rp /space 16{/.notdef}rp /one /two 32{/.notdef}rp /S 13{/.notdef}rp /a 5{/.notdef}rp /g /.notdef /i 4{/.notdef}rp /n /o /p /.notdef /r /s /t 139{/.notdef}rp]DOOUQY+Times-Roman nfDOOUQY+Times-Roman*1 [18 0 0 -18 0 0 ]msf335 274.029 mo(S2a)sh%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOUQY+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B77FE2CE939B120B8C530BA36A1D378ED7528AD7B7A10AC71BEF208D8B385B11077F2A13A81C13DFBF440D42A243A800735CB8F4DC3746EB4039E43E77D867A7AA457E639AE6CCAFB17D4572C0E8FCF8662A95CB9A94DBFA339E8C89716E4D6EB7EE669FEA0FD73F1B364D57426E512088C7E414CE09DC0040B747838B6828750C7FA69A58B3FBD05411AA3233E35DCBE1E5C8A3302EE901E300C17D> |-/e <1C60D8A8C9B77FE2CE67108D1280ADC9682165E381A1DB7E740A05B18E65167A034DB250F6D5492B270110B05E60263A42B2C42DDF9AB2E4A276D8ABFFBD6680C39C89C62CEAE031CFF89EF16FD9FC76CF19CB9F9E34BA9AA837F4D55163017EBBAC9FCE57F666560D76840A1E9FB941AF2DF15742DAEB79EA2886404B2375DA19EFBEAC2017EDAD03B37508> |-/h <1C60D8A8C9B7A73DDAD434B9B0934880641DF5380C3FF34924474584582E239C6F8521E020E224191300F7D305E7CE3E9B26FD63D19146E9A792CE58AAA1D1E0988290FCF859899DD695C8334DEB5EEA9B27FF4F22DA997D31BE2F34FA458B76E64B6795EF577D8D66464865BCBF56924A7B28803783086BA628F44B2C71B5D443B3791F12685C141C83F9E10FE5E0058D368A19DE504B892831FC37A9C139A777D98619540D7044EEF1D80D5AA72984210B0E3A3AA2A9488D2A3C7F6CEB9756D12E8F0AC9CA1CD21E> |-/l <1C60D8A8C9B854D09C28E93890ED677F310D1E32AA544EA0617CF81480930FF09D96FFEC0D2D74BC923E8CC3789EA117FEE8A516539FF915E22C6A549B8D0FA459312C0739BEBB3BD2A37FAA8365907BF4200CFE09B70B39C1ECB8C3A6085FE4D765368B> |-/m <1C60D8A8C9B6FF8699A9E0957D16E85AF3EF7FB5550D53F58119CA6FE9A7D4C98706545F58540E72C4F6DBF95879F02D97A7F35AB5AF3C971237293FF5B2FB844191681255BE21478456D24EE31A2A7143B10FBA09BC00C8AED529FA7A252F5274921E1C121C49F9A6BDE50E747AC4CD0AF6F6706D6A4E730F5719639E692B7DF9539A8C86290A899FD897C44E8C098306316B6B9696B686A9B83249EF96A00A2FF0F972C35DB6BF3C3D779B038A947CE308FE712510B0F53C629676A77F97F98DDA7B37D2628E8FEEC42D36B6A15BF9FD22B2B8F078CF5BFE089DE548DB0501AFAFBA32D2143AC07A22D2DF86E9C0B50FA99CAFD1EE8BB0E72F1F0DA0CAB73F3C0DBE795764A811F4BC8FDB7CE3365A061791255C37B34ED2B69FAF3B52D7BAE8CD2D2E8A84097361CCD8E917EDDDA32F45C31D> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOUQY+Times-Roman /Encoding getdup 99 /c putdup 101 /e putdup 104 /h putdup 108 /l putdup 109 /m putpop%ADOEndSubsetFont
/DOOUQY+Times-Roman*1 [32{/.notdef}rp /space 16{/.notdef}rp /one /two 32{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t 139{/.notdef}rp]DOOUQY+Times-Roman nfDOOUQY+Times-Roman*1 [18 0 0 -18 0 0 ]msf353.109 172.131 mo(parametric phase plane)shDOOUQX+Times-Italic*1 [18 0 0 -18 0 0 ]msf346.156 20.6309 mo(w)shDOOUQX+Times-Italic*1 [18 0 0 -18 0 0 ]msf517.211 154.787 mo(v)shDOOUQY+Times-Roman*1 [18 0 0 -18 0 0 ]msf341.594 118.732 mo(S1)[10.0107 0 ]xsh%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOUQY+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B81F2C7477F0B9BCB3EBA4BD58438260E6F0349575D982C091745F57E6DE656DBD360F903D8BB7BA1F42E7A2D05B5102174895284A8AFE5BF20A5DC15D43366CD93FB67607779C4A32BA> |-/parenright <1C60D8A8C9B81F2C3A0B9AE48BDC8A210A6BC24B132D0FFA37976CAF0AD48341BA40F2639F857493B96FE8C9C6A5DBA67902E1141CAD31E1E1F2EAFA78B4F0B158589755ABC3F5D48640211E0BE78E8AD3F692526A7797DC309ED92AB9> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOUQY+Times-Roman /Encoding getdup 40 /parenleft putdup 41 /parenright putpop%ADOEndSubsetFont
/DOOUQY+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two 32{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t 139{/.notdef}rp]DOOUQY+Times-Roman nfDOOUQY+Times-Roman*1 [24.3 0 0 -24.3 0 0 ]msf0 20.1934 mo(\(a\))sh%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOUQY+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/b <1C60D8A8C9B7A73DEA51CB4AB782EC4CF13FD26F41FC8CB88DC14FD82E5280D80A6DCEF24DFC67DDE70F479EF61F4A2F59FB7C44A2DA70AA9DBE3F3332B05CF7A2A04A2009B46D9C510350AE718270C9D98B76F9594F5A2CEFABA8989AB9C1A83073103E665B7D0C1FB0D95DD2CF6B3624FBE8C4DC08D6FA9DA1460775A9F8E2451D08E82D20D83F7AACFD6C43C3765095FFA99CCEBE8373741BF9BE5B927D964DEAC7210DBA744ADF394D6C616E3DDB8D63> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOUQY+Times-Roman /Encoding getdup 98 /b putpop%ADOEndSubsetFont
/DOOUQY+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two 32{/.notdef}rp /S 13{/.notdef}rp /a /b /c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t 139{/.notdef}rp]DOOUQY+Times-Roman nfDOOUQY+Times-Roman*1 [24.3 0 0 -24.3 0 0 ]msf0 220.889 mo(\(b\))sh271.672 317.449 mo
271.672 318.675 270.678 319.669 269.452 319.669 cv
268.227 319.669 267.232 318.675 267.232 317.449 cv
267.232 316.224 268.227 315.229 269.452 315.229 cv
270.678 315.229 271.672 316.224 271.672 317.449 cv
271.672 317.449 li
cp
0 0 0 1 cmyk
ef
.45 lw
271.672 317.449 mo
271.672 318.675 270.678 319.669 269.452 319.669 cv
268.227 319.669 267.232 318.675 267.232 317.449 cv
267.232 316.224 268.227 315.229 269.452 315.229 cv
270.678 315.229 271.672 316.224 271.672 317.449 cv
271.672 317.449 li
cp
.75021 .679683 .670222 .90164 cmyk
@
57.3521 317.449 mo
57.3521 318.675 56.3574 319.669 55.1323 319.669 cv
53.9067 319.669 52.9121 318.675 52.9121 317.449 cv
52.9121 316.224 53.9067 315.229 55.1323 315.229 cv
56.3574 315.229 57.3521 316.224 57.3521 317.449 cv
57.3521 317.449 li
cp
0 0 0 1 cmyk
ef
57.3521 317.449 mo
57.3521 318.675 56.3574 319.669 55.1323 319.669 cv
53.9067 319.669 52.9121 318.675 52.9121 317.449 cv
52.9121 316.224 53.9067 315.229 55.1323 315.229 cv
56.3574 315.229 57.3521 316.224 57.3521 317.449 cv
57.3521 317.449 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
55.0923 317.289 mo
268.872 317.289 li
@
55.0923 269.89 mo
266.532 269.89 li
0 0 0 .4 cmyk
@
2 lw
68.1118 295.029 mo
68.1719 295.029 li
68.3521 295.029 li
68.832 295.029 li
69.6719 295.029 li
70.812 294.97 li
72.1919 294.97 li
73.752 294.909 li
75.252 294.85 li
76.6919 294.789 li
78.0718 294.729 li
79.272 294.669 li
80.4121 294.549 li
81.4321 294.43 li
82.332 294.31 li
83.2319 294.189 li
84.0718 294.009 li
84.9722 293.829 li
85.9321 293.589 li
86.8921 293.289 li
87.792 292.989 li
88.812 292.629 li
89.772 292.209 li
90.7319 291.789 li
91.6919 291.369 li
92.5918 290.89 li
93.4922 290.409 li
94.332 289.93 li
95.1118 289.449 li
95.8921 288.97 li
96.6118 288.489 li
97.332 287.949 li
98.0518 287.47 li
98.832 286.869 li
99.6118 286.27 li
100.392 285.669 li
101.172 284.949 li
102.012 284.289 li
102.852 283.509 li
103.692 282.789 li
104.472 282.009 li
105.312 281.289 li
106.092 280.509 li
106.872 279.729 li
107.652 278.949 li
108.372 278.229 li
109.092 277.509 li
109.812 276.789 li
110.592 275.949 li
111.432 275.109 li
112.212 274.27 li
113.112 273.369 li
113.952 272.47 li
114.792 271.569 li
115.632 270.729 li
116.472 269.829 li
117.252 269.049 li
117.972 268.27 li
118.692 267.489 li
119.352 266.829 li
120.012 266.169 li
120.852 265.329 li
121.692 264.489 li
122.532 263.709 li
123.372 262.989 li
124.212 262.27 li
124.992 261.669 li
125.832 261.129 li
126.612 260.649 li
127.332 260.289 li
127.992 260.049 li
128.652 259.93 li
129.312 259.869 li
129.972 259.93 li
130.632 260.049 li
131.292 260.289 li
132.012 260.589 li
132.792 261.009 li
133.572 261.489 li
134.352 262.029 li
135.132 262.569 li
135.852 263.169 li
136.632 263.709 li
137.352 264.31 li
138.072 264.909 li
138.132 264.909 li
138.732 265.39 li
139.392 265.869 li
140.112 266.409 li
140.832 266.949 li
141.612 267.489 li
142.452 268.029 li
143.292 268.569 li
144.132 269.109 li
144.972 269.649 li
145.812 270.189 li
146.652 270.669 li
147.432 271.089 li
148.272 271.509 li
149.052 271.93 li
149.832 272.35 li
150.672 272.709 li
151.572 273.069 li
152.532 273.489 li
153.612 273.97 li
154.812 274.449 li
156.192 274.93 li
157.572 275.47 li
158.892 275.949 li
160.092 276.369 li
161.292 276.729 li
162.272 277.029 li
162.832 277.029 li
@
55.6323 295.569 mo
55.6924 295.569 li
55.9321 295.569 li
56.5322 295.569 li
57.4922 295.569 li
58.812 295.509 li
60.312 295.509 li
61.812 295.449 li
63.312 295.449 li
64.6924 295.39 li
66.0122 295.329 li
67.1523 295.27 li
68.292 295.149 li
69.3721 295.089 li
70.4521 294.97 li
71.4121 294.85 li
72.4321 294.729 li
73.4521 294.549 li
74.5322 294.369 li
75.6724 294.189 li
76.812 293.949 li
77.9521 293.649 li
79.1523 293.35 li
80.292 293.049 li
81.4321 292.689 li
82.5122 292.27 li
83.5923 291.85 li
84.5522 291.43 li
85.4521 290.949 li
86.3521 290.47 li
87.1924 289.93 li
87.9121 289.39 li
88.6924 288.789 li
89.4121 288.069 li
90.1323 287.35 li
90.8521 286.509 li
91.5122 285.609 li
92.1724 284.649 li
92.772 283.569 li
93.3721 282.489 li
93.9121 281.289 li
94.3921 280.089 li
94.8721 278.89 li
95.292 277.569 li
95.7124 276.31 li
96.0723 274.989 li
96.3721 273.609 li
96.6123 272.47 li
96.8521 271.27 li
97.0923 270.009 li
97.332 268.689 li
97.5122 267.31 li
97.752 265.869 li
97.9321 264.43 li
98.1123 262.869 li
98.3521 261.369 li
98.5322 259.81 li
98.6523 258.249 li
98.832 256.749 li
98.9521 255.249 li
99.1323 253.749 li
99.252 252.369 li
99.3721 251.049 li
99.4321 249.729 li
99.5522 248.529 li
99.6123 247.39 li
99.7324 246.31 li
99.792 244.989 li
99.9121 243.729 li
99.9722 242.529 li
100.092 241.329 li
100.152 240.129 li
100.212 238.989 li
100.332 237.909 li
100.392 236.829 li
100.452 235.81 li
100.512 234.789 li
100.572 233.89 li
100.692 232.989 li
100.752 232.149 li
100.812 231.369 li
100.872 230.589 li
100.992 229.81 li
101.052 228.97 li
101.172 228.069 li
101.292 227.169 li
101.412 226.209 li
101.532 225.249 li
101.712 224.289 li
101.892 223.329 li
102.012 222.43 li
102.192 221.529 li
102.372 220.689 li
102.552 219.909 li
102.732 219.189 li
102.912 218.47 li
103.092 217.869 li
103.392 217.089 li
103.632 216.369 li
103.932 215.649 li
104.292 215.049 li
104.652 214.51 li
105.012 214.089 li
105.432 213.789 li
105.792 213.549 li
106.152 213.43 li
106.572 213.369 li
106.932 213.43 li
107.352 213.549 li
107.832 213.729 li
108.372 214.029 li
108.912 214.39 li
109.572 214.81 li
110.232 215.289 li
110.892 215.829 li
111.552 216.31 li
112.272 216.909 li
112.812 217.27 li
113.412 217.689 li
114.012 218.169 li
114.672 218.709 li
115.332 219.249 li
116.052 219.909 li
116.832 220.569 li
117.552 221.289 li
118.272 222.069 li
118.992 222.85 li
119.652 223.689 li
120.252 224.589 li
120.852 225.489 li
121.452 226.449 li
121.872 227.229 li
122.232 228.069 li
122.652 228.97 li
123.072 229.93 li
123.432 230.949 li
123.792 231.97 li
124.212 233.109 li
124.572 234.249 li
124.872 235.39 li
125.232 236.589 li
125.532 237.789 li
125.772 238.93 li
126.072 240.069 li
126.312 241.209 li
126.492 242.289 li
126.672 243.31 li
126.852 244.329 li
127.032 245.289 li
127.152 246.369 li
127.272 247.449 li
127.392 248.47 li
127.512 249.609 li
127.632 250.689 li
127.692 251.829 li
127.812 252.97 li
127.872 254.169 li
127.932 255.369 li
127.992 256.51 li
128.052 257.709 li
128.112 258.85 li
128.172 260.049 li
128.232 261.189 li
128.352 262.329 li
128.412 263.529 li
128.472 264.549 li
128.592 265.689 li
128.652 266.89 li
128.772 268.089 li
128.892 269.35 li
129.012 270.729 li
129.132 272.109 li
129.252 273.549 li
129.432 274.989 li
129.552 276.43 li
129.732 277.93 li
129.852 279.369 li
130.032 280.81 li
130.152 282.189 li
130.332 283.509 li
130.452 284.829 li
130.572 286.149 li
130.752 287.409 li
130.872 288.609 li
131.052 289.869 li
131.172 291.129 li
131.352 292.39 li
131.472 293.709 li
131.652 294.97 li
131.832 296.289 li
132.012 297.549 li
132.192 298.81 li
132.372 300.009 li
132.552 301.209 li
132.792 302.289 li
132.972 303.31 li
133.152 304.329 li
133.392 305.229 li
133.572 306.009 li
133.752 306.789 li
133.992 307.509 li
134.232 308.229 li
134.472 308.89 li
134.772 309.489 li
135.072 310.089 li
135.372 310.569 li
135.732 311.049 li
136.092 311.47 li
136.452 311.829 li
136.812 312.129 li
137.172 312.31 li
137.592 312.489 li
138.012 312.609 li
138.372 312.669 li
138.792 312.669 li
139.152 312.609 li
139.572 312.549 li
140.112 312.369 li
140.652 312.069 li
141.312 311.77 li
141.972 311.409 li
142.692 310.93 li
143.472 310.449 li
143.472 310.449 144.018 310.165 144.252 309.909 cv
145.008 309.082 145.092 299.369 145.092 299.369 cv
145.092 299.369 145.372 295.523 145.932 293.89 cv
146.492 292.256 146.772 294.35 146.772 294.35 cv
146.772 294.35 147.232 295.795 147.612 297.869 cv
147.992 299.943 147.821 305.232 148.452 306.449 cv
148.826 307.169 149.232 307.029 149.232 307.029 cv
150.012 306.669 li
150.912 306.31 li
151.932 305.949 li
153.012 305.529 li
154.332 305.049 li
155.712 304.629 li
157.212 304.149 li
158.652 303.669 li
159.972 303.31 li
162.072 302.709 li
162.832 302.709 li
0 0 0 .909851 cmyk
@
.75021 .679683 .670222 .90164 cmyk
DOOUQX+Times-Italic*1 [18 0 0 -18 0 0 ]msf256.867 334.561 mo(x)sh.9 lw
146.292 347.129 mo
146.292 319.949 li
@
144.492 327.009 mo
146.292 319.749 li
148.092 327.009 li
146.292 327.009 li
144.492 327.009 li
144.492 327.009 li
cp
0 0 0 1 cmyk
ef
144.492 327.009 mo
146.292 319.749 li
148.092 327.009 li
146.292 327.009 li
144.492 327.009 li
144.492 327.009 li
cp
.75021 .679683 .670222 .90164 cmyk
@
DOOUQY+Times-Roman*1 [18 0 0 -18 0 0 ]msf135.492 363.131 mo(S2a)sh208.992 317.949 mo
208.992 345.129 li
@
207.192 338.068 mo
208.992 345.328 li
210.792 338.068 li
208.992 338.068 li
207.192 338.068 li
207.192 338.068 li
cp
0 0 0 1 cmyk
ef
207.192 338.068 mo
208.992 345.328 li
210.792 338.068 li
208.992 338.068 li
207.192 338.068 li
207.192 338.068 li
cp
.75021 .679683 .670222 .90164 cmyk
@
DOOUQY+Times-Roman*1 [18 0 0 -18 0 0 ]msf198.192 363.131 mo(S2b)sh0 0 0 .4 cmyk
DOOUQX+Times-Italic*1 [11 0 0 -11 0 0 ]msf268.477 55.6074 mo(cri)sh280.695 55.6074 mo(t)shDOOUQX+Times-Italic*1 [18.9 0 0 -18.9 0 0 ]msf257.055 52.1699 mo(w)sh2 lw
257.553 295.029 mo
257.492 295.029 li
257.313 295.029 li
256.832 295.029 li
255.992 295.029 li
254.852 294.97 li
253.473 294.97 li
251.912 294.909 li
250.412 294.85 li
248.973 294.789 li
247.592 294.729 li
246.393 294.669 li
245.252 294.549 li
244.232 294.43 li
243.332 294.31 li
242.432 294.189 li
241.592 294.009 li
240.692 293.829 li
239.732 293.589 li
238.772 293.289 li
237.872 292.989 li
236.852 292.629 li
235.892 292.209 li
234.932 291.789 li
233.972 291.369 li
233.072 290.89 li
232.172 290.409 li
231.332 289.93 li
230.552 289.449 li
229.772 288.97 li
229.052 288.489 li
228.332 287.949 li
227.612 287.47 li
226.832 286.869 li
226.052 286.27 li
225.272 285.669 li
224.492 284.949 li
223.652 284.289 li
222.812 283.509 li
221.972 282.789 li
221.192 282.009 li
220.352 281.289 li
219.572 280.509 li
218.792 279.729 li
218.012 278.949 li
217.292 278.229 li
216.572 277.509 li
215.852 276.789 li
215.072 275.949 li
214.232 275.109 li
213.452 274.27 li
212.552 273.369 li
211.712 272.47 li
210.872 271.569 li
210.032 270.729 li
209.192 269.829 li
208.412 269.049 li
207.692 268.27 li
206.972 267.489 li
206.312 266.829 li
205.652 266.169 li
204.812 265.329 li
203.972 264.489 li
203.132 263.709 li
202.292 262.989 li
201.452 262.27 li
200.672 261.669 li
199.832 261.129 li
199.052 260.649 li
198.332 260.289 li
197.672 260.049 li
197.012 259.93 li
196.352 259.869 li
195.692 259.93 li
195.032 260.049 li
194.372 260.289 li
193.652 260.589 li
192.872 261.009 li
192.092 261.489 li
191.312 262.029 li
190.532 262.569 li
189.812 263.169 li
189.032 263.709 li
188.312 264.31 li
187.592 264.909 li
187.532 264.909 li
186.932 265.39 li
186.272 265.869 li
185.552 266.409 li
184.832 266.949 li
184.052 267.489 li
183.212 268.029 li
182.372 268.569 li
181.532 269.109 li
180.692 269.649 li
179.852 270.189 li
179.012 270.669 li
178.232 271.089 li
177.392 271.509 li
176.612 271.93 li
175.832 272.35 li
174.992 272.709 li
174.092 273.069 li
173.132 273.489 li
172.052 273.97 li
170.852 274.449 li
169.472 274.93 li
168.092 275.47 li
166.772 275.949 li
165.572 276.369 li
164.372 276.729 li
163.392 277.029 li
162.832 277.029 li
@
270.031 295.569 mo
269.972 295.569 li
269.732 295.569 li
269.132 295.569 li
268.172 295.569 li
266.852 295.509 li
265.352 295.509 li
263.852 295.449 li
262.352 295.449 li
260.972 295.39 li
259.652 295.329 li
258.512 295.27 li
257.372 295.149 li
256.292 295.089 li
255.212 294.97 li
254.252 294.85 li
253.232 294.729 li
252.212 294.549 li
251.132 294.369 li
249.992 294.189 li
248.852 293.949 li
247.712 293.649 li
246.512 293.35 li
245.372 293.049 li
244.232 292.689 li
243.152 292.27 li
242.072 291.85 li
241.112 291.43 li
240.212 290.949 li
239.312 290.47 li
238.472 289.93 li
237.752 289.39 li
236.972 288.789 li
236.252 288.069 li
235.532 287.35 li
234.812 286.509 li
234.152 285.609 li
233.492 284.649 li
232.892 283.569 li
232.292 282.489 li
231.752 281.289 li
231.272 280.089 li
230.792 278.89 li
230.372 277.569 li
229.952 276.31 li
229.592 274.989 li
229.292 273.609 li
229.052 272.47 li
228.812 271.27 li
228.572 270.009 li
228.332 268.689 li
228.152 267.31 li
227.912 265.869 li
227.732 264.43 li
227.552 262.869 li
227.312 261.369 li
227.132 259.81 li
227.012 258.249 li
226.832 256.749 li
226.712 255.249 li
226.532 253.749 li
226.412 252.369 li
226.292 251.049 li
226.232 249.729 li
226.112 248.529 li
226.052 247.39 li
225.932 246.31 li
225.872 244.989 li
225.752 243.729 li
225.692 242.529 li
225.572 241.329 li
225.512 240.129 li
225.452 238.989 li
225.332 237.909 li
225.272 236.829 li
225.212 235.81 li
225.152 234.789 li
225.092 233.89 li
224.972 232.989 li
224.912 232.149 li
224.852 231.369 li
224.792 230.589 li
224.672 229.81 li
224.612 228.97 li
224.492 228.069 li
224.372 227.169 li
224.252 226.209 li
224.132 225.249 li
223.952 224.289 li
223.772 223.329 li
223.652 222.43 li
223.472 221.529 li
223.292 220.689 li
223.112 219.909 li
222.932 219.189 li
222.752 218.47 li
222.572 217.869 li
222.272 217.089 li
222.032 216.369 li
221.732 215.649 li
221.372 215.049 li
221.012 214.51 li
220.652 214.089 li
220.232 213.789 li
219.872 213.549 li
219.512 213.43 li
219.092 213.369 li
218.732 213.43 li
218.312 213.549 li
217.832 213.729 li
217.292 214.029 li
216.752 214.39 li
216.092 214.81 li
215.432 215.289 li
214.772 215.829 li
214.112 216.31 li
213.392 216.909 li
212.852 217.27 li
212.252 217.689 li
211.652 218.169 li
210.992 218.709 li
210.992 218.709 210.45 220.005 210.332 222.249 cv
210.214 224.493 209.612 235.909 209.612 235.909 cv
209.612 235.909 209.367 240.537 208.832 240.569 cv
208.364 240.598 208.112 235.289 208.112 235.289 cv
208.112 235.289 207.543 226.566 207.392 225.069 cv
207.333 224.479 206.952 222.729 206.672 222.85 cv
206.521 222.915 206.012 223.689 206.012 223.689 cv
205.412 224.589 li
204.812 225.489 li
204.212 226.449 li
203.792 227.229 li
203.432 228.069 li
203.012 228.97 li
202.592 229.93 li
202.232 230.949 li
201.872 231.97 li
201.452 233.109 li
201.092 234.249 li
200.792 235.39 li
200.432 236.589 li
200.132 237.789 li
199.892 238.93 li
199.592 240.069 li
199.352 241.209 li
199.172 242.289 li
198.992 243.31 li
198.812 244.329 li
198.632 245.289 li
198.512 246.369 li
198.392 247.449 li
198.272 248.47 li
198.152 249.609 li
198.032 250.689 li
197.972 251.829 li
197.852 252.97 li
197.792 254.169 li
197.732 255.369 li
197.672 256.51 li
197.612 257.709 li
197.552 258.85 li
197.492 260.049 li
197.432 261.189 li
197.312 262.329 li
197.252 263.529 li
197.192 264.549 li
197.072 265.689 li
197.012 266.89 li
196.892 268.089 li
196.772 269.35 li
196.652 270.729 li
196.532 272.109 li
196.412 273.549 li
196.232 274.989 li
196.112 276.43 li
195.932 277.93 li
195.812 279.369 li
195.632 280.81 li
195.512 282.189 li
195.332 283.509 li
195.212 284.829 li
195.092 286.149 li
194.912 287.409 li
194.792 288.609 li
194.612 289.869 li
194.492 291.129 li
194.312 292.39 li
194.192 293.709 li
194.012 294.97 li
193.832 296.289 li
193.652 297.549 li
193.472 298.81 li
193.292 300.009 li
193.112 301.209 li
192.872 302.289 li
192.692 303.31 li
192.512 304.329 li
192.272 305.229 li
192.092 306.009 li
191.912 306.789 li
191.672 307.509 li
191.432 308.229 li
191.192 308.89 li
190.892 309.489 li
190.592 310.089 li
190.292 310.569 li
189.932 311.049 li
189.572 311.47 li
189.212 311.829 li
188.852 312.129 li
188.492 312.31 li
188.072 312.489 li
187.652 312.609 li
187.292 312.669 li
186.872 312.669 li
186.512 312.609 li
186.092 312.549 li
185.552 312.369 li
185.012 312.069 li
184.352 311.77 li
183.692 311.409 li
182.972 310.93 li
182.192 310.449 li
181.412 309.909 li
180.572 309.369 li
179.732 308.89 li
178.892 308.35 li
178.052 307.869 li
177.212 307.449 li
176.432 307.029 li
175.652 306.669 li
174.752 306.31 li
173.732 305.949 li
172.652 305.529 li
171.332 305.049 li
169.952 304.629 li
168.452 304.149 li
167.012 303.669 li
165.692 303.31 li
163.592 302.709 li
162.832 302.709 li
0 0 0 .909851 cmyk
@
1 lw
384.946 330.697 mo
445.847 213.157 li
0 0 0 .4 cmyk
@
381.106 278.098 mo
488.446 278.098 li
0 0 0 .25 cmyk
@
362.146 223.897 mo
362.207 224.018 li
362.267 224.317 li
362.507 224.917 li
362.807 225.817 li
363.227 227.138 li
363.767 228.817 li
364.486 230.978 li
365.387 233.498 li
366.347 236.498 li
367.547 239.857 li
368.807 243.578 li
370.187 247.598 li
371.687 251.798 li
373.307 256.178 li
374.927 260.678 li
376.547 265.238 li
378.227 269.678 li
379.967 274.117 li
381.587 278.438 li
383.267 282.518 li
384.887 286.478 li
386.446 290.197 li
388.007 293.678 li
389.507 296.918 li
390.946 299.857 li
392.327 302.558 li
393.707 305.018 li
394.967 307.238 li
396.287 309.158 li
397.486 310.838 li
398.687 312.218 li
399.887 313.418 li
401.026 314.377 li
402.167 315.037 li
403.247 315.518 li
404.387 315.818 li
405.467 315.818 li
406.606 315.638 li
407.687 315.277 li
408.887 314.738 li
410.026 313.897 li
411.227 312.938 li
412.427 311.798 li
413.687 310.418 li
414.946 308.918 li
416.207 307.178 li
417.467 305.377 li
418.787 303.338 li
420.106 301.178 li
421.427 298.897 li
422.807 296.498 li
424.187 293.978 li
425.627 291.338 li
427.007 288.638 li
428.446 285.877 li
429.887 282.998 li
431.327 280.178 li
432.767 277.298 li
434.207 274.418 li
435.707 271.537 li
437.146 268.718 li
438.587 265.897 li
440.026 263.197 li
441.467 260.558 li
442.847 257.978 li
444.227 255.578 li
445.606 253.238 li
446.986 251.018 li
448.366 248.978 li
449.687 247.058 li
451.007 245.317 li
452.267 243.758 li
453.587 242.378 li
454.847 241.117 li
456.106 240.098 li
457.307 239.258 li
458.566 238.598 li
459.767 238.178 li
460.906 237.938 li
462.106 237.878 li
463.307 238.058 li
464.507 238.478 li
465.707 239.078 li
466.967 239.918 li
468.227 240.998 li
469.547 242.317 li
470.927 243.878 li
472.307 245.678 li
473.747 247.718 li
475.187 250.058 li
476.747 252.638 li
478.366 255.457 li
479.986 258.518 li
481.727 261.817 li
483.467 265.357 li
485.267 269.078 li
487.127 273.037 li
488.986 277.117 li
490.906 281.377 li
492.767 285.638 li
494.627 289.957 li
496.427 294.277 li
498.227 298.478 li
499.906 302.558 li
501.467 306.338 li
502.906 309.938 li
504.227 313.178 li
505.366 315.998 li
506.327 318.457 li
507.106 320.498 li
507.767 322.178 li
508.247 323.377 li
508.606 324.277 li
508.786 324.818 li
508.906 325.117 li
508.967 325.238 li
0 0 0 .4 cmyk
@
1.8 lw
396.072 112.071 mo
449.652 112.071 li
.75021 .679683 .670222 .90164 cmyk
@
396.072 308.049 mo
396.252 308.049 li
396.552 308.049 li
397.212 308.049 li
398.172 308.049 li
399.492 308.049 li
401.172 308.049 li
403.212 308.049 li
405.552 308.049 li
408.132 308.049 li
410.893 308.049 li
413.712 308.049 li
416.592 308.049 li
419.473 308.109 li
422.292 308.109 li
424.992 308.109 li
427.632 308.109 li
430.092 308.109 li
432.492 308.109 li
434.712 308.109 li
436.872 308.109 li
438.912 308.169 li
440.893 308.169 li
442.752 308.169 li
444.612 308.169 li
446.412 308.169 li
448.212 308.229 li
450.012 308.229 li
451.932 308.229 li
453.912 308.289 li
455.832 308.289 li
457.813 308.289 li
459.853 308.289 li
461.832 308.289 li
463.872 308.289 li
465.912 308.289 li
467.952 308.229 li
469.992 308.229 li
472.032 308.169 li
474.012 308.049 li
475.992 307.989 li
477.853 307.869 li
479.712 307.689 li
481.452 307.509 li
483.132 307.329 li
484.752 307.149 li
486.252 306.909 li
487.632 306.609 li
488.893 306.31 li
490.092 306.009 li
491.172 305.649 li
492.192 305.289 li
493.032 304.869 li
493.872 304.449 li
494.592 303.909 li
495.252 303.369 li
495.792 302.77 li
496.272 302.109 li
496.692 301.329 li
496.932 300.549 li
497.172 299.709 li
497.292 298.81 li
497.353 297.85 li
497.292 296.89 li
497.172 295.81 li
496.992 294.729 li
496.752 293.589 li
496.452 292.39 li
496.092 291.249 li
495.672 290.049 li
495.192 288.789 li
494.712 287.589 li
494.232 286.329 li
493.692 285.129 li
493.152 283.869 li
492.612 282.669 li
492.072 281.409 li
491.532 280.209 li
481.932 278.89 li
479.393 277.629 li
480.792 276.31 li
489.192 274.93 li
488.532 273.549 li
487.872 272.169 li
487.152 270.729 li
486.372 269.289 li
485.592 267.789 li
484.692 266.35 li
483.853 264.909 li
482.893 263.409 li
481.932 262.029 li
480.912 260.649 li
479.832 259.27 li
478.692 258.009 li
477.552 256.749 li
476.412 255.609 li
475.152 254.529 li
473.952 253.51 li
472.632 252.549 li
471.313 251.709 li
469.932 250.869 li
468.492 250.149 li
467.172 249.549 li
465.792 249.01 li
464.412 248.47 li
462.912 248.049 li
461.353 247.569 li
459.732 247.209 li
458.052 246.789 li
456.252 246.489 li
454.452 246.189 li
452.532 245.89 li
450.612 245.649 li
448.572 245.47 li
446.532 245.289 li
444.492 245.109 li
442.393 244.989 li
440.292 244.93 li
438.192 244.81 li
436.032 244.749 li
433.992 244.749 li
431.893 244.749 li
429.853 244.749 li
427.813 244.749 li
425.832 244.81 li
423.912 244.81 li
421.992 244.869 li
420.072 244.93 li
418.212 244.989 li
416.412 245.049 li
414.433 245.109 li
412.452 245.169 li
410.532 245.229 li
408.552 245.35 li
406.632 245.409 li
404.652 245.529 li
402.672 245.649 li
400.752 245.829 li
398.832 246.01 li
396.912 246.189 li
395.052 246.43 li
393.192 246.669 li
391.393 246.97 li
389.712 247.329 li
388.092 247.689 li
386.532 248.049 li
385.092 248.529 li
383.712 248.949 li
382.452 249.489 li
381.313 250.029 li
380.292 250.569 li
379.332 251.169 li
378.492 251.829 li
377.772 252.549 li
377.172 253.27 li
376.632 254.049 li
376.152 255.01 li
375.792 255.97 li
375.612 257.049 li
375.492 258.249 li
375.552 259.569 li
375.732 261.009 li
376.032 262.629 li
376.452 264.43 li
377.052 266.35 li
377.712 268.449 li
378.492 270.729 li
379.452 273.129 li
379.452 273.129 380.207 274.668 381.412 275.649 cv
382.617 276.631 394.492 277.332 394.492 278.169 cv
394.492 279.006 384.303 280.188 383.512 280.689 cv
382.721 281.191 383.592 283.089 383.592 283.089 cv
384.552 285.249 li
385.393 287.109 li
386.112 288.609 li
386.592 289.749 li
386.952 290.529 li
387.132 290.949 li
387.252 291.129 li
@
.9 lw
524.551 277.631 mo
497.371 277.631 li
@
500.432 275.832 mo
493.172 277.631 li
500.432 279.432 li
500.432 277.631 li
500.432 275.832 li
500.432 275.832 li
cp
0 0 0 1 cmyk
ef
500.432 275.832 mo
493.172 277.631 li
500.432 279.432 li
500.432 277.631 li
500.432 275.832 li
500.432 275.832 li
cp
.75021 .679683 .670222 .90164 cmyk
@
DOOUQY+Times-Roman*1 [18 0 0 -18 0 0 ]msf494.192 272.631 mo(S2b)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DOOUQY+Times-Roman*1 uf/DOOUQY+Times-Roman uf/Times-Roman uf/DOOUQX+Times-Italic*1 uf/DOOUQX+Times-Italic uf/Times-Italic ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (cytryn) ()%%Title: (reentry.eps)%%CreationDate: 2016-07-07 12:56 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&G@)gk'/4aI!8dfVO?AB$Jn.j)&JGdHjbSEhm-]/uGX))mlCQ?Y9HriZoA6gg7@<N-:gIA+X1J6.dWdt@%n7Y;nNT$P<q(,l%mnIe)D^(\?q#-2gPrLX#M'ptu#3s2'/C_q_dqf6=(ZLt#B$j8:EGth.Nb0*U\0k%Ljmd:@9lo1^n'9"$gA*u[*H+Rj%`a'G9>aNn%MgD3X*mIO3S&)QnNEqOY4!R]AOaeIt3l=7EWdR%&9SNYSn*7%7;6jIH%)pq&qX2S?*#iPL+ih&bo>.Y\2ZN3&;U-egddU@Pj'gh?%d<O'ciB)=42!PP5IIR@J>jNP\UZ*^:Utb\A[5aX!8>3k=BF*_Ked2e=S<o55P:Y%R^Su<5PnEL%Q:EWAj&q[@-+q'l/+I+'SOoC*%?p&`Aab,_qPOFP(Kc87@?B.Bl:C-KL+F$b)Urn\l4W/ET,$q)KbBa?a^\h09JS's9@pCM/AqZrrX`Kq(a0T$nS'33N/T(1!^BW]T%3OE>1_.Y`uIM.`I.)7B+Zg5I-&9PDbFFueLajkbe9"1Pr/4p6jA]_!Nj1[LkTTS-8%6FP?(B;EhT;9=u8,<d0#Q_u`3<00D/f153%C3G&adSt*9gHM6cURUco*c[-O\Teb6(k(s]?HAk?neo`rAOmn*_Xg/rm?^a88`S/31o0bo&AipJ(AD&PHjiJ)H$nk">oN@C"]+aH%%/I\;LhE[dZc`;YXD$=oR5gAMN\I\bWjTaMn^D:%_9F>ob#)dO0]Orq[+d?L-maNgUIo1M6%'+(EC9ZE>P^Jb4Cli(6%I9\$9ke!%pahbsVh+nu"T_4!!D3NHPh'U=2L-g<Jm,,fr(<fY<[n9\;Q3hoBeu643nZ(6aeF:SFuB`9Z<=+0hr#/_Q-3")>_Y2\ALK!oTh_]o%V6sJV"`N"-:gU2bGK>T^Gfb2$O/*KH<6>B\j+gF/"`o8kW!.6?AkL3R7dp_,?q0Vlo2Zu"hM!u+-iAQ6_'cTXi'^b')8R]E)ud]Q%QkT*`TLo!8=thW)KK?LZ4B'f97S[>bTLb^YTB&^%F#&%sFttu(4,dEI,GbV?#IRrgn-L\/'dU+4ARrd<0@YUL.4\)b6JdFl_'f/4%fobr_:GQs8!hW9sjp.Mh'a^0;\<?ib7g0-*j9kl7CIZ<6TFS@8g_@8[R?Q%9aN:q_^SGFP]grUo+4Pkp.@:FJK=At(8L_jo5+rb.%DjVVt$$d=NTao;lj&[p=ffK=WU^)M-$4\SrU0nq!S6u]?"_D$hCJ*M[7Rs+HqB^*5OXhrVb`.Q%C+6i[f#dfbSGXTV-TdN"1Kec#%)q%%^s!.<>m<8&\a04i1D.b;:dVtgd[t=>mrk[>-%OjJF>@du\g,d$*'M-*q)Dm\`.cXP*-1-jS3KD)Yi%Ld]SG\H28W!/-quc'b%s0TQ%T?!QtOsesjnh6O\^U:i;?RA-hB/3*:)>RXE84p8(jBnlSIVXGT5EEQW+]#J[jBo;eIVXGT5?@_QkW,^bI$/Uu^Qi0e0:EuT%-mt1c8d7F-B$urRLA\/Rd`#BAahr$\?)uqI8ij$N9(M3R@T/[??`PG%j9bZhK3D(RhFs\_EgsQKe5#&8d([QHVmJY01MD>8_`(>.%.oh29n;ZJh-Y969YX3\7;<jsXb"+OYPd*gN2c1lDE*3NeML5Xo;"[B81+@p^f&UjHd,%9sXm"Y?C-aN:BnCe$q52Z],;6(1/bqUK%\blEgOi_[;hQFq@:rgkYa^9Tt`\"De%:!4;hH$3R7:im"-@lr8=d8q5<%+XFf<dFj*Z3X5rao^mWfa\gZ)+>iTc637QTVmEZ>,<t%Hi.JO#o;--"FJDN[!nM4;]UQQ3aNs#KTU=)QiW\pDkptB9J*?,aoB_sc0A>-b$&LU.FHKC>Y>rXJc]9_hF[[GW@arL=Dos8"/[>S%Ls%Ak$+"sI[PBq^?No&_at[JU5J]0"-,6#![A)(M68K=u7+TH8?\4?CDom=[f-`F1D,g@4a2h<BO]R&fO`pO5NFCOeaZ,tu<S_t&%KS3AMpF"E`NCM@`&kp8-i&V"Y(]VP&/'F<K;FX157dXY7Y<\>b6[Fu:LQ&@0?oXj(#g^t1C_Y.CW/ZaY6<./5peRY@KK:M3bE]H>%l/9DB0Wi461][&#q2KKQ?4R*QVuLW.R+r=B<ALQ#G6/9r6S6D)Neb?lA!F6]:TD(+W5(k!T<tP).\T.K0=V70*T_J7[tMUGTg`'"%KPMI`],2kDZkaN#dhb1Ws1t-j.?'>c73"qQ9-ot7L6Va;ATWUkP>Q!M=Q]+<"K0&*kLCG^<*X(<Th+3*J[sPL7A%X7%-nOj.l^1F%*IIrk,7^5?0Y*RuC;K8q'BBFq*1d`Zi)\;pl64Kp3uX(!gZ05Y(#124"b5JK5YZT#TT%T!ksiEQf9P5#Y/(A[Bcfl@L,UVSQ$Y$n%U^"-.r0^Q`Fd54M5ZO$)aP9`i`"PfiHX,]A<AWl6H(2GQmh)MWGNF6*;ksT=%X+u&2o-ls2^`)CmL?jreDL>AH-Ri8aa?P>--A4.%4eg.fd!ActOl2m%S[$+%6'9MF'mFYeA8UQHE9j"qF1rhsSqPfRYO#DuSqSYnO"`F?O'S@Wi`L=96&!D3A3[",R8kB'b['+q.Q])d%-`+o*X@@nGH0.]YBJh?ZD'Th[hMcA$=NRU_+Suq(X(flc(Xsjb12^q^CH/K(WmO<">FqU_mtZK!e[%_fTEgmO<+VFB8A>:32/6kG%\&*XUrN4-VlMec,1Iue->/=fWhH:c@AM.1ap56"C<E>sMWmI8l?jQ"`k+?sf)RipL\-n7#j5;[m:M;m+.61De/nD'1ROW=!r1(h5%l40t2E6pm09:c]/O0"d$="@BeTS&,^WUOOUE\hU8dg`9sXTe:15psO2,ju9b<7+BqI&=`2:cs^F&q-%l2elp&[923;AAtp$d;N^n%A!"B=$EPqik[e02G=!NfSOB6ann?B".8V7iW+["tAY[7>dsM>)MN"WU:RREsN,,ZmN6i?%0GJu8@1AQt<`m8B)SKX;FH8qf6Bo\q%-Y:H19"5EA+[sgY3#7u]iD??oU2_H=U'64Y:qap_W?QI7P_W!!>Lg)_AQPN`b4Mjdpk(J*:8@85s&Ng'_O9rk)1$/-dGYii\jk8.%_MOM`L*f8Q:i%2AABC,pb"OL]lErt1-<dJTD49&V?c*R3V<fU)(/SZU=`7!5'g9[c)JMX&*YcbpkTpqe29qV`WO>)WX!o_L'UeGi%:#f%uYp/)p=`$n@#6a7Q?(tP!?3b3!^G70?-rD:,LDCRuP-QjaH4Ng!Ah..ed:*Dfd&\#RZa@D89Pf'cGD"_%;e-;>dSr1,T@?o+%E+$?p7q=]peOG`MBrqm(>(qE(ksK_lUXJWj;,k_<RtoG'ZL@E*B9Acgne0.G(#7pbg'D-#'ktUb-*$N+Jf_%QnHid`$4N1IJm)C-%rHM)2'f$en[7`hjA8>sMh'MX+dWA6<U*r-b[,UVRZ5U-ioi13Dp(>t2TREYob5@M_1!EYSXO/DiUC^YCa7$3lqJ^IH^6QarE6p^I%c872MnSnClb1,mijBA(u-_;]HOC`n'j-_kIN';uj2k+8?Us<<kS;oADr]l]Eacn5HW0f%.`;X.(lnHsbDa"i&Ze8a=(R]?@RYSFR%hrp.O*S_R^kmaHFr;1mjrkiib3op5LDS2l(0&efQN(@7iWE2O]eH'B55jAcV3Wle8#WM3\`h`$ie/_J1a(jEb)9SIKSWg'pXf@/E%X*+<1Nt5)sqIkDRaRg%VRH[D0L+nObfRn6fVE5k0`>LJr8-"4_-\L:NmYq"u+bGl1h%<J!IASrpr0@O/T/1(+Fo!:A,VWa;C3T3q%Gh*\gR:;FAT+3s3:QP?c17V.T#G\h18br6f*&6>lj($D%4lu-7lG&7UWPM,Yn)'[MDa&gr8qdb$0),?$(T/t/rqPpo,Q?.2G/!KJ%KO'4:B8Bkjhg-B)dGcbgj("+8>5TGfL>r)(qaDVN%YoZCb^;J9oL,QI(8E9&S,B2,MucF<I5E3=r5O4?+sRZZ7[5'k:&IY2:*0*6%IglBD<1p3EDlMXNV%-YUl<G7fOlDq+NZ8#8c$>]N!Lg6O*iN^`K)-AZ!C?3YC\t3fR>U80nIJTAp,S^?&W1h#,))akl?eY$7TCI6%Q%8"Q4?oRfogl3,6n4ak9'90#b.Q%lNE]<@Q>YiN'_Pn2VUGQ5]hK:%]@2rDh^+Calh'\$+Bt<$BFj\p++87,q=h*LT:pZm*f45t%YCk^'gf1P28Fj9=1S'#R3U[h8,[N9o9N=Tr0fVee]PYe-8`uH4`6^p]?&a*(gcU`(&Ih^.oA3#Zn`KR6>dAS5q4r4e;YqiV)-orQ%,C&3GS4lVh>ZtO^U52&*c4KqF0n[k8g6Ar$e5h?Y^_IEW(-@%MnAE.T38!bWilhUt@=ReGcCd1GA"P,\,)uKk*hl.,eD^lb.r%83%A^8'0O,hi0AWmNH5HoLJ>W0iK-Kp/5jABGD9LTrH3aSCNaBJjcp&BlD&(/QJ=K">MS#Cc6qn"p2[MeX;2tJ9qB,cEr!au;Cj`o&t%:m,O"%-ORf/rf%XUXAtk'.ijt>nMVmI&&s=kM9L$UkZNJq188,H9R^Qn]kMTZ>HNulq!k;'V^ra:Z\eOgD07,/:D<;PGcsY?fH#e%TpeuRTFL8$mmn,TVD![p;+L3:kA&2b!TLd/*<[UhD=*aL7Q[qPDeY$ki`'cYr7&2GSiO9(h#kDAa]jqjdnfGWGW\rpeJG3ebE)0l%W;gN&EIhI6SW=&,(422p(jd`)ZTkT/<84th<;7iM?LAruN[5l;*)/IJ.9Cj?A]l23VF6($[t[].P7+%J]qK]L)p)RHG-(d%&/jm\%7)VJ`)t!EI!hR']ld*jE`,3d`CUiN7g0bQ75#(l_0diD\A9U-E6N<8f&Vur$_LY)`n%"*4$JCbkD;id-'lZjf)^b^g[=KC=L8SO8%%A'6GYg?ki4-ajE)p>NnlG&==3(llZ)gCupZ!.`[1-u$pro)+q_2lSA+.9I\\*/ftR-VRIidaWMlTOu%q]qA65BK#FP:l_%)uV`c%?[e\=IsVjc;t&0Clg:IF%p-9t"-O*"DqOZ+&Q=-KInb[[("hjp4Znc'Z\QU"fu)kMm,88#p@&]Ep@+5pp@(t0p@-L[p@'hep@/&t%Y/1.k>_E'_\H_N@2,`:lJ#R'.L@F[)r28!>-hOc%+3n14`eT1i@"=PMaFAGf=7.G8F?Lem@R=0h7UibP,<H7d(S.7UZsO>cHI6ju%=C^up(W6#tSqX,WMk9++U^fcVD&GXSM411UB47+9_C?H-a-%X@ImPskO8KhPA9_e8\3*e<QB7X4Zl.sa_AW,+^rGZ"oUGc-3,P7H%qk@f`Si?GjpMbeCA"D:H)Kb-uE>h0BLoM4:WUp-a',tVWWn$td%/Z2I,'A,`F+b[2QGU]/2^mrf)@VS%mCt^1F:[cUlPWg+oi;%W%%-L5gGWrO62aTTn<0Kg-ec#?Z'KV&%MCnlb*;@1c^)P-A25C3=]Xe1bH-Nme)a]R#EH['aiB0?9p4el_9h963ODm)W6)QdYh&sGl%WrCn_d;sfJhWdr15K7B(?>i#uNPGKt9(q`4@;ad"i<XZLg1"sInR(/iBInY[;#^L!9;h6.s2!Lc5McUniLopp4"XM$3ao20cHp0S%>qPJo9mN!3>9#!]gWa8Xs4<H+o#Wl;ZAu9eHdJC5\s\[cn\:W[OCmMj+d7&;eY`[*4Dq$meGPA)cc_QmA"*dIa"ntP1r]2,\RWV'%e/$s;".2<MHIq2fe._AS8cLgF7m-(O*l>BGlh$;n[-foZCQ;o:03]OR?l)gGLV[@&n\14aHUPt;T$P4Bco[dij"CS`X=@!kE@OS1%M;Ic0U,2mtM>T\$.8S4XK%'hAbLg02D`3ooh9N5\l5@'qiK`8=0_+kV+FsIO"kV#(,#YWT;j`FAaHI'RM)ZGe.56/bO)":F:bgk_%M:*(qN(V2"WFSoRVNCIoUfhosOnr`66Src-gJq=+*X1_,JF":Ma)H5;W[M>1f=(8%#V"qMf\R.uNJ-8QA/2*N,<-F9TAD(,^;9iR%c-<<F,GhW+"J;q?2"(Si2n*oU`Duu*DGfFRT?eitT_9VhWKq0pB/H0$&CU<%UCdq2hW`sJU<?DI@!5ceC3#>We]DgBosdiFq$(8f%\(VqJ3o.Vk0`.t)Sq>F]=#Kna:Mt*W1]!J_5"+kYGbV9InEEp=&*Da`Gei<d3u[b<k#=%^XL4LSbBQQ6Y@c?>Z8j))XNmWjmi/Lt%]/0C@9QW<5cO@3B_h#+1Q%eO"#''2^+[88cP>k^`4Rs9NZa#AkMd%@jSTH2lr6rLVI+Zh#6cGnM:_`fBlg?T]``]I4IKABp\=t6l%M?jiE.<*[Z@8M#=iSrqh(iP./^*Qogq't8]a0M*E]EYjla[I,EOCtY<$,+ET9aM\'*O2o%jj*(ncLdQ[#rUZl&72:QlUslQ!3e#g%),I3:4XfWUV7tSh6jt_i2P0/jC"O?.D:0;Y_hJ&Noo@$1?2"guQjAbNfE'/"]d^VV]a.JOE1,R2\8E0tI9EH?=#@%W)%*N=:li.3%S>;t@,W+U.[HlaW$Sr"e:dRb`,YLYia@f68,2dJH04C#OI*!6/S@<fam1oo%Z8E1/l^l;$m[E:h1os5*f>&T\Q\?3#b8FOp.&o@q%1JgY4PC4<:&V_RV6O-(CA\-`?2N7B%M\q4<R>_:9RtoVVqO.EGk+,*D)\ilRXp6iK]5F,U(tCQ)<J@>$:*rkd!1.lK+[3bKc.Q4]%<lo0p^8@\T?Ki_R?^I]H"sTpK6`BnVq#,UjcCCn_)QGC)o[gU2?of<UN&lkPLp8.1g9.O"fX6McNo((/d7(aoZoaY'G:*#`8KGpW%/^.u(L/PZC*[1)9"-.4S<2cdZkq:aT/'gFs>$L:4`tE4VNl(in`HO_,50)+OA-B09KmCNZK4!gWNH*U=`'7PYqoa;%PE51937;]+%D!c*Fi>9QNdalml4)!#RK:.StEB\)opJ;TAC*:K[fu8!q'=:14U\D#\22OA%GGpCQUi&\kg&Mpjm"-@2p(Kk<>Z=a\KT!DUR;c#m%-57oPlM.)]rMX"$<_)PO/i@A[[HUPX&UF<pk>Msa>ZcZcfuNQV=hHth8FPT$h0,Daiuj+K&.W<1(=P7;R@k7T:fWBg0@]o4&snP&%#tkG62*]k-02t`E?()+<"t$GnYr5^n..sF9I`HMAX+[N&L4JO<]'%po>d7T,^41XcO?p#.GkS+-&=SEaco[pV[QT8-+HrJQpiYA=%06WJjf9md:kW*m9It$o-o)?Tia?VF3ME.)E4&cH\R)-juFTR&8)D]g)72C0(E0fj_,(JjYAM)Vl)am"7U76RLpU@UU+am++TZcPI%9uO=L/p)d!9!f.Pe7oSK:^L>[>k&6\n[bunEbfOjXdPjSiQN]I*LTK>XC\MJY;6lX[N+Vd0O7Rj1@4tJ6#Kr*2k&HO'\/T\L9sOr%S:45Ljia>-VQin/;,[1>foQNneLcVlSa!efbXsQ:[mT[=7?+_uaP?lq5.4H\i^ZKpC034k,aaVYlO5d]'-1Z*jpM\nij7*h87`a?%3[$=[USql_;%O=\UHR4ni$4Z<Q?/!44WD3C=.%]8*EVINQa+=D?FSh-KZ2/*4]_aefC"SeMTp!6[5<J0V5RAcJmuB]OccF)A!;GZ%'Ye$d0sqn'<jcgE%dp"'S+B%L+@/C8)S-AeBR80IBO>QO24,L<B4SodTc1ke92fhh_sgoRWu)i4;gRO7C2R(i!L#rb-CQ*on[Js8%NYDgs91kMeYbJ4q)+[s_Wm5bM0C]bHm_NE^(A3mH>?jYB[oi+a$@NL&=Qi.%o.][(IKHHF]Ik9HAWdc?TEhSgo#\@_Ui=ps==/&,%M%i-d!ds#Aqj0<//\"cpiIX4dE&0"EhQumY`qIqKVt/-AnnKTq3Oh\0qEg@0n3uePO$%ku//''#JpfQ9Mr_W&^*m>=a+\+@rMo_r%M5d_#M0hu3cJS2/j6a>Vj2sd\WUP("PY1O^jKs2>3B?Y9/#AN73&=8ep?!H@M9<7D7D2ZsVquBr^tiQOg\lE*;JnV3E8b8DSFi(6%QZ=b&:IAe8pgVJ8'b#L4bp@K*R.Wm4#H6kR4mn6PF4\.iksNE+@o%B93G8Td>i\ZUkp[Z*SsiKu#as1PlMGQcp/W-1mfg/'Q*QCX%=I,c\5o2+fFE2PPG`nW[1QDA1G]!AG\>r6JO)3p_f".h$'G#M'C?Z<f[;mgGL&,S^XB(<S#iNFL$TrlDV<1a?p80dIPNWV%,d)dl%P+[q31UYmVs#U,dYl+QWHTp&MQ!W,-5&*/8Qe,3)\AsXG.T9,RIeJ5a#PB6d]2d7&qCK=M5$sb&>#2m[F%<ERdnX7ocC27A^gp`[%\C8scV!^21FPdn!VOV!Kn+;3Y:2KI2Yb>"F$ZnJdNLn/6jpEO4)=6^uWofj!=q>G/%A0)4\lJ'oG1'Hc1UJb]F(K,GpD&T];qq;0%lXJ8Adl4_LrHN,A'_Of(XiCoqO1Oid;ZK&^lD3K906VOKi"brt_`mK&iF99r?dk>5_B6[#:q*.;<K03h%Sk1Ze7iC)J4d$B29SaY%_t1!uTi6olUt^q%)XuWeFB\",7_:+c[*raZ7Bl'aOVg<j`ZDnj>kb^Ze(o+21@%o.^N'6LYjh9oegXhH<qD&@EA-m_mTeX@HfgkG%=ta^ZV/^'-e#h>Gci:u>?(6"@O3Z.a=NiY1]dnOOSm0Fga%4\$`=?u.?3'G*/R1ggqG'nckm?e-j/9J*VFrMOdoJ#5kVRG<r44,D%<hI-A\sY`'ZH]:^d^7K*`m</p:Od4gVR16?:/AdU^p;G,YBIHidHOSc^!;I5X]%%mWnW`io1<;Jc:g=5DAW!t4$@q.*1*`f/L*s'%gO7/1caC;H^]*Hj1T$`"27]u'VmgfG51DV^32Z$8KY<i\LDHEr6?fX-Dai,MmgIsUAZ&(2BbtFV(3=n!YV5/u+nJITc9Hb@<;+5,%S\E>-QWg;#?1cs%?UOr+<h7gop>sW7H)Kh\+mGsc/Xpm?etr3nQEllnVW#-OA"0:CcIT)"h_YLNIfGX_:*U.9k'VM/oK*"iUJ;=F%O5DqK\+%q.h!%luCu@,Np@Knm46:\X_1o\Q\2=.DhM+d8L/'m\6m.q<ht)#kL:TO</s*s5EL(]M#Zd])nG8$Mo3Kf/b:Ik=")mB]%ZI_&qL/&W%0dA-[j^RIdi"t[c2E,e/%148he(eM>5L[VhaWK0USI1)*AlJ$Fj%"1HI[VUq:D_A0])^cqCgcR;G'Sa%jVOl%<:#W_%,CX(Y]X3pVD;@+BO"j.2/>%-6qs;^OA7e]MS*)i]Mf#duZi[Y6cX5D*5cGWTBllkEFDZecnccDRC4&bj<b>AnP1&MHNMK]+XF=Y;%bAd9t[/&HH!T2l3IJ)$_FLHC6FM'ao00N`NRZU-]:*=.HSnal<k3'>lV'k^J\b'1OZnujta=3XDO.&>8amQ*CBuG9rRL7hnSuR'o%df&*0H2mljX:uf./;<P:Ud<,^m7+Hg:>J%%Q_"t.^CERsaLq03lLWW7?&]DOR?Tr6qA,q:Dc-B01QHm?)=u;-b=1]r';OF76gQ,s%K^mgpmInks64Zd_3tM8*<]"*gJsc=P<h!rsMrnrmZS.r_^Q,`r9E"UOrO\`kXC,'Y8I+WUiUAT>,S5keQLgrJo?5Q@PVS.Y^AU4f%^$Jcn9BU6(@+`6_HdbT$LnXBl;#'NDgsO:9PL0:sebCJY8EI1;SR7b1+a*IPXK#lH9@Z_e/:?E?4jFkG>ht%pN:b89s2Gk&$I.Pa%"_aQ??gOSJA>+d^1a/IdKCK`rc1N7J:[=E/c&?h.3r1PNapoVtn,"$\5M]oU#MfrSn@#>fh-oqt;qg5T%k_=sZEl?a\RBqk!:kX;%9pD4:cIJ7NXDt-\NT4miTkE/_Br>1Cf9g-ICorp_\*+N_`?Sfp:%NdZY)1`19rE,@d^mnR?#$@0$Fj"cNT4n4NU<@fr)r9k51B]0%L$gd;]gIGHo'hP%Zl]QiCRmrgL::e0h\Q\$#&KcrGFE3QX?57<IB\H$4an<b89_<%'PWb%GN`4Qg9KnLcK94r?U%UCO]Zc6o#RpJ%Gb^!g4au3lNrk&9je>;s^tn$hnj8kkql]4TDi9@`Dc(TAr4qKi7;:WXnl+$>k,d7IA;uWo)Z;oX(b(HBB*A+Z[kc$S7i3oeACV]-%5JKN=5)m],"dUq$aS);qoL^K8jt?dl4RPCuj\^-&9%[%-T*5$M7]R-d^;PDV'gI(^WuZl<bZl2R)UD?9$^Z=mTTVR/d)]NW?hI>>%Lb``9[_YFW$,c[<WlWXhD&6m,luCJB`ufg?3^lCWfss.r8gN:/)AE0O4!GU4m03>(!/&?TX::"Ob\U*SZU&:m@KtSt./k@Y1c9:d%O>i;tj:$/.ECK3S-M&a,-V_e[!Q=I9nOMc9@_%)8rIi&Dc)K1g78IKB+o2b=T3gY-1Y`Am"3^Z>eZVKQ5Dk@Z!R%@F3sT<j\3Y<I%/G=Mdk@#g`ddW-_$c]8&f@eho/.[">\2,&YAI>b)jL\>,PQCQ;)6a\BTh/$13\lkil>q5;GG*7<K_,h6U=F"k<k7M=[&u;1QijRA%&s.f&'A-<WcY*)[\M,'ugS=9.6lTDJ?rmL@qS[u%>O9Lojj\sS]p%UL;cC4DRG@DB1T1Cd%p9?p'g(ee_lQfiVW%GW."GrA:.AI8%M4RGORF!.3WBODC3XVX"6QMc)i^Gu&Qdt>3b1E881p@N2>6Q_L\_s4tQbHF]-;%]e`29e[r5iec$V`(^:9hXt]DU<kmlF[t+1M-m%DV'#GeD@Z:b@ib*530-27cnC3't,Z[e)R>A'L$%WLlL%641V\?b#pXBI#]EVMrVtY=Rl>Bs210EZcD3lN0]&B;OH^3-lQIl.l/n2%$$uJLZDFsH8P^AB;NoEX()`=BbXejS^TOK77^hA\@XZ!Ho+e+"KtWNOht>Y)$g,Jh%Oo#$_^i.b\.In$J"PIr6TW`jXN0dA"`6[h%O=>A?f2&0`rOS1`kC3@TPuS+t-Ekm#J%&@!0eSOE7:T)=LZ>n/1ND3;/^?",8V:!O*lR]8G"meW.GBrK"L_"Y@JJ8</#HBQ)mE>B%.n[k9BE46/GmDJX$+/i:m%[uB?@-bq[^iKd0P]T_m)k@ns"Z6u/>4I>ba_g4j]TE<J.4+'\V6&j[82@5cDi!?pVjUG1P3SNnl#Wf%0\J*3QH<"C1COC?H#Y6-<5?aDN3_P;0QGh?3mA4TX=Jrt=]FXZSQJW7-V'W*M-K.1ns71KjB&^&4'7n&f7AWQis6@S\togF7Qr@]%#ZARKm"aY)@Sj*=!1I)clG&?;6ibU3!mBm+QLcWf/l,c'guCMqb01tY38$)'-$e1pa1k;4\P45I]eqN@#";1j:jf?dnm=oR41Ea\%MkBd_ap(s@D/i4V#O,\'=NNFN25+6%4.%U9E:.u=n[m/ZSZPQ*G`02<OP&5!OIWsn58nnES`Z3S:(@[9:.hc!PO,P?I`JKb:X8(O%JkMLjA1_Krap,;eJpHDRQkcN+A2tB\XYQU1\Q^!n_(ek=SZn=V8Lt#^$a?ua#@!gO'Nj%(&9MaT2&%B9bUW@nkeAXW#d2:N?BdW.%MUEiepUCg4J\Z3-"$<kBA3AFU;Q_9RV=N\8cNXQd0")H=b[#*o^RQ-di!O_#]C]g]O78JNXO0Aneh=P(&7De(VOoCn]bLggj90Nc%SNO>!@%<10MG6ZRFV_865UX5b+4A?<HCN>e-lCA/DkL5r>eAX4p:F)=A42+&5+_i8Hd$<OoVncnHPJBW\3Vdug'[.T+a?7^m(,$a%N8St@G=.R2E>>[G'?g!WCe(["/isu!-B?h`HO&P2SkX(qKI/A$:0Unnn#<a8@q5?K_PNWuiI%kY4X)6u[)<8H2g)t;9`_l":3eD!%TaSaGC<Z+ma5W'(8r.`%E=#6@quhmHEA>/r*X\B5[+c<ERYc_$m>VQO[-<qI[!G:M?Jh.CToVZr4DmoUTJ:nD8Z@YJK^5a_p\q9@%79aZuhl]Mt%(6Q!cMA7BFu*d7\=L(idFfZnc>FL;LQF'[`:E,f!K%27!sNJ>60jO@c".Sh[ZlQQM\P)sf\k8ePiID0cdfq(]cuk/%800@\-'?_oj)2siC<T)G[jSI^B<S8='tk]fmJ=OIX,NJo^5@FB/dDu4'ZRBu;aG<#d<PR.EIkp#Z'GN8-h!)_=RR5VOkb2MJ/__@%l=X\/#2G9^[L55W]O+mW=-3(M8)o:RCODdb3A<.H(FjI2,r\5O\PaMdH(gs8TZ5Qk\WkJKM*($EZ2581>"1,f^UANnZpOB$<Opbq%V0m44$75A5[,[_sg@IX!@6.Vjr7]q&j+ZD(*]<FRm%&U;PY,EHNqDgKaU9i,Un+D?2[mn*UN*umXi@1>V';G`SA'Q[i#kn.Q#mUu%TuL>S8/IFAC+AIY<Nr=-HAIQH1TFVgnq5,6DKgDa[K8?m>?\2"h<BkcZJMC4_"XD.Q[pm19pE#N4^0\J-X/@'maO]tZh%EXeb<9;%?[=5!]%L>bLTdfhH.tYq5GkLc2s&FDB,@I)d+E/gP5u&I\ZmMdSIF^`&j+u3gL0-_/4>G;S?[(J<A4L'ABfVLDGZ'tct,*OE+IW+%U^7IJ.GU^`qJMVWeP=g7rVUdIO`=*&//)f'7aQGYRu*h;#@\T;7n3ui'16CS6&.Gj7UkTJ,Np\Q"db7CMqCMGWR6<5`m@k1.S%j"%;VudTFS6;g>.!460m&_PiWqTgBYc!)kj0PXLkk9l0m*-^+B!Ft0m&/0CP\XIX`/'rd*]I>0nKo(8r"6E]gK)Jf\=>Bg:$R'[uLSP%r)nJ>-C3MHJE5e$IF&G7LmQO`9T%HHWg<R@J/aPG=-d.qVi,,6afWna/p86tc.p1X(hKJ#'pT<^__-SX+thfL5NB(a/@q8FJc9+#%3Tkj?EMrcp)X)pn*1'#JNI5h%K@p[T,%St1alQnlG"6=O;9>L)R<oE*"]-f:$=^")]iLIY)d>uf[cPY)c!bA4U:\H?YaaJ_EWs?'%Z1P290s94PgJD(:A$DH1bjTZ3TMeDc(n5SP=uCG%6_GlVI$WW-gpo/Q$Pq/nlOggqWb/,lY=+R9>7[#X,u^WVT37P]]f#[0dj7=S%+calc#c"_D?aDl<-M!P'l-.^t(g/\Zo]qeD6qa.SI:]J^q^nSY<(T[MAA<K\1tttL?WUpnqS9`:Zg6614cEsE/'Va=1T4I8fO@BH%U9q`<Ns91_"0X>JX7aY6?GP\en4U^iNU/<1fNob^cS6cd!?!<SoX]2V_?M\eGOf/\RBfLr$XWMl5j[/iCKV!RejglV:QhSg.mQdH%pe=BhN_ZpnOU*P[A+!m\O+q-EUU&FPm$:E:EeYpb)DD^BZcL0+NdNhQmTEu=XV0Z6;"bYu]/Ig'W@5cQ>$D#_Rp-l%G\C;s/_W8/%OnBJD=U:9sIYAP57]^_RlOZ"Q]oR_Qj3J7oYWcMQTY2X*W-]8L^gSV$1n:a3fs\5HlfC\:A_N.0jiA[EW)s5aNgT`"*A(d00NXNI%=#pQ,l)B\c7$OO(Z)g'BL1C^-F`Fp*+cj=\Jq:>g"@Lm#GS$tc-St@S!<r*ZnCB#G'H(OJ,Y`c>E42So1,_K4QK)Ft&U$fLA8Jp-%>m/."%*<a<7tEan)XP5U:3PWie%)a)'Y'@/otAk8h-+?fRp2uDL@=01/M_(D!UaKBrMV:uM[]=IE$'hCU.%Nn/XZK>b<]5:6X-e9%Qq!l4`TJgiO]f'_"(5AekI:iD6*Nqk_IRjs&r6(437Q`[ce36lNNbN*fgJMCiKi5W-c68La;Zl!9MR-%B0C^Q[RW0^K@#KNEZ0Fq%S=&+Pk14.CXgskcJk<>B;dA,c^5PMleWZj-odj1c^uML?Kq05PE,_B@,uqP4X3-`OY'R&0m9P@F*dSU/pW0'G*M/1cA(%76iLK94%Ru)o)o)>m/j5CcdTJ>igF?J?Y*idE&_ccm0D)*/M1XUeLnSlJe5qW$;f8>?Y]V29[\4t#]l0U/s7,4["iTtIhfMju'a##!cb11O/%Gdmo_bi2_0Caj-?ctW#Z2>^Ogp5-_S%(hWRh=sAjGY,!FpM\XoY6Q94dM(%t43FrHCRjl\3sOell-\E?B$eig#HRK1/G/'.+*_FU%G&(k)1CY_I;$5D(d,ZSc6J*9eTj\V'>C0a$2A-UE5#\NiCN%,Uo:<eE=eoPngT^P0=uDgLPK"3I2m<`qPE"?%N8&@-L5st<DJ.dB%.(>pe_U\+d+mmoNLR[+sAa*e9NTmX6EOlTr_(&0O]tt1&"re=?F'rB.'P\8CHG>;meE<G57\lcu2A_MPr3Ls1<,O4sM29[,enNV;%]lT-'7I@0P2bCZLX'8"47q8Yb/J4-1rYju(PLb=m+5S+uQ_lD$A-Cs:$EJ*tL:Ntp6Fa@;d@kMkFDUQBE1TL(qd0V_1Kg&o+V\fo%]B+(,E3AlV[6iiZ4,Ds*3"*U9?7;>kWo,)LFG3ON'Dn.Y[l`N?Y&Au;_3)?.]n=8/2o=nBZ.?oI<.f]WSb^q/mQhWnA8"Yd&c!>#%9R!MOA9`gG"Z743*+rLsiRkXm5a7nONDAo\7<#RS]bm(Q6!6]PfRmu@\g1G=9[R"0#<i%boU`3Jf'][OR9?LlQ!P!T#<.o$Y$>Fr%mlgZm[Wm1*.7C=W%`WFL'`(kF5W*c/[>3pKTARn3<<t\'k$H3%HtO)YG#k8GZ.&b-,s1ho?0d)#?g0nmo""<ib:;03_(rk;1@oM^%dl0Xu)]LuKkVT[VBsh<LK&%Cjlm@>;>ifA&mDiGS:*HV1LK,m+80;8Q#^3gNnl2O`&29Vh>4'fVlimbOLK5"1M3(Gbh,^Wk\*T?]%Sa9]cFILqW-dF2[ee*(B]3r+=P]`nsbO%eeVfY*ds7tT[A(Bh/9e>8VadmRPe`q!GT.=b_fHD%H.,X)f]Qs:&EE,d_ZY&l<0"RM<%><#]+d:+@[SlIZ!M<<Sc(^3e0!(XJYko"6hcKF'3jjr?:+"em-`,;QF&QRUI3&u`e*#NSD==<@"?6+1\\[!8Uftj<1KqAVD<7tq3%3O9kHmo3FSPFQtMgqon#.n;se0q2OeYKo4cSCN]pXDk3fOgCY:@bs&Q^:I',Em-E!)X*3,7cY^AGH%^95L04V)*?Z@Ds$K!6ioCg%9CIbcF=Z!P<f!WZ[)-Z:Ra0I^0Pa2-RFq`9qdgGgFCqe"X$o3)H]2h(Btmt2SQRM7ao,^b7amb_jk^C!D)C'@*-pd^3jWlG_CIP_%9kS)8fC]#97FR[Dd^eo8=Y?/gbgqf^f8W8KRE*!Y3h"@b<-4n_FCqe"VROgR'hr<V94oP"XWC2L-CgN,HIn+Q1L!)=2q7]OFLn=h%Esf)h9kPM'ZKZ$`[h)asRSMJ!lmB+XLcIuYCc\$1lkm\kF7JPCFCkut\_(MhknY5JiB7*68(3lsQI(fCAtnN0[+>aUe(L=OCb2%#%J\Q"LRa)<Y9"(hG7FTp[Ec!:pc:j*Pcc<N/!a#_/,Y\<hnr%oUL_q`H`-c09fB;:8(\m'[>,^!l;s@bnI!'&Sl>5iA/*3h<OtPP+%aYC-h!h;(q;4`k>/d)Q+-r?<Lo$Ego4kgB;2^I"N^bNIVo(Z`R,j_;i'Mn05:6pnS()4am:86M!X,H&eCIBL^celchQ=/]am:;V0%>g+A=h:cT2e9e@RM<$1a\[0@0kN7/:M)9G=O^.;Ul.k/&DX!ce-b<N16?8MVk:AEt@7i0$gc8INO&o$L@qJS[8p%OcRQF2OQLk9f%#k<dg>L(ph4]di2NQ#$7EgNq\?_(Jed+!*P[:=J/-a%hO'`9dPjafZX2u.W5naf.ISujU6mK2Y.q>P^<%M=HH:)r]^$WG728@9#%%:[E^A-qnfP@I)p"0qRUggRceEg^Rh;h?2_OnPp5P:u5%#S+DBGhP<*[[9IN]LLU>QV)FrGHst*k%=,(!Cp!l,=5RRNCW(9D=qY^c%h&V;U0r*POOi#D8?+;VUJ[Oc;'XiS#qC@HFcKPQDm('M#>61G&nn`RXceP9729*9!%&\?:,q+8"@5Ca6kBjW.TgmI6aQPpLSs^p>%ZIZrGIAh(N(Z!=lj_ZQ$iSAa2)%>uRp43W)p\sg.Fe2e6aN)!`]&H,'nWr1":9/@r/&ZK]k-8+"U3P3k)=o++R>Anf6!OOJ\3JpU%fdj]HaKYR%&=MP/!l'9pG?D2Ua`4eX%!O5`X^4'+STX#R##]QB)=H)%PilZU\B0uEOgl[k*-]TMb5,jk3\JNCI)q0_m]?#n7MfoD%c5H'*hJ*Nq.N8]\U>7\#[9**R[@OG.Mca*7YKnZ%[^4Ml2As#$6C#X4%0Y6Gs&`TnZc#".Un*dP=b]!^:cfU%XG'\sN_YnOQub@?%pVJKb0bGD3$tHkU5/,i(Le0`EI1+"f[c,,9lrrJ1DX5A76Pu"s85<AEe$W.-jt;ULT&^N!4'<@m`Vj4$c<+UY5.D&3EWImNh0gT_%&ct4_$=Ycu^dFLJSMah^15H5Galoe0U`Z:-0J(7S$\DeIc8a_8j@VXPfa3DrQ]r#;bD^P8Q8^['hcXkDO-S`8C6@h_WDHMbGPNfF%`42,n.9Ee)DIQk1rYt88(T_WbY+P+oP2n&CcRJ/4RA.**ms$WV4km4H9d!o5>!$?IT+Y`_Q6iNGq+6D!9d/>m4P![p*e3:V.NK9D%WLMpg.GcSA9?[^PEF)ET`oA0+LF6;m%!gKC-c7>'Gdr1ZPK.U*kjC3M6)0Sq*\ObM41>R697DWoqn=dZPP"r\f!0_RX]h@%m$+X.%PV+OK9l57T\gT:Cm,+:,VtF/XlI;2V/JjhTSI-X*MZRkWiNp(-&c9$PZj]Zmk&6c4&0C+JJ+)-ZF&&4*=`urNVGDAtJ)=58+dU1@%Z%(f')p:tY:%>Q.eZ!68WQ.6JS6\<\cBYN'4k2,FbqsOa$]U]`C7Put]T'Ct495:R`q8''lC6D[Z`g:G=$AQK[?q5*OEr[OCo0mZ%:1`J:k/2o.:UYH+6SiUmk;F3ODO8hXQj(KIrQ"8Lo2EWd$KJui@NCX(Zdb'fchGh[Q?%\a%W"IpmUe5\4B:bHg,r#1OtLoP?-lh-%SKTf4;e7u@.[pDlj3<d'KE=2ZBIY)F(\fgF6d?EoHR_\aBfQUD"?#lL`AQ#/o$U-+XDU(NW&ncVnT$u0B@^3A%`rr2I:Ms2.R%/u%]P^.c#$H,gS11YlV2d2\ia1/^j4p6c=W+]K=T*A^_kE!0ldtD+:3k49T%CH4]iNb""rc(Jo#TP`^"2LOQ7:_=l6`ZbL)<1bnR@M^%$T)J_V<,]\AoJ[Qnmc1ZChKe_5A.G>VT[:EUEa8YYaaBt>o830[Q\bfE+\'r^.pVm;sVW0/5::KM!;#kjCS[g"$tc=eceut`(Uj5%f56o8Ee.bhRGf]2S[<4:VY;(3(1ZIe(U(0bl@u*mJ(Zsr/ak]=+cXr<>4>Ho,8<sMn#\r;2+bnN'[S!8O,N[0i[f6`mUBrjVD`"E%q(^k*mMfZkN_>A7[;!i>q<p'MF3O+5IZh^TTX>nS9_,M*`"JAq/VFL98;DH)X;hE-2?qOa4X?=f\5YUC[9$F,J8Sis4Y('qZA?9%%M#gRo3*[m>cts2aa1k@`T\C;KO./SHMun)?""8MrX;=n$(^&u).gjX?$m<r[=,d9')[!%0=-E))bfV%kXd53tD+:u,P4GU*ZMrCM%Hj6Xg^Qau/2C$trP4CW\Z-=QUoD"ZoJ@B8k5(aU<?V8IRPok:X8blWPY?W;$T?aG:K5)a)/I$?HlRFaD0!!luG=/?TrRQthg=Y4X%)p%?C:<bW"BfU*9lb%[>paN>-f2&m<$X*F/\/WRIYFiL.a@m7S-*NqD325fr:b1Z#F2I"_jRk;f#Ur/m8E9%!os9S;iqs9E-.dG@%m/<>7rZqua2L58fVl%XE\OKmiD'5=h!+M5Fc[J1g*i^aQoeS4arN54_k4Q(T3*X$'=q@1#_N-7#O,2;pIU57.;loi72u$Qp,-RX;%9"Mcgb!*#$]rJ^."he)G5D.RP+fjK]q=liZo=eaA5J's"PKi1KF#m.fCacKZIGh_$,'ERkIeHqC[-S4ejn7)>_hG1@-MNV'Ph47\%.$BHY>q<+NnXN'%6KiXTl?W?p*NmqKe2?jo.IgX)=oIQ2Y1C_\B+I7TVu6hjqH9pLam-?tI!gsP_s[*cXa>t]RZDCc\-JM)IS3+N%f];_359`#Y[Tt&[T7'a)e(a"daQmIRgD8[?<15?;%!%N@IU589o4H.'@'.(j'XUTakgf7o/aK3@OcOGJbB3AZrRT66k>%AP^V+&1%YMW6Wq",84"*sk3Zhcu+cmJ>[j__@#/K'h^U6oGFA#n\`ZQ'e4Wn4kj8^$G/B&'H1]RFbhnSKEHgbu4jEr#K2<M+B_EZqXDlG;ud%XF<bp[)^?>H2[*9qO-5][X;CGHhT.]Mli2pced&@B,t8&YM[4.kd('<h$`Bmk"3\\\#S8)\\*Booua]5qIq[@Apebjn%j^jIPr$/%AH5jlYFiL9#eb$uYFc2_]Rd_EoHY5KD"R;Nl?W?prIG7k><f<`.u:<uf2%;42*8UYMQU5CYFdt!Y`@^J0!Cm1Er^KeR><N#LM"D8%aFl2tH@-RtPnJ8G?OSjZd_&I>`AH>pp5\nDYXP<YMr9tGH5"YBqqsDMo"p&_9aH?g"I'Ir$uP@^CSE*Jbnka7c$_<YpG=KZZTCdU%k#@N=C!darO=lrg58On!:Qrb..Pgrb@`J#bDF;WY_hG"Za"?2r/EA>4Y*c?BCFZf7ID9(XIuUV#]Ai!!QF^u5Zp"E\=24QNq"8h(%Gp6R-ZY.UDT=\lVEq4\XGrZ_uesY"_?+V-b[bKn7kZ9;1lhpW(ZM-P>4<Dcns)i9^P(Xk5elWnJIWjmq0D*o`h*nW3dpW/fkI\k0%r?J["-)m!<n:b67V`qh:5)ek$&r1:_/`bU=c$bSRDi`5sqYAgB,Rk)8C&XOXSaJtn\hJ,r*,1i@WC@@QB2>`W4rj:9<q"IRC&2h^%bqeHk`8&ckY7$@Dbthu;a',`N4")0BZkSTIO5Op?kK4cH6S<BWH+WYm*KF#'a*dVo-P=P49(TOe:,q0]\Cepi%86\Ylh^/>g\&r[%+r`L97F^6lZqSfr=LoCFL!V#ARr6c:@QnMq_EdnY'p`7R-2i9Be(a'15Le@e6(F&(XX.h!)Y]ra:e:';!b4FQnQ50P5Bhn,/6n$B%'4%J7jVs!=g$/%cqsDX2Z&s>oMe&"VKj&Z_WaC38hJV8>ntfB_8oP\hiM#].K5eO;N)ZPNGqIZ.3o[0C\c))l_f2hecG`Ygp[s_]%R>7s_her(]/CXEO!KZ+=O,+XcN>Ufope*$jDT2-SNC)C/GHipA1<Dois$RD[*2B.:#l]Z=o@4BDP!"\c#;9"1MSBHZqtk<>G3J1D%I=FEX38A<G,W+p&HD",YoVNCWl%64UWtn*CJ]BD[h/[qO-r.PKEU^+HYZ*o)kNGhn3"+]5EqSQq7su0#.\kOt^W(V8;2f7f50:)!%N0.70nr/9QV/NN!C@^kX-Z+'7rG()R&Q5GeiS^#^b8A3*FqCq^+[=1^S5edMb0\E[Mm&-'HB!"D;f9&<pr$SuKk4Gq#]k=j-(r\U%-naUKWLO<]S%-lS)qrE<r:&EINFkP]LO8CD%ZQX-A.jKO29\MV<Mo\m7>B/SPP4X_4mlNbW>7L+Hb(<0h31b4gVd5LrR)4>h%Y1J%p0m:kLp`iLiqKrC/Y:bT^M2oNLZ\OgAa9"eD8H!>irC@@H\1($jme-OBOC"p-fo9a>@.:eIsRAC]D-->e!@c=+%^,i8Xa<W*^YdG%E?(aj[td\D]\T/da_eeH*`Qs&jJgP>mIbtf!Xu?S7&5/'d"&ZKe[[fjS/1lI'q9P(nP`sfV#lrn`oG*mL*e^u`'4%+Isf=2-O!1Z%.eCs)\LEq$AEf@6rqMt]/r1*mn8pCm4N=`OU/\`$5suq9#8@H<T?gFaA^os.bC7o3/r3(9cF\p^VSe)(FLJ=c\8BTdIaln<'F'>7%KB2TZjG,gRC^0DR]h_2kqebcCe-(Efca/Rll3A#BdG7S&W's6Q@Bq]!kMRV[%f$8;l3NA(?cH%t#S*D4V;^"(`^O7`,"6YFl+9F\%mAnl0''c9GM(m-&F!4YU;k.55gQODr=h+<F0S@sNiuH-1<$k<]$,EgP\@gtl0LFF6*Rls*=R`i\hsN-nQpL_E-j2m"Bq\WlC[e#F%iJ9`C>^S0`o`\LsOr!GiD65DcKjpDaKMps/DWMHrfb&^Vg#K8VSiu$Tc@c_u#]1d_r7fn-)Q%L)92l.ulNKV+Ir=_q@Bg!cW@tF2%S?J9l.2e-VV%Fag'S/9?\41eZcG"?2E/36NjG^JQ/=c"-jOh&WKfI#XMXOOnL&"@-]8/00Qf-Y5L9#Ak7pO@^:'lLMb9d;ZQ0LV[%r/JP0KhM@O_,T(pVja*Be+[5_ER<_of8*/$m.!NHCi8C1+T),YLNX_ZW-`uSlSb4mH)s'"HMlo5D7rHLBX#,S!8cf]?Uk@hAf=4u%;%%s?brJ[7r+SQdYM+#GA@$!uPC,AMJ4YL+B^VhWEfs4G]/Mb2htYed6t(E+=IB[7VBoAXFgn#:9bK,t9bThb+YEnFZ'mRF=-J#m%Vn#9ErsEV\7*[,'Q#[oQKF;H\7aj@/7KiFpFaekZKRQYhZuVaKrV#LVD<o#dUp.nGluB^>_r1`qOcS3fgG.unSE3-:P9ue#nU.1J%;al[?W\-k/!0[HpU'PDKU!'hpnWg.W!pu/W9*ABM#L)t^"_?TSQB`!eFi>CFKWUi>Kk9t.493G+j&WuX@ki]SOb-l35eF*W45]'K%KjSD-Z?:cclo^%-Or$s@WKK;C!`XH[R"P'kM'B1l*jWfsh#J8QY0`9B#C.,VEmYu;.T_(d-*[pQl+kZTm=L&uD0NIZYC'@&DaH*^%k86*O'#Bmga6W&O[\'eJhu^#+>T\jsB6r0MCT=WGHo-Ut,$dUBo`p7krr,5Ej)j(FBA;TWEu:`ZmRlI!Or;bb=DGnY"08r.3dfSH%D32GEEYrB#M#u7FVhdh9Kp_D'l?9;H#\)m&!e+Ka:2dSHBWU<D6DmLQhXsf/7b)FXlq,QrjQ^S(P(:]GZ<MoJjp+j#XhK/E_.V.^%Pk.6"m:?fFMp#$eoF>Z01c^XuO+%7L#QS^!>)42^6#KB8N90+&k*Km[#0T8a't9?b#!;b,T/`lV')R9&+@YL2JXb:F>Z2(O4\+Q/%#!VXfm;NeEY-)AE5J#D$gI#dLgZVdPNm0/i^a">&JWeeb[!uC^)n9-h?qqV*F!477!Y*DO"u%2:)M.C8']A0mO!oK!.AY?\"MVk*%B8lZqag0=[+-r;u-"9)HKCMG=P6:*OnSMKKb,%u@TX15ME'^_?F7kK&k="-NgQ\cf_LrPq(WtA5[n^?n'3MCMTb\>ZbBBiCm?u8:%(\j<JV%bsfbr^oOpsuWQCtSiA&89l9@q''X(7p7ARp\F]5YO_@J&sVrnT,1$h9rGD"!bsS1)fH#V(`()-V<MO+NSO@#X[Xnr[ZQ_%0G*4u*=riJ.M,p#+RgJ>MQnc*8;"]sl.IWfUOb\m0+1&/m%7uW&>"V]`Yb.6FXg`:ojS4/j,Inq%Jq5pA#;kK+I-,+mdL4'jC?-"%q_Sk/r4^,A.A-b$_$1E@M@fp/B/<MmCd>7/bPmX)1ncaF2n!P<j*0*CCLY%'m.UUJq4E/fS46_gDh.1HgEsM\Ff$>>gU$$!5#%0^%J5R5J/XmUR>VokZSaHbU&W!Qr].[>t\)]iP@uF&D:Y)9p(N#$t&Vr$N)Ac]$Hjk*!e/6P;(7Gf4NiNcKTuKnWs,;(0I*N-KV*N9'%1qr+qA#1e>6iLQ]F,#?"bEKB!#$Tn@[:C5SXWCcSorR.JM]+0OHYM\+_cpso#kFY/0uKYfh)20,99cMsbUo9l5+N:=*eOcZ[D%SJ%ZKsD;Es!gj*-47PBa(N3a0F3CCV:bg\@q:ROnn7Jeq@u9mdllbU>&t=lDP]5/,hLo_I3kF(/tNuJ`=aoOQ_-ff>.`_Q"`'ZO)T5k%*2nlR8++ZNoZuCfQL8BnS#?\iA0VBSF@<o<SYQ\=Wm"7\Q)QEUE;o"S.MoSP9JNYaZrD1cM)p'BNcYkBq[ODu]<Xaic4)DGMKKUj%)j(TjV4Wue+@l!GCD[^Wg!CDnEocb!UjO6Sn>%&W_Vg9kLW*taiP\?sD1J;U'7oJ/@8KhGaT9Som!J?3L3k6P**?-.)A,>3.`>\'%83;(6LK\@DlEOCXA$gSegTMsD19OAi"2=!^Y8bjBAqmH(2?1IdHa'ShQ`)l-7G1>RGEo.I'2\"M=F[*=Zfq@l9,tp-#m+i#\,i:f%&MgorA"eVJnm)./_=9[:Cj37u-g,P$-A*p%`psBW^1%q:b1Y<L-B_0\!Q5Ben8I>JlM4l":_5f>JfeP0I5K,pkW91<gH_eT*"2+)%Y&gOl'"^7tI]hGlfD2n^?=(W+^4!@e(';3U(5u9G'n>rXZ``B/-p<V>ce:t\"+W/)J$#SjMJmF+]B,cNmfG"_ccafTnIaf!+^F1t%N>djYZC"Zt/YAqe@t.N-L3LdFrF[L/7\)\P52WhIBO0I]%lpfeP_HX^:5NaAdF>-Q34f6elN&*=Ch?PjP7e\VI5E&X-Rfb1Yr[50%nMSEk)8bHQfj>ki#Vi59_),8?#B)QRf`shT(r#qoeDQ9=UcLlihE/Y6,B(<8!Y[Aeb[4i*Pma/#c(][tAb8Mm"tKQ`/.X-<a-1c:%T7q5GGQWNe4jF9sI[/UHf`Q!$?3^F`M_`uKpmY_\#uPbp;U)X^TI$U,Yq;9>^6dZ5\pZ?Vg"lE2!KcK36.[1\s03t4,aG8.PSg%X%(Cp1=oI;/"(HZ+)jg"]`1sBdrrUTHc%5bWUMmiLAkbIn9$e0&S?Q_S:e&F&rhsOF2=O[P_cNfGaBW(22Ki+U84FYh!.]LZ(J[HPa%cUT)0D56KX3i0cD=9oe#7@;fG(L&IbkV4L%T:[;3Hkb&77ClrLcmS_JQr+56,Gdo(+g28#CjW"Z]2NN6_F7Wo[aCOr^NVDcd%Xl6%HhNamUH+,3a_8QU.76@WSVp9^+rS+8#rai\d_Xd0qk_6DAY&'XE-]$HW<s[_>5]*e_I,_^?THj!e`"2L/d=&h:O6cM5D]DNE;m'C%30n16msHGT^#D,.1PC]`Hn1^0n-Wg67ta^K4$/!,Ws3n5]S*E<\2!]j*Bo't_+*9*s!F7Hi@OU@+nk46f=S\D,Nu5#rhD>^FpV^,%pg\7M^k3Hq7K7JY,fLS1ghQ\[I-h,2.qHD2;I2)A<j2_-aX\"A*k-$&5Wh%GH0$OqG3.PR;&Cg/L"Ks>nLKrL/#l\Y.YoFPU5Ele%P+I6ga6JAE!%kRbk7PCo%qhOIG^fE[H#4k4GK1%WMaEH_bXo9Nc;U(h:7b9YF`51#7(YO/egVTCjCW''g"lPm["pX.i*=pVEB2s8%'l[87<ln_"N*63!3RbQ0]q>C2icP:e("\KTbg[(in[<?[lq.$)&YTI*mRs'c*6+$2q`KUXI'/!*a'e-uB^=3KI&Qf/k4(+I:TZ/p%;RC$2TG>BIOhIW"%2N8C`ajQNN77@-W]9l#^@C-cbV]`/Bru<-\GU*8D4fSa\#+TH'!`l`:^.%j5m$eI-^[^Q5pgc,&$UR\>XE!"%3-YG;J.PQ(Ss^SUk2=UebZCBFkT,5V0SB3(c:bl!'VuJQICNW@'jo8O2,pDUW+1W@_D8(=.BnV\G7s:1j,2c^S;Le1pYOs#)3Xjc%Bp"Agkb>MZGf)<<il3D\Qd_'j>gC;BE@fj-\AfRf+m#S%_K5#J@BL)X"0us!h2#H>^d^-k,42[X"eB`.;O4?Qa`:F8(3sFL^EDMr%iA9].UcF]<?DRNb*7\hqa0kl/\in-"Mmn8NOlefO4i&77%_MZ>c92i_-FarjG!ENE_7,Lii<@Z`M?Q/-UD,+-#t6Z4a'?.PoLSf7%koJ`j?t1"[#4@/od0><UKHc=EYmjDZarq8Bgt*YB>731o]snVaYSr+Y*EA1Mb<Mu>^Q0d:[soq3#!6O>haJ4hl7;5kq=C^5_#]/!%/A^in]$5c?<rpDH+1toEHb_QUUUaXJoHMO9U+<&I3>4k#%uW>?0ILX-ql)W<Q7U>#g#BhTVPIoeZ:JJ-Ll6?^8X*!c/E*hmlu8#d%Q^]:7Rn#m1]E"tY5'FnTqn]<KEGu\k?b8;c'm.k&aYfbLZnAp=>!r(6UGfiUD,]N56jHlA5R:(NU&gr<BW[*;;LL0,&+ZqkHEJWq%*Cf5&#_%[_>-#aK7PA_FNla\fo+TZZG7sI-;+i]W6C5tB65-s:gK#RBg&8;WY1\5d1''YQ669a%__ZgaCU'ZX>3IqeRE_E';Cc(>%T.23Y^2(*U#7X8I+*9#eaRr9(&F;W%V/2+P+pWCc#!5l-QYu;Fn1XQuBJG@%$=[Ms?pR$toJE=qP8XM!YR*!uj=KsM,/H_a2jLHt%Oa([UG9(a;*AYhB5t-uG(/-P#[[RVb6NXL"5R>$9h;\=kdDmVi`0Vo$'s3iA?ap7Y"`D\8gV:L$eL$T?[WfjE1_R<bn+O$+;dm%A%JgJ$_Afgj%b$q]KqYo2cjJgm/8@PBne6c)Z88f<aT"u7r$Gq.C7dTJAO269cM9u7$#UHFc*e-<f\EKj;"LCd^YJbkIh'%4f71m(&%SK^Yi[]5E_,0^tU5i=/t:.6Sfp%PuQeUA6qRF`+*%!<?N21TY2c(l6HKp)ObK-?,30e._6S'd`?O,/;;(o)E4R2TSLS$G_mVD1PY%l#ec$:pb'gMi>][fjq081+`.@Te/#lXt?Et)Mp&CIB(ed-aamVf!<BHgQH%9#<t"Z+()BcH&S\d3^KZ9-lR(;co\PPr&][]eQ8aq%Yl,\9ro55AY;CP&#.;RDdKG_"$V:]EcUe1.CGUV(5nPpb6"c=BpB\L.q\eVV?<#c-39]3A;[qjuBIp30'qm@X8$J.s(luPQFLLY=%fY3k+c-S&&#"@`>6]04GpV&].Ng3c0=X`\_XK;'3ogg75QU,X]%`pEd-O**B-p+oY@"UUj7CptH8X5a&D!<g%8)>4Qbip0q4Imcp%4!-_t#.Ms&%S;8]"hkm=b?<"B16#7D(n!L(>_]6%4*qDLKsE:"O)!@=K9t$@l$YRT9bj6k4Il&l4i]e101Wne@bSq6[i-$!+^&-l%EiWWbIaRI`dBZ!GPUXYl_%YHRQ8j22EUY5XEtV!5B$HHVCL$iM$:-QfF"@*KdqT9LV]=T<@4X;QI3@u3[JFEHPld:"#_X:-UC<q$%It*foP^A^_HEcL'OaDt<*k#G\Z.u+GOTb=YLnZ"?`a\3Ua@b`[\JS^TA1>qp&LR;Rk9gGg[=Y4iK8)f?V.1cL>\Ak(VojL>p:A;=%T6gS^E;HgE"?lk9CC=[6<$X]krKta$E?5#aJ\@s4;Z@DUoL<d0iGeoN7gUPNm@g&NK<KPaFL6)tVApkG5#0:+oOkW;CR#)Iks-9G%ZbgF^FhVl1X2,_mnj`B&GD8O@1u6q1?TF(Ad!c;rp5pbXfUsFG/_H`(ZT0"Q7OuIR7$%Zn[aLA[8.$.RTW&Urp516[7'g"@#/0qk%3VHIW3AY$)E#H_47&4^XE$[*^cLj+83tSQ[cd&Ne/_q8!/5/E=VR6dT!U2rBGB[\PFtZO3q^8U20]0q1P\fa?[3-Qd(`&uZg4hDM%fF(X1^nspZO+/IE29RP>U9GWfJ&3h$5c6@URDF5WW5(JLY'3u]W:l_as&L_%R>B`jfN?=tVOV9$jSA(iWQOo3^':H&LesW1UN[gS%d?<90WmWpu**G"NDk=+F"k:3m-?Ng"gl)mVhCk?G.GE1Qm&@8p8I8L^'E^Y;]Q.#8P&T`I@rbqKV=A=IG9"QXRSEVEe]]2WhAljP%KlJ&a,NG/f=3bPE3M8`%.`^@9LOaV(U.#p3E]OZD.bsC44unTo8QAMd3'6m0?(@L%S\jX1WDG]=aln)ken,Ic,2:hF(8<+eLO?_+%4i?,Q?Pu'"/_#kYZX6f3F&H#Ncb\l1"Hfb1Yn@GGR"6`H%j_#,KsBkjK;?nc,;.^:0X)f=?t-/,Dl8d]f=PLM?lqIW3L+*AP?a3*%cj0n#8ejh$<rsJ;CT9'V[>3O@J1);TqW8RemB.b:@r:p!fULL"2Ntc3-RpHIfUL]!S$BbHCMic)fUEn`bq-mV4\',Xen0tq]ihtN%D]NUL_QfG1mW^TE_^ldBq1Jsjbjt+?pRF:jOu5FMf:97pZS::G3RQR)H'[.*]AX$DXn/Va51Gsa8MiK/GPO<%GF^n`nAcT"203@>%InKY8mZGfRYB.Lg^C-stnAfP)O'?W5VW>!;EV\@^_k6H/<SBYb-6?N3`l@AMG59mcNL>e@Fs;I;gR(:8[.F1$nbTkV*kA[5)fO7\%qYdO-@kM^J1%iPpAPG18GB&8e+%#=p4JF@6#f?"K*Osohm'+3MqY%+M03EHrmi2;9`#$Ce\-_]e"S5(9-`?cg-j7Eaa7uG:T314K%\R&N#-<HU'^((\Lb*A$AlS#8/\p-86/npDqEqhTNDOl2/s,rGs`J]?Mf6c4ITk6raLcUgEE-Y.b/Q3=YbaV6_1X!NZ^;r9G,JLtT%GEM_t1=#=%8,`l6L-nn?`GN^j7%9Ic?WJL0GfL&PEFocmgYFiC@=5\\j0MHV(jp\rHDam9[<nrN(gppe1kc8'!JPg?iu<je3jUdT%E1(t"DOeR_dGP$<%IP00659"`b5g.Bm5Ju@#Al1rC6jmE)`6WEb?J=1gWO&rL!fbfZA!I5H`)aud7PQ^0iu0bKq_HtMq"?sUe57A%EmR/ODCf`!=g3V=l1+'^)Eq[qhmigDEJL?Jq^R27[8[AeDO.>iCO*Yb,Z'L]qWk.:8=7VtfTT\JL@i%&FXKt@R,-XVZ(r'HaRN@1%-_)qRetSjoSH(Mq\eAdgc,,I`EG4iaM$VC;DgAl_actsDP[R"kL=h\7#0CIOK!QTO&=_*gnI,e)Vh:qV/ZnP&S=+;Mf$Lkqj_51r%&pAJgf"YUJ0uc[Ke::hHe7N0bgtH2fMi@cjAeuJqRFip<QsFg`AlL(;hgqq`5K4Lpbk1gE*Le^e.]dfP1l_\*B'ek<nla,tlnB6h%LjUYrU;J(H0WUUL@]TqN$tY4!1r2T22Sie<]W.eeBJ@9T?Li>0G3.j]O9u#qEt1iJA*8rikpEW^!4rk8#We0*>SASq+7XkfP5(@l%%.k/`+MQJoqV,e```MmVY89U*LT`e&^95V.V!p+IW\b`If?JcQKZFSQV^cDjs7.#7F)llGBb2Z7'gZ3diD-[/_ui5mE$OSQU,;-'%_$jl^Le`Zi&<W&BDnIohPf`<T)qn4]PIigfMULELp/<^r9b\;:TJT(p.(VBA;CRQo,O8JPDEko,`JXTX;M#;lA$qmNdr+gL6K%3M%hb9,/.88_^\g]p72UKO*5T>nq1u!u*s%eKm<,O^;)3[Y[N*]\VTr\U^\g'iY^ke3S+'b(A&NPR=b8RWaDBl'0,Hi.Mj_4FS,H#'J%a;&3_gdY%i"b--s.CYF<W0]ANV]m`<V\FQ/l.Dt];@;j%[EWsobJuCiJ%e=A]Xs2:=?`1)GhOeeceq."iQF/c5OAifHp#=;d0s3M%7(l7ND(`T/9AaTHd75uT@udWObOS>)nFre+Hj0,Vjk&ZNSmhG.#0!caR<Sr-:*Bk\EW**CmWgq^lAUB8^uW2MS@6`,r.P`rfWToh%5R")tP,jqQEdZD]Gmc)u!m1At#hk808Ja4[^I\"*Er^J!I_s/#*CL&m2$CAE!G]5g!]<Wn8[t1tN+,.%hD0s7gJ"CdQ<jfEC2GUd%jUS#-,JibQAs?6AAT"ZE8YJ4!4=j\hH#q4c/i,V5RA##e<c]@+jb9Vcq9>IBei:h__*+0-D@V'WE#(1S=qis`KgmILA"XuJ10;!"%AgmfkREGrhf.7bP+Jcot2M3H.0sqR[.>03R"G%_/g%TY>#Or3MfL5e&Su4`oO&--n:dKPRN$Po(%b@h>1kL/WaY<+2l4bgj&-?Im%H#4rK1s8uu(s<TZQ(k'4A*J-IZGnFBEIA#4G\)jMan7;98BO*bb?S5WU:F@;&,,"0FTi)SUGXGjc&Xul_n^^$9Q#4l_>Tq\T[9Eh%/8u]UQ1'gUQ7N>3Ge5&&(j<B7"\W+jN.D@=>b!;.!i2.QkuDZE61P@i3S^U,-#'\rE*DmFEUQL92%VAs@.hdJS]O,,N'f;ZRTqqL%S6K4THLj0\jPRh61OSKtaHju^2\pL(SUhF2NGnYrb-@;10NQbk4^bQIEcV]d3%)=+B"XO5G]r5-bd3(jUrSQsG3/V,ljoM7_UtAo%#??fNk/%GJlR&hVAlBL@7'*P\5S@m@](;R.Yu\JUU+X_BV&=;WmD9$o=ZrY?E5%EL^c(;pWWjB:Vi#2%_:jGDC)/T-)+%/+l%U/2%4V,Ia&1/IVQ893E"p166T[T\]Kb2!D"PV<,+;JT1hZTTGW8EghU%:+p6W[4/Un[uu\V['T`&81_3QXQV'(G5!/`U557#j?SY5ZhP%+URjD9g,T;5Un8DoHd&nA"-lDWI]IG_tA16AOM46f/UPT]Qj#BN:2BT3sjg&'c"*"LT+/61;iqD)KdT*3m*<0k+.6@P7I,=fT8tN%d\O5+M3W%))%<Zt@^Z1M'klU^dAeQpEPmWuI&C5V<l$EYLp_=s38q4+%CJLLaP<5:j2<lac`stA/D^kIC!X'!SYB538Ef013]PSg%fopG;"50thhZnPjHQUF$Bs8FUE"U\`$lA"R<D)?[V%JG'<:Dc#8<.GX`p-V?TMkpIXjb'T@sl:VLs$NiE:EY)Ls%,Ta&T;^/ZB;$%S:p4qAqq7_Y\HYK="7-]BBT/[jG)GQBI1&"*S>irAS]G6#q>gaQe#]_gB>bN/6fkT)aPBh<'GH?5Ke%3k=/^)NCn4^kPmotTuX>H%oEBdtQrAl_@BDdfgklFKUKW5'8uSBuV[?bmYD5_9PGNU\,Tn@0m8VF)_h\LY]'"AkVA13RhFd!7P>TEg3Q1J2,`a(VrJaourKbKW%)/\P><c.u\J5@OAlNn@t0nn-'__NOLBZ>$,fg9_!`I\DN6Q^aOq7mYY)+L*D'IPCJg51TL"K4gf6;%msg64VK8UYsFCZrJ0RAuh$%>,R&n&a_kpE$I\$?89X4B\&c$?J2o$9dJ2snn7f0;S4H=m]e1[Q_)'tEc0@__a$r^.]DS(7^$^=8PfSm4t>j=6?)Z+bJ[8bP:IgI%Xg</*o2eE3HOcd;-=J,36DaW*r(UMMmRIoY(Mkd6RBP@)B[@`*I:E58WGFSL[TrVn*m[nXbL>06*S_EpJrbS*T`(7R1i^$^5nOR!%X/.pYd)LN')"Y-MB*MQV!A\mfgSTkf(>m*l*OC-pa-!Hu`!2,[",E74Snr4cs.X`*=L,O^CH9>Y"$ApOO=;6mAliY)I?oHl=HtJu%]NG8r=p.fDQN&]%4iV2#ULjHn*\uIH/5@un3,/AJ@?]L\i;<A(a-/8_3SkiF@-K[AmJU,;E-m:$^U"3Jah?]h87sY;lf]V7aF(bt%J+B1Q3m5L+hFn"N@BS`[;*($J++o\7lIkb_`?UDT*VIH18JH*]IqFscDuM>KB&9&E.:/@%N\\_6fGjQRD\P"t\$R;^>2;DpPu^H"%8!WgbrN!2OFjR,#Z`UmfrjFo!q#SIEiUQdh]so/C8l)*%?i,G7BbZ$)aK>:7A?%[^'MAbkm><<Wk1.Oeo,^P6#'i-(G#LW@BtM?b%6Y?2"T6n+.buPl9L!RF6Q\h%qhgoQj9hG$B/^hJ2O-7774j-_0-@T8S25It&PTG5"]@X&9H@#VL$cY53BF8+en?M/7'nm$&N![/n%6A&_'(E6XD_sF]`;kkeuP#X!rDO4dtbHjfg6->A7Ed:\W1Hr:lEd:\W#jcTUEd:]b>orF*=YA#MF]W"T_:n6YV8p>sMsa^o_W7P]%jmoKN(>tNgQHQU,O5GLk._=;$[ccoq$/O7fjGTR[ckskukj1#0NaIUdbTUjNs4-U-6\QHm18@tm!td%:$sA6f:t[op^j0+F^cN-]%1[-mMPZ;A*?'<i8r$?q0&:E@Xe_g8l:IMWF[Dp/Aa6t)G?KBWA$54_S*@q[VGaQGV%j",[&Zi0DKkUSLTE("[Q#u$V#?EogP,^X:%%abt[hQ-I)Lbe$)3Ho]>Q@l`<0NoZ>=o^lg8*/eO`Q?ZZ@Zm<*XNiLf&q\8r**ZUo1Qm^0IMCDXX\K_,]@th'3JZh[Xt0I5q&u;p%1-)L7p1jMaS>FDC.IR[Z.3UDT57Q"76jH^Z'9Vi\Tc-ca#kGfJ9/%XLgtKmel:M-'EL:@q`#WNl<cc@@q=&?#<1=^-FX@ZQ]&ZU?%=MO.m?4;dA*.i/V$8N6ee0tL9`TS`VKlQ\UA_InR?W9i%%N?h;Dso<D<>!,di>A,]Q9;ejGKd@.69`R/Ml_dJ-(j.*g*)gI#][H*%e['&NPaD'!%"udq=p;c!%>=Q+\I*upI:C;("TkakRN=]=YA',)1G)`2_+j?o6EhYB&0OZ4]-T_(Qc'aIq#&f^Jl+,Y.0TiD6gU)D%CPIET'Hp1$<o938e/AZ3RW-Z)XRN5aKU6UDha#+r5N$[(]-BYi'uuui@rJ'n]$lI>DJP<jjYW?I`dfLfLg:gr3;Wp$eVgk16piSM%\)#o$L8i,9.lOXrKo&8NRW+/s;1_\$`%7D)NPX8#Rgct)oKZ,<gaScZRog&tTE,Lu&B%UbJo^rbD.he?Det#,RRh:2gM=B#5:Pp`%0k%3@c:HU"OR(H2H%!A^.ibmb(#t&6Gl5!E`7DkJ-;NOPC-/#,N?DE)CL\%E]$m=NNlSog2#*oeJ8rdm$Gh"s2%g.l8?KpBORbt/%f)T`b3Z:M3$OK#.r"oh^R9pc0pp_22/9#.3e_o6h2jeP%aHji.H.FQR>)e*^s5XX%Or)V(W#N/e31LWA.FuZ*$`!-B7#TE63m(!8%/rjJcm_`*7,+G<qo*Ps-q8B^r37^ADD\h#K(AkLY,Ab!35I'So>HVNh(n6AGLGAAkAL_.XEECfGhg`Pd0t<^e*e(%GB6p3T@l.1^%p35&=-s^f8p!j,d+q9mOI2oo#74e+,D!1"\.6%^W2Ws4'7su/Hp#4MI:G%CM"d9p!FC`o9H,^J`Zpq&%COS`8#J'9'?Z#Zq6E3:-%&H%Kdiq3cfVaA_hUe3:?L/op0lk!'W\6e285EMB%4[*kC@BC;R:9VE_*o'.pcc9!["cUa%RNGl5X3kbI<UiA<'lV7&aiV^3[E,jk%dB#KlAW*XXf68]oRlDpq?i!'@V^7f'P@h"Ee'O!`c21k*.ptPd:E^*QBcI,P\0oo<=3>L#7TnuHbLYgun<TEUc(A=a;0OnIC!5E/%O!HQD<3@if59<.LO)]Qb"l(lWP.03;/%P&Vd"@3mO$#:g\%Vbo[3203#eTA,*jHdnV28EG\(3HTOebqdk,l%N>MoePB\lqI\-5n:%8+Tbl($!m;s5Z=i*^?/S[B$&dIG3cPqpCUCEAjFSKk.e@ILJ]jc>QSNE*i)WMuJ@TFOnY*))%UUU)usOg?a-;\?;/+H(.??Ber1l%<Z1OAKCPlbrV#C3dDK\ip8HuqGtHgMWk7F'U=$2^<#ZR+i/"Fn7bIF=hBMgriG[&4S<1Qh;(J`7JTES+010mPYKjV%2!U#!T\j"k%b?WB5dVn6`T#\ak"%S@L7R)p\QXAt(hqj%\eGJmTHMc(8Pm>q)HW&^.aSTqk9W)U2:3DQPHF!*#er+j3VirZm7MS^qZ`/n6^T]iH%UG#c99-ohm(-NZ'4nU(RF?G[n'4*;ZMK:5,o6u&5B07>JPM3@:k8LaWNrK&D4_26UULcgA9!O44T3uqD0ceT;\1E)sNse946bc=F%9>lMu-g71jeW\`DJ(@'Es%OW*87pj4LW7K7Zgf<e-.*:RB3ZVm:U"Nk/B4;I?1V;ZNF#),k0^];Qh_%/:Lrt<M.AN9iE8II2l&O4%Sf-9=J(Bn*Se07`+].]6,+_AgmaGisYTE'cHL,1l.9)JUAl4gm4@PPeJJr/5DkLI4l3VGgKg;D[Al_]FchnY!FZecfA(W0WR<UKV%9mHmF)Bo"X[WZ4DRbl'W$1n^U,JZ%l#5@477\&6:8.[-Z+AW-Z^fV*-8:fV]FfJ1Oq>]8WAhl&JW6atn;CpBorYmrVX6dVpS)\W!%@e9TR\^;hbgfSoKQ/U?>NIh$cDQL]d,Gfd/j7Vrm/jK@2?5%MT55$$BJcL'e]8N"jbHKS_q9+`L`Y'W55AbJUk+\IP)m\#5KGX43%dsK1)FC2PA2Yl$b'3iJhq\!e`mc)Pgh+(`cVCG='93k\F:\UTc+Y8DnFmL\qb9>FgW%s"UQ*&c/pD9`ar($"_?.W`X[.CHWa)8'B%7WrRsL(GtW,J-YjR%CXFMX;sCZlpNmjG.%8*`s3DO'!&nb)%UGPod(dMXQ\s^%IXdX7_o32F2#%E<'So*KUBX8FgCVIqG0klcHXO%=O@G^+TbRAY-/4GU:'Q,6D<-WBm%*)3rrG3`idi-#t0e9QJTcmaaR3'A]'dVLn)#eP"n*,+dUK\&C%Ybg\dK[mkJXQ&04As1i91P%->6r/M&cjGE`nf/KZrc9f)K2,6E_5I<SNGCC[B#T'O1HrB44D(%dBE!$HNo5V2X,<\(@nlh!DDVam(?SU<GtJNpbWGT%es\S7NuU%Y_p8s/9u2P]CErJBkAO>mDK*J`g.q=KMgjX3gKDb,pIZ^`['#<=AR&9"KW&$ZHl5<0=+Z`R0cgE3]i.91ZO;l7Kn?#j["i\UX%em%/mHF0[]d%c=!"Yafs0q]TfC)8@1?FnC`=hO7A--)&8<nZ^-,DU<nX;DQ<RF7N]C`8M;SU[Q_()q"n2uI=O5`^T\qPVYd3hd=;.K8%E=iMb^q#_F]K0?NG<$G]>>:FH1Fm!5&[&9THC:!N12WqP*4'CION[@3f0n:kAE/W4H7_6N1758PElXUW`\Z%Y[jC&3.\HGrTWmO)%?[=#J[b=DU5c6-U1hfUkmnJV3Jk>s(a.nP@0h'T4oHr^[M&#iIU]ZK;An7/+TZHKE`Mgj*D%:B&8b*r:\dR0-AEEjEA5cupO!&q0%\5Q7mCd3IbWkG!(b&ri07X"l\01;*"Xritf@`X&bR6:O+Bdech"L;/H,(3<@p$V]'R.W9KV4LB(q0]\oPQa%5Ld3jIMWL!PK81CV%nQC[<`[kNJErJGu#%Ra&\atHpBo;Z'fnu$&<\U_AH`(eKD"MC!$cm#9f'IFR6O9&1?`oa,)^O@NBem%k*^&qg+X.PA.8>g>,o=c4%)aQI@2JG2M73qX7?[b2%9<#nHAJ),6ZP<MdoA)cSD:024hKK-D[]?L'FRQiR<2jlOjnQ/^$9m+k-/8cT&ZKLLS]FI]4i'gALuKX2%7D)G@NIC06D!S+,C$Z@ta`:7f>ec4m.6V-O^ruuuN7&]5c$?\J5YO\-d)Nj!'PDL#FZ.4$I<ITfIf2*I;g>O)B<5F;)LE?W<CQm^%DJ1%!U3t,Wk6AoPVf!X48s'*GAcDWo*-2rmD4DAPTW8SnHmF(SR-[K1p#YfjqHEp`N9(>ZoD(eTZOZHgc,r5_ZWc"Qea:;5"pabq%@mBSMh,d_'D@?l.9DpnegZRIXS]n,>8'[&GN:T73ptC+kZi2bIdjEWWrB.:K_`KAsE1]CC25.lBqh$I.U@5D=Id?.-[tdZ+UF,@O%J`i#dI=[RsXi48d1PO[c.g>KHIZCLq_F+YeD>t(mp*%\o-U4MbMPt:AM7hepY0WE7eKXj()_3;.jjie9T)3jVK<pbP+gT)eUkBoY%f5&W"NK7=$Sl!APW+B5$F=9V4Crq"Aj:p-ZL:p9&.V:#S%T-4UCd04q(mVD!YA:*mkgIFH#duMo&BRt/M$d*nMD[_6MNTi067/Fo%kjPl4K%Qa67YQ2a5)0sjBb!HK7i[mu,M!mZPciA<V%B*E<7d_Q-IKB@M+]R;]nm%UMIN>rUo9),PA7OEf34A?1]!!Z:^3VYG#h.U%[s]_QkU^?7WUXS&\+rA,%RR3GIDn%DeNO_5/?2dV2Ya7BZSIGJ1X/ZgBOf[15EON8=IIgOARo#[9QX]EiPKTHA>6&,1R/Q,%AC@I%IBd4;XUL,s^lr&Vf\V$)2U\fYMto00ICi/+`+m=J`4-R8>/Wg%%`N%_hJNYM";A[efZoA!9s[g<VSt-;Pr6c`WC?o>])KC$D2nU+%X/4V-ap,;_c9o$Ng[;kUS$51d;&A7e_.7EH:RGUo9rqce@54UK]j2_l.Q1K!`'h$K[Dq=dGe59qY[XqOD^RUNR3mh@>QgG-.5Xb^%(:@.2@)7(\HV@mKr_G7gZSO==rDIHt9h>1)ZhsI[Q.W;ai#FS/G$bTAe@`9$EdbsWp3=Gtlh-r5OhTiT4cV"TXeu%N3SE?uG.Q:U%"$>8t>/e#?3-R;U`:TO14d&RM,HW=+M[!k;MUtm.@G*[`[nL<ta,.C:<]E`s9Ne$V=Fa20`d6^1"thEe*$n).L<-qd:S_[h:E8(3%MWY'Xb89.`.C1[c.2NFtJL^Df&7I!Xi8O/2<pbF/6\Z-e6J_BE7#X]C*$!\_1U5KA@<HO8+s\='JRtMYYl`oO=KHAV*?hT59n3Y6%d4j7TH&%9-D/i2_bGj3A`;r61%,8r.Z9TnI"<)u$M@VFS<D73@Rk\/I':-2\77bA]^1F<0F0+mSHGqq>1--U_0QH[NduoY:Jo-Xf%.e/31FY<s9.\OC]Z^PKV0f)dn$R%FC/]J78nhcdD)"H8!N'R6fotsbnTK@6p16!Y`S,H3L+gO'(K>p:2Ynp>t@KpsaiWYSP"UZV$%X[befP>.eXLe:?>(P8&.#p#RlI4I+81OlHGnSr07hKFlC[P@*-M'KUoHF+G7B%?I3W?#/C\ZnqND:2Y?L3^AV:X8@BR[a3/qg-<U%qY[-ts,rq40A+sEm-@:so%hg`BD,??,k8W_BDJ`Sp8)$kE;&ij4>W&QXj)YcpQ:M@.u'_\L)fVnr#MqW]A(\L^%r%gUKu/^7eB/$%_j@F%M$:7B)ZROAgT+&m3r4,.gP:"(X3N<`8BA?"$5^_81S@Ri$7"nVd34)T="=J/Y+>]OR9^ZmJ+^`;?K228Y$$%N1NW$Lc2'W:%ZfWVoIp"lBs1CaZ.Ut/U);+?=Z[IC)A(aFi/J@-)T_4@QrUNJMoOXAC3jQ=K5"m`#"+qX&m%\#JcPuK(Kc@(i"!93O`3QkYjEMFM%:d<q?Rhj*J<hKnQ0r^hu;U[5DAA0k(C';UVI"oacY_GHV6SWQTD6m+GY_,CNJFunVC)6.91fH<6>>Q.R/Oo*eX;lCB%P`B6jH%eI%aAYQ4MU]SdD1j.C@_M"+.p3km+DtXpg!W,Sj0hFh<K)+:HEp>IWH:DbG3Q;uQn=\06&*Oo@u(0<*(J42/.GMh2)T9mC[.OU'OT)S%P_:_PRk3S4@,t3?$#Kk*[)<GlRCKXlSD;icjSe&a'?_/L"ZH9_E`5O3Nj[.9WCZ>nGkhNIA`M(g<R1i7[*BL/3>ir7h`]2D&rU%3%7bb"-8Yhl.E*K)h7FPse[4ER+/:-':Pq0CiDqL3;,p_P<:d9.EU&!Jo79Rb+G/a@EVn^C1LP9L'K!_t?0S6u&ZEX,2YGmnY-D]1*%+>D4RA@-bQOMbaJA/+QqHm_07j21pgS@rd_du$IR/)*ZD&M.I7&CDtL`:llM\j3N4J57@*P$Ate1'oWL0;XWV=k*s4_s<[T/_`PO%s1FV<\U'k6D4&8*@orFO9*c*-bMJ,u112gqABbIOB-2/X/&`7$T3Ro."_,FaYiX-N+A0<`6ifjcTq!i(NIqDY(^h0>7-N=TA#i)Y%?_''tCd&75(BYsa[8>(tGf?/7R6eJB[C7+i"$r3X27qLAK%d.PfDnKDgOUBW!g4I;*.$5tq\er<?)t%07e*W[W6\S>/<`YNBF:fq%gj,e2P.%q4A[q4Z[;iei38ia\,1kNhI]JnU"QHJaK*2q3qJ,?gfsNe?FW!Eqf_`7*85!s9J7u(P23&(/e6)AD/2`L>WeLSYpmH'E%;ZUqDnC0/eCml-h&?Er9"9V2<KN!lKa\17t!7gqU*K*G_e"m$jGL;ed8t+iS?=Sh]'#\FWEBQo9QPTptl/l4`$,ImN;BmG]GFh63%!G)PR0U%lB7;$60_LDC40E2,4b8$(naedZbaD9V:5:EDNP/'727dYQ,Xu=Z0Ors]TDR7R6'qM=b#HV;"W-JsJH%W4T0f$-j#Qu+Y%$F;is2k_)]*UN:?hR9[//2%`N=US@>%50[#gmi-"e8`qD.<2h>ge>$%V99u"bD<LAC`&Z8qJH'S?hk2&413iG#S./V0Wo(NkJ@Fm%DWdfc)[oR7!=!T)5b&OPPp4SI@14d3Q`HD3esf_.6)2H<2WYNk^80(akjuX;@F?$\Dpp2EFjRF&>I!Gt>*]C&G+#oFWd-V:jVeMq%QRmb=WM8NJ0Dpu5/C;%)33gtHjm?Huj]Y@MXIE:LV/WnX!Y]Hu-#7Q0Y.DRaL>VRnfZt,`b&^NlddS!Q>I!NUG3S_"lrXIn^S9"D%3`]O,KoqE"Q]@7B(7$II&[fma>Dj^KUjXR<:,;]U*ZHignV.Bj#4R3Kkb5%_W&Wu+XT^2CWUg^(fE+dQ(+h\Y9LVJ$K>D:h"jfPO%qk4N1B(h>-rbG3&*,:"_qZSbCDdbQ@bVd+(g5M'AAh"I7hRR]/bOoVEX+Z=G>/-U;gFVN=<56G'/jiCsN*okBg^8`J0I7$G&BP1-%ndCHIT)ia573oJ=(:JN"ZORf^B:jtA:%u1?D[qSDS;9`!f$/4eNAUO"NVn=*1(V[-[qQFbcD-O!LKd5u`)7NHSqX$V&D@SCVX\&S%F3M+/0eG$cs22bUA1:e>nNXfnj5Q0GZSaA-Uf2I]g7&.riB,NIk>"m.R[FlhNUbCIkJRcaNJQ6>K0]]ml[.>'1X(#;.Z7gL:Q@6K%Eju0R9Y*sI\q#CFP=JFP[*(,d3@,=A1teC!@":_gmTJdXGP&Xp('LYXeM;TnV$6S#acr`$VJVJuj.r&h2p%ukd*<n&FB?,Z'@>jN%Oha%PP>n&k.r<[6IG!Z*AElO[2o@b5qUhU,q`(SPL;iCWoq@NjjeK1udi_R60QEUC@lhHI!2`_;>MV>AO#S$>An#5k)d%^9Bkldm%FjqeIFsUtaS:/DNDh)iI3R#d-@VP<c'fC)qmCmPN:Y.*oE?aVOKT@Jc-iCNP,%HQc9lp%2h8=e5-DipI<ja&ecoBOj9V%1'@:e<4%ckOq9s3S8N"A*u&.JOHRUIUE4$`b#lbcYj\nR;"Jr;)5gC43[j/=i#pC;7563S2$ZSqV#BN_"D9>>%js*pt/O-oM$#hC>[g;0S+r%?'e-iH%0O`Wu^4@Sqg(B7A*Pl?KLAd@\d*p,;^:_![&gE=pQVLD7!T/Z[a<8VR"FD2kskg_9p4:50B1=G33QNQR`i_:i5!?m7UOb%/\"]b[Ar\VCRr"38@>)cdWe<<DQJbMh`KV+c5%%4>?[SHZZYD5]\=:mc<CDQCu7m0kHMI#Kb=ieDR#SM$,RB84-]61\=4La?h9'Z%OU"./Ri%S@jZM=g5iV9@`\]ZX-V+98a`0l[LbVV!LMUiAS;8+<29sh,Gh;YNBHBuibmnGYEE$2$VfnHN[<B+_.'Bu,M:j_ps&5FX%/N,P#`>PK+``uga0F#).6_FUbH;Kt)=Ubh<7s?&WT$Rl<1Q9^@[1(H]$1%a&%3_q@i3Kuq7XHg3[57/t(P2q\J<n!RJ<.\"f81[Y%emHqs3/oHi[+a?(Ib#!u/n7h$Fs9]2D9*Ws]=@Q7ma.)%9O&l=)QS:mhFAa&[sFh8aG&o>->k?eFpb$,$m4mE04jH#SM3jjNERe+%V.Q?&MSKW%::^Og)!QHs>Fi4E2nnjSNB37J@Sk'5lY+2Yq]`U(l>K3?6R$iqq]b0C1@d;=%n]CK$6A#`\/Q_<`ToH?21WDiZDtds%L[JJ`CT.RsC2Y0RT=#E%<4$M29tcn7<TpUcKZKFhiNoS(/tQ$>WV!Md[Z#DgX8Ro_CJ^LEfSg_Z[%7Kf-sJ-^H)mtpU0BiE3sL[A%;/?M-<UgTQCs(DWcX3*C;'\JF/GWA.RJ`aiKfgriipDaB&/X8afoNf$Ck_`8)[1b<nk-IWO@q.>&qO!IoB>lC*2=3>H"`hKS]A>p%9]KFAWq%NJXl$+`pbS0S5Ka!i3HMksE=GCB\.f"'<ll<-XA7d<9&;&t3eiKgV_@6jK+3c8^"p`0h2VB05C`E1e9gBTp`\MKMs4l1%ruWgCE^-#=btS*U+@]Q*1@CWh2)03,n7*B5?_8I.W26=*r^KNQ2#?EqDW&('pT`$hVaulpVWZi#aub6'IaQ1`]H<e<o_e7jh"Y;8%inVqaDGn7@l;^3qOVY,SePU;bKKZ6_CYQ&k&Ql9Xg23_:2XFJh"4en):HlJ#qBdUq@@-l#Zk%*X>I08iTNEOQ[r8EsHEC7thK34\%2Y&sjc,tq0E)6<%>-D$b%7Xa&`(rS16D%Gm5;ML=ag"I^I&U;-/#LCdfBVeAaf*hV/l6*.CPc#6ACO%*dE=Keoa2Xeh>-\Hgm:/!%oSPJh-)2]a?=A=I-.RPm2dNE;CPghqpo>,f^U8uqHA+TSPZ.m"dD;#GY9gkRWn6U/r^j+kpnfre,h5c9H0*L*Ouo3pG,K9PYf*g8%CK@e(b,<kH4HC0oonmN1r@r*tN/o`Ydi3/1/#-FW>'3n1^#nC<lnDasZ*uE-C\%,Zaf!at4LuPV5ttnK/"^.3VFdq,3Y;-`&T=[9%H[EKd`5#@a:WC1a%G,.idrFFkRZ0oeT3bI+R%@(Y`-cbj'1nLR4Sd7hiINMON[&*qacfTZT(]cOlJ&iHb,6I@pmg=!h%S-_UV8<T%F61l[-Rl6`qQ=a7lJ#J>8u_:W2PlGgifbg5>%]oG1L/W(jggs5VnP'gG.5qI2cj'rHBGu\ED=aa6r"b/PW*[D"-/VWq,^=>2:(Z^%S@TX!%iP'%,p$,WI2-7P6Z$fU\=Y.@^9WM0:@9)S7sdWd!.&5*&IY.jBbZQBl5!XXF9FFmZg"E5Z?D#X&.6^akjXj4%o6R.oP#K=%/"8_lF7[MO:CfBhq=Jsl*i.3-4JF3m5!9m.A^b;QUeWgrm'k[?TnORi.NRKg`+50\EPp,=PtW:4NGp8oLW;*PAGR^X9WuJnB]n6O%oKhs2+dKcIOBnjXH/>$I<4W>#5<5!h]7%B\LK&TMJpG!9FL'oAME?-8nWr_J();K=QJ?53m!2%<oF3^^G*L$l:ZMu9cMYc9[9!ms%KK-k*2>4W/af2?*j_caM2jdalZ[5FfL6fAq[o#$?'I:QjUAoS!V:Nu%1lMtlXgG'4?bgl6Y^k[&g/9/t%V*^Fd$%S8\?0YlMSsg`%DuM$5_\fuulS-=J-fu*T_ompY:21f((T[Q+1#sgFqFRj-nhT0GP3]?b2Kn7AGcGCp:N@K,=L32<Qs"g;i(C-S99g6E^>._jlQk(j%U2b%4?AFXikG$kuF^R'%,/"K(NE/G.L0!K-009?F=-GNK3<eA62aG4iXF<Y9)$9Q80U7i.#KDA0#gL6Kj&G_T7MH%Ie"V)4kXhr[%@hDN?*fn!Zdd+]-<%#Klbjnt.1B:oJf!4E2"s\8=ZqEpHc%?J/>cU%XnhRUDYoc(#UtC6d.<Ug?^l/^tOra7t)+c3t%a=,Q8Tof0%)==^T2`^d]g!r49V4Akn0RZaT9!SOT1Z0P3JJkqe,Wd\YE@9!@bdQ`2fbIGk7%,,sq,VAnBm*n1C%c&MT/=/h9"gF%#A-&H;XM9$%;!Xq2J_?_ZWHQ63`>tq$@*I/l*RA%S)Q@mFB!n1G]4+D.PF-uX@H[8.n:7W3oXSHe4_knfG$r='-f5EX%bnKUQ:V7,o'OK(3>m$c%2C?16`Z5mpg6'GXAfPp@VSJ-p:<"<AEQ6,1"#DPh)0^=$Oo2%lJb[TgSW#Wa4-M&P%QB=Al4lG=GgoL.*>hki@t`""EH:K_Wb9)G%^EDtBmD,BY="U&7]D?@#?*nYTp?M'_cM]_C-g(tuUl1a)*'"KJ3HmH'gW1G(9OP<b-g)!&Na$Z:F1M]!HlJ99Mk?M$gcK#ZPB-su%Jk"<3/mhOX5$<*>I(0^rY/$$0r66d?17%l1gSjWOQ5t*CD.NqUQUHa$mGTO0#T[!/G?lj%N0Kn/QClZ(>Vco.6q=ul);^Vkk\"at%HEsm,8*_gI-B/]f"8'<hR_j];QrYk?>M7]Xa)[!g.JKA4#Q693LLXH+iXr@k*qCe2T@F6Zoh8<cKO9%*!Gnsk^?P]AjQKA[^`MQh%Wt#+?f%@4)%Uf0>LoV!c?ELO$<<ob'f&5$Y^sh\8ORC<Yk*#Ad!Go4QXuZOs5jA2A*PgfA6?a^UggmIV3gB^"9nfV\@!h/9<=+1Z%Zq6f%^2kGj?KD1Ac%i>>!#9H6Q`D6:dtYRE!oT\To)BC,CbGq%$3IZ*)-9B0mXNk+V^)7bHn'->OoW=#Y&Hu7[bm7Y8clGj-s'!U%M%uP\!+8j=J#WQnQnkQh?mf]`LH'qRg/Sll_r<[V!B[GLS>q+14L>cE!=2nsO`p!k[Mq\;?,03A";#\VgO7#@/n!T0jsdkt>Nr-r%=DfX[b(-lqXNL]+bO)%)117X%FB&Mr07CSb".%gY\S;54gGW,M^fkYl"-slX=*;<!"6HNm=Dj(&eH*i&O/k<L\Wq/7#;!>>:3?O<%5CU_s:FU=9*d*Jkbd7hjlN>^c>9C(_:g=_:MtY(p+g?]JS>S\]%DRsJ:9t1qmKruj5BV9RD@r5IFF%#J^nNu3f*JHq'YS8b<^.I#%QU$K'g$^\Iea+..AHIe[h7HKkZ.SFr'Ni#YF;5-6Q@e"J!eT*Hb,8&9+&%t(\6N1UF0J/@XCCb[.M\'Fdd=bA"dWL2]Li>CYA)f!%s-7tTV_DNKMUrM2_Okc0Fs9G]!"?#*aA33#la0G`Z,#F3S@_m2:>bM=/g.T[76n"rJa)nYYC_>i(BN)9m1YEm4XYH";WZWQ=aV;q%#b/rjHf0ef+%A`tBEM-%jHUC?)V`A]ZLsscUHZZ+#^8RO/gh3blu"35U33h%q0E1H`gs4RX=H9@qN7<5=0@"e4]-I*_m3[BP-%O$%$-"L+I&U0m<c:NDj(Z(cp],ETq__c?4Y,"Cp==2q1H]]Y.WZ8>3'9)MX$KO4Sa4%8@s<%%++3FrhVt*:RE(M4[C:0"'j<E>.-mWO%GU,6,T!N<i4atiOnIs,C[\KF;H7rMtY-$aE4l0ZH[F5V+(A!2.eZ6I4]/KN'HcPjTM8%E><58kk`!1=(Rqh*l>O!`F\8A<g5sEe)%:VtSn@q33SRuM3eo4Gnu?eC:m\<,1@5]HI40E362f6E47QnYcSMepJcVl/8020b*WHTQmMS&KqWXu[<9[Wf&nSn$N>iNOb6&5XS8%iNO^:&@<WaYlD;2#uu;o#^E(FT<_An_f6h(%DsEW`?*QHA?:2M[;^K'.u3h4<08D(EjKiH>Q?@Un,8qCQO@S:2j4u')O8hk_@Veb%><dh(#U2X#m;0+-K=.D562KO+?k_.HC[oT?8\lXb@q$qW;g5Y4GO[^GL7L+KKm9`m#NjJj"?bIT:D=iYch(fh&n&s$Z>5bbf]q#@%'qZSVT\+n2e`RaPKAie9Hh[T%>Adok<B&L*l1FIC01euf\Tk+*2?OTAZ#/Z"CRAo_43ShBr,f5dc#bGsYm!0VY'0`n)":<?B*-\:%1X8+[>/P8K#Z(-YdEjkYnJRq`c.+W&2M;:pRbcV>iY@e6$&+!i]>Der/+_GgY"A#`L7Z^$QE,!f=O9O)PWp(K17FjO:bcKKN<SfP%YK8DM.#k(m<j*MnKHn%[at;(qR2m(=gZYV>3obIten`\K2$G7U7`-rDeBjTlJJ;/Y5tI-9!)N;HQ!JV^ce))#,5u[_f>bE9O+sA5%OW5=K2%gVkPDMW=fkYU.0=FUPFE1q@-0n#8Xm9Z_f2Jd/h-SP1q>cll!N/]3)(m1<GPGW*]9(LT=liuJ<CH6cOsYE(870XdDaS6k%&Dc2,Z3Pb;7$!Vtj7udp?KWL9\o4BPI*rMNpmQ<C"M!FiR#"ebOaZke-Bc.n-2PNT15bKZ(Oan8"oi[9f_)5"B$R;1$XsdX)`?c:%\:_1^_;:@pM;,_mGRjj]pKLQ;[PS-KN*!=N[#V%HFD5,t'=N//f/C)X'#:["K8+V.q0Nj:JZp5?GPQF?"pIfVnfsBZ3.oSdK3R^\%5[`=M_$Ud`rQUXV[R`'#[<ubB^73<<iIX=u"?!7>FjAXgT7GV25o=ImX"_8M-oQUeJ[JsN_h5ZM\T%StRc3dC>o7I>Z8Z/<pW%FY%i)sBMk9Cb>O8OkeW>Oa254Ya17\Im0WgGDTKEhIPB1dk8n8f"ej72t+#!M>L55tM%%+.skFY<X_K=/B2\'lUV##/ti+".P0LHK?u%61s3?p9qe^gWb0g%-l1pNu-=4@Bpi@?K`;(:@>D.W3F]Dn$/n5K%K&I-sbJOI;DmXeGfVOh+P>`Va&cj.q1B+YRC'sKi`q9Tbk5[%$QJMN>hEMrnr7M\RL[oS;`hX!n-+5s$g[5t?J%C3UDFI*DSF&Cq)bqo=LGWd+0bai\'sS^@JfH%_sV5GZQ#?g^4D:_P^Dr<UE>7-%`o\<uE!4k:M2#dOi>NZV:fl7Fq&NRfBFP_gn,f>lpdq4Gen:MULt'<g,%hAZ^K'(Ceq[2W=+(bWJ-b;*MG-WLI[st;#S^`Nl*4]'%.u53G*Y?g`0Diu=9-dT780GS*dKa'*@/:#=h0ZS1puB\HH^RjdM9L[R.GKWK]\]Bo:C<'.V2.)3dmpgR/:RiCFqJl0qO@5grN:+d%\TJZm=r^ahd^[2.5T%2X*Y\ikOkJgC<Me*l*IE4ShL^;AqWB.>/R9V^i7TA^Sknl%^0O/?gH0S:^K:L=Q7bDqRAGBF;ur<O@M?Xt%0E`6fN3ES:&3rls27LmjrM'MR@Q;)BI?jcpNs2pA!"84+H!lN9[ep?dM<BK^=]&1O.hP\5I*'=k2YkjU<cW2D-\%lPWXQe%dh;dM%g/fA34Z."WQj$\iE?<C^oC^XTA"\[<X1t1@;]W^IaQl3,=:Dc1M2'`%<bAg'[%fk:@$uIumlLS9Q8\6")@T+4WA-M_bmbWBZh5WQ%Ih_k1V8sd3CJr#ql@-hl#!N:Ydn:&mT)mE.([49qib;SmDMq*t[D)$7ILf3=rp3XC+D^m/#;F.ATdn]P_=GlA>kEe8ZMPMe$fK+.%k.bZ^U8"aDY?G2Q*'EPEHr&tN:0'Q$%.LO!59Sm3MlI9!Z5G+CDEj,T#WGiRPs#+p!;-Af3d\Z@p22E&?b2!9rnbVRFUm]KNMiP1%&82!1]),fHMUIW0)+!tKEYjRq]b],W(\M0!OfGQ;O\P%Ujej`-P=jjACN0Zp71^,%S-d-?QS"deBT]ic+%FZpI#LL&8!4q0/I:\G%T.tbH?PDJn7GtSQ]%;)CD[I].A5]mj*nFHCAk>\f1!!F)G5>"i?*uNa0fF1j[FtnNBrf;_+Nhe^>[?R#GU'(S@K8XHB,Mr--tZ,>%%sNgAXj`n+3>)BZ4Zhrun+dWGdl0aGP/kFoqa_j-m;S1aB@(;\LS>p=imYN*#q[RsC.s'Fo&E_+%'6cN3;F9`'UE[+b`a>[+j+qa%R0DNdC&4JO5U_*bb'F7L4U0@>Si?A5!")GcjaPWs-!Vt6+TJ0;#1]lCs0+_$$@_cms$UYhZ+aVL.T9]K(51@)Ap6IQhm0JhW`G;b%g<.RpP%K>q<YdI5V't=(Aitrcqa*d)]Z>M!IIT++qIUe`eJ+".-'GBrf;"o-7:7Z*/90M28,co8^]a_C*DFku%>5%A\*FJggNS-T%obYA0N[Y:pr>i$TrUB^Q^O,dqYCHNF+$TVtLO]3]s*TI-%mR=F?17&U+eVUBXJKA*5rRl8=/0MkV*A@+)R647Z/9tl7=<AqZ+p(\%o\1<os86[07GQdJs.B/"[D2Rg='pIUYMXa%mD&\jc0mlGqnlLmrTTfD^4#h>qsQ8QDuX&@jlO)r^AX6(na4Mlrp,XF$Ud2Kk$NW:%Rt(7SYPo&tQ4Id~>%AI9_PrivateDataEnd
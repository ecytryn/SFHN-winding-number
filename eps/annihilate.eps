%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: annihilate.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: cytryn
%%CreationDate: 2016-07-07
%%BoundingBox: 0 0 508 363
%%HiResBoundingBox: 0 0 507.7930 362.8369
%%CropBox: 0 0 507.7930 362.8369
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 7194 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFA8FFFFFFA8FD7AFF7D7DA8FFFF7DA8FD79FF52FFA827A8A87DFD%46FFA8A8A8FD30FF52FF7D527DA852FD28FF7D7DFD1CFFA82752A8FFA8FD%13FFA8FD19FF7DA87D52A87DA8FD27FF7D7D7DA8FD1CFFA8A8FFA87DFD2D%FFA87DA8FFA87DFD26FFA8527DFFA87DFD1FFF5227FD12FFA8A8FD45FF7D%A8FFFFFF7DFD1FFF7D7DFD12FFA8FD45FFA852FFFFFFA87DFD20FFA8FD11%FFA8FD46FF7DFD05FF7DFD20FFA8FD57FFA87DFD05FF7DA8FD1FFF7DFD10%FFA8FD06FFA8FD3FFFA87DFD05FF7DFD1FFFA8A8FD10FFA8FD05FFA8FFA8%FD3EFF7DA8FD05FF7DA8FD1FFF7DFD0FFFA8FD05FFA8FFFFFFA8FD3DFFA8%A8FD05FF7DA8FD1EFFA8A8FD0AFFA8FFA8FFA8FFA8FFA8FFA8FD05FFA8FD%3CFF7DFD06FF7D7DFD1FFFA8FFA8FFA87D527D527D527D527D5252527D7D%7D527D7D7D527D7DFFA8FD3BFF7DA8FD05FF7DA8FD1FFFA8FFFFA8527DFF%A8FD11FFA87D52A8FD3AFFA852A8FD05FFA87DFD1FFFA8FFA852A8FD09FF%A8FD0DFF527DFD38FFA8A87DA8A8FD04FFA87DFD1FFFA8FFFF7DFD09FFA8%FD0FFF52A8FD35FFA8A8A8FF7DFFA8A8FD04FF7DFD1FFFA8FFA87DFD09FF%A8FD04FFA8FD0BFF27FD34FFA8FFFFFFA87DFFFFA8A8FFFFFF7DFD08FFA8%FD0EFFA8FFA87DFFFFFFA8A8FFFF52FD1AFFA852FD30FFA8A8A8FD04FFA8%52FFFFFFA8A8FFFF52A8FD06FFA8A87DFFA8A8A8FD08FFA8F8A8A852FD04%A87D7D52527DFFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8%FFFF52A8A852A8A8FFA8FFFF7D52FF527DFD1FFFA8A8A8FD07FFA87DFD04%FFA8A8FFA87DFD07FFA8FFFD04A8FD08FF525252FF52FFA8FFA8A8FD047D%FD06FFA8FD05FFA8FD0DFF7D7D7D527DFD04A8FF5227A8FFA8FD08FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFD04A8FFA8FFA8FFA8FFA8%A87DFFA8FFA8FFA8A8A87DA8FFA8FFA8FFA8FFA8FD0BFFA87DA87D7D7DA8%FFFFFFA8FFFFFF52A8FD05FFA8FD04FFA8FD0FFF52FD07FF7D7D5252527D%FD17FFA8FFA8A8A8FD0DFF7DA8FD07FFA87D7DA8FD1CFFA8FFFFFFA852FD%1AFF7D7DFD09FFA8FFA8FD10FFA8FFFD07A8FD10FF7DA8FD08FFA87D5252%A8A8FFA8FFA8FD15FFA8FD04FF52A8FFFFFFA8FFFFFFA8FD11FFA852FD13%FFA8A8FD0B7DFD04A8FFA8FD0FFF7DFD0CFFA8FD057DA8FD15FFA8FD04FF%7DA8FFFFA8FD17FF52FD14FF7DA87DA87DA87DA87DA87DA87DA8FD0B7DFF%A8FD06FF7DA8FD11FFA8FD15FFA8FD05FF27FFFFA8FD04FFA8FD12FF7DA8%FD28FFFD04A87D7D7DA8A8FFFFFF7DFD27FFA8A8FD05FFA852A8FD18FF52%FD2EFFA8A87D527DFF7D7DFD28FF7DFD06FFA8277D52FD047DA87DA87DA8%7DA87DFD05A87DA87D7D52A8A8FD31FFA87D7DA8FD27FFA8A8FD06FFA8FF%A8FF7DA87DA87DA87D7D7DA8FD077DA87DA8A8FFFFFFA8FD10FFA87DFD33%A8FFA852A8FD13FF7DFD09FFA8FD18FFA8FD11FF52A8A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8%A8FFA8FFA8FFA8FFA8FFA8FFA8FF52FD14FFA8FD4BFFF8FD0EFFA8A8FD23%FFA8FD05FFA8FD1DFFA8FD27FF52A8FD0DFFA8FD0CFF7D52FD16FFA8FD04%FFA8FD46FFA8FD0EFFA8FD0CFF27F8A8FD15FFA8FD4BFFA8FD0EFF52A8FD%0BFF7D52A8FD10FFFD04A87D7DFD22A87D5252A8FD25FF7DFD0EFF277DFD%1FFFA8FFA8A87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FF527DA8FD25FFA8FD0EFF7DFD23FFA8A8FD7F%FFA8FD25FF7D527DFD22FF7DFF7DA8FD0BFFA8FFFF52FD49FF52FD22FF7D%27A8A852FD0BFFF8A8FF7D7DFD6BFF7D277DA87DFD0AFF7D5252FF7DFD6B%FFA87DFF7DA852FD09FFA87DA87D7D52A8FDFCFFFDFCFFFDFCFFFDFCFFFD%DFFFA85227FFFF7DA8FD79FF7DA87D52A8A87DFD79FF52FF52A827FF52FD%46FFA87DA8A8FD2FFF52FF527D7DFF52A8FD27FF527DFD1CFFA82752FD30%FF7D7DA852A87D7DFD19FFA8FD0CFFA852A852A8FD1CFFA8A8FFA852FD13%FFA8FD1AFFA8FFFFFFA8FD18FF7DA8FD0DFF52FFFFA87DFD1FFF5252FD12%FFA8FD37FFA8527DFD0CFF52FFFFFFA87DFD1FFFA852FD11FFA8FD38FF52%FF7DFD0BFF7D7DFD04FF52FD1FFFA8A8FD49FFA87DFF7DA8FD0AFF7DA8FD%04FF7DA8FD1FFF7DFD11FFA8FD38FF7DFF7DA8FD0AFF52FD05FF7DFD20FF%A8FD10FFA8FD05FFA8FD32FFA87DFFA87DFD09FF7D7DFD05FF7DA8FD1FFF%7DFD0FFFA8FD05FFA8FFFFFFA8FD2FFFA87DFFA87DFD09FFA87DFD05FF7D%A8FD1FFFA8A8FD13FFA8FD05FFA8FD2EFF7D7DFFA87DFD09FF7DA8FD05FF%7DA8FD1FFFA8FFA8FFFFFFFD06A87DA87DA87DA87DA87D7DA8A8A8FFFFFF%A8FD2DFFA87DFFA87DFD09FF7DA8FD05FF7DA8FD1FFFA8FFFFFD0D7DA87D%A8FD067D527DA8FD2EFF7DA8FFA852FD09FF52FD06FFA87DFD1FFFA8FF52%7DA8FD09FFA8FD0BFF7D7D52FD2DFF7D7DFFA87DFD08FFA87D7DFD05FFA8%7DFD1EFFA8A8FF7DA8FD0FFFA8FD08FF7D52FD2CFF7DA8FFA852FD07FF7D%FF52FF7DFD04FFA852FD1FFF7DFF7D7DFD0AFFA8FFFFFFA8FD0AFF7D7DFD%2BFF7DA8FFA87DFD05FFA8A8FFFF7DFFFFA8FFFFFFA87DFD0AFFA8FD13FF%A8A8FFFF52A8FD19FF7DA8FD2AFF52A8FFFF7DFFFFFFA8A8A8FFFFFF52FF%FFFF7DFFFFFF52FD07FFA8A87DFD15FF7DFFFFA852FD047DA87DA87DA87D%A87D7D7DA87DA8FD077DA87D52FD2AFF7DFFFFFF7DA8A8A8FD05FFA87DFD%04FF7DFFFF7DA8FD07FFA8FFFFFFA8A8FD11FFA8FD04FFFD04A87DA87D7D%7DA8A8A87DA87DA87DFD07A87D7DF8A8FD15FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFFFFF52FFA8A852A8A8FFA8FFA8FFFFA852FFA8FFFFFF7D%FFA852FFFFA8FFA8FFA8FFA8A87DA87DFD11FFA8FFFFFFA8FFFFA8FD067D%527D52FD057D527D527D527D7D7D527D52FD18FFA8FFFFFFA8FFFFFFA8FD%05FFA8FF7D52A8FFA87DA8FFA8FFFFFFA8FF7D7DFD06FFA8FF52A8FFFFA8%FFFFFFA8FD16FFA8FD04FFA87D7DA87DA87DA8A8FFA8A8A8FFA8FFA8FFA8%FFA8FFA8FFA8FFFF52A8FD22FFFD05A87D7DFFFFFF52FD08FFA87DFD07FF%A8A827A8FD1CFFA8FD04FF527DFFFFFFA8FD15FF7D7DFD1DFFA8FFA8FFA8%FD04FFA852FD04FF7DA8FD07FF7DA8FD09FFA852527DA87DFFA8FD15FFA8%A8FD04FF7DA8FD08FFA8FD11FF52FD13FFA8527DFD045227FD04527D527D%527D527D52FD05FF7D7DFD07FF7DA8FD0BFFA8A87D7D527D7DFD15FF7DFD%04FFA852FFFFFFA8FFFFFFA8FD12FF7DA8FD14FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FD09FF527DFD06FF52FD27FFA8A8FD05FF52A8FD19FF52A8FD%2DFF7D5252A8FFFFA87DFD28FF7DFD05FFA8527DFD17FF7D52A8FD2FFFA8%527DFFA87DFD28FFA8FD06FFA87D527D7D7D52A8FD077DA87DA87DA8FD04%7D527DFD33FF7D5252FD29FFA8FD07FFA8FFFD04A87DA87DA87DA87DA87D%A87DA87DA87DA8A8FFFFFFA8FD12FF27FD1EA8FFFD16A827FD14FFA8FD06%FFA8FFA8FD19FFA8FD11FF7DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8A8FD14FFA8FD05FFA8FD1DFFA8FD5AFFA8A8FD67FFA852A8FD%15FF7DFD67FFA852FD16FFA8FD67FFA8FD12FFA87DA8A8A87DA8A8A87DA8%A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A8%F8527DFD56FFA8FFA8A8FD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFA8A8A8FD5AFF7DFD25FF7DA8A8FD7EFF52%A8FD7EFFA8FDFCFFFD09FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2016-05-30T16:24:18-07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>184</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6hF+YmqaX5Ou/PNw0N9J&#xA;ql7dJa6PdXc1ssVtYyTxQwWcUNtePLO6wmSSqCpJqwVAAqn+h+Y7lvPdtapLNJpfmjRf05bW87F2&#xA;tZrdoIpEQ1PGOVLlDw6B1Yj7WKs6xV2KuxV2KuxV2KuxV2KuxVSvLy0srWW7vJ47a1hUvNPMyxxo&#xA;o6szsQAPnirVle2d9axXllPHdWk6h4biF1kjdT0ZXUlWHyxVWxV2KuxV2KuxV2KsY8yfmFoXlzWb&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>531.500000</stDim:w>
            <stDim:h>376.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Italic</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>7.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>7.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -362.837 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 362.837 li
507.793 362.837 li
507.793 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.9 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
312.992 79.1504 mo
340.173 79.1504 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
@
331.112 77.3506 mo
338.313 79.1504 li
331.112 80.9512 li
331.112 79.1504 li
331.112 77.3506 li
331.112 77.3506 li
cp
0 0 0 1 cmyk
ef
331.112 77.3506 mo
338.313 79.1504 li
331.112 80.9512 li
331.112 79.1504 li
331.112 77.3506 li
331.112 77.3506 li
cp
.75021 .679683 .670222 .90164 cmyk
@
482.192 80.0508 mo
455.013 80.0508 li
@
464.072 81.8506 mo
456.813 80.0508 li
464.072 78.251 li
464.072 80.0508 li
464.072 81.8506 li
464.072 81.8506 li
cp
0 0 0 1 cmyk
ef
464.072 81.8506 mo
456.813 80.0508 li
464.072 78.251 li
464.072 80.0508 li
464.072 81.8506 li
464.072 81.8506 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdup 50 /two putdup 65 /A putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/A <1C60D8A8C9B6079F62C6D57D72D2FDC86536E7494191A9E3EF5795EA6903BA675EF967E5503E0F9461713975E8624582E6F3E1510A5F9E0950EED4A1914451FF9474C0941D0A3186503138F0BEB96FF6EFEC76335DF56A27FA8C5F2C635C83D312D7641D3D9117C2751F2FA7BAFB4320347730B8D3EA674CFE35F91CDC44A8C704B1ABB766598584B2E79C7046CDCE3C> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DOOUQZ+Times-Roman /Times-Roman findfont ct_VMDictPut/DOOUQZ+Times-Roman*1 [49{/.notdef}rp /one /two 14{/.notdef}rp /A 190{/.notdef}rp]DOOUQZ+Times-Roman nfDOOUQZ+Times-Roman*1 [18 0 0 -18 0 0 ]msf485.794 86.3555 mo(A2)[12.999 0 ]xsh289.294 84.5508 mo(A1)[12.999 0 ]xsh0 0 0 .4 cmyk
%ADOBeginSubsetFont: Times-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Italic def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 99 /c putdup 105 /i putdup 114 /r putdup 116 /t putdef/FontBBox {-296 -413 1661 1205} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/.notdef <1C60D8A8C9B7D8BE1853B203EFE351B1CDFA12DF07B00368C22E31EFC3300D63209ED6> |-/c <1C60D8A8C9B77FE2CED306AAE853DF6763ABBC1F195078D45F35AC812BA176B02CD229DD186FFB355299AFEDCDA3C3E7A2BBB8C0138FFC2F675F24D8A1A2064E210ACB5567CC4FF99B2DB190FFC6CD745653327D6267B9720C3E2FAD72FF086DC8533109E5D3541C360CBF9F8DE6E15D008E77916480B96C5C762C587981712A1AA76B3128B5597081D3A484E43F2332F97E00EB8CA70E92480D1BBD05BF5279454393B0CF9B35A14103B3932D2CBA> |-/i <1C60D8A8C9B854D0F4594DE2CB230C00D72A8CCCE2ED8277F493FC10530BA725C23B7C5D26CC1DD529FAE26E52F10603EC22FA434A5EF589284E8D896B14DE3C8E9013A43C0BFBD48FDBD41845BD7C76773CBE6AD8D328F71F5EB664393E92995FCC5BC5635E470649C6BA303A1FC97AF04ACCD05A0991A8BEF1CC5D25BC2BAAD39CE1C6888E27BDA0C5DAD2B2DEF6529C8F477FC2CD60CCFB7D1E5F121F78DD2D61A9BDDDD66832C06CF970B6465E11B9DBFFCA3559D4996DEEC891508DB90A89509F3CB209B732203D177FEE5740FB955889645019ADCD680F1EA155C06327806A2C9546A05C56> |-/r <1C60D8A8C9B7361F02D124CF813383046F2E8E102865649E6346E4AE00EBDF515A44A89A952E4A085F5634D3864EE4305B5BF07B55A1EC09E637E7C6830A233BE67AAA815B678D0618ADF7BD82493E4D59F1DACCF465098FD3F8BD765B585BD1D189A5879A6D0BD585C0269FF295E67AEA1F4AB3642251674DA678FE7C86B5D0D3081506FDE935D99DD3ADBB2CD2B97FA0322E9B7CEEFBB873657461EE464C5A1554D8159FFAB5C6676C33746E9EBE4DCF40F31CC622EB1934B2A10A990B6694C7BEAEAE21B9834F16488EEFAE51397E84ECDE> |-/t <1C60D8A8C9B854D0B361E19027CEEF8FD2D54396C85DA9E4D75EBDBD81F1AC8D8D89CCB529371905FB88E8C672DA56CE6373C5F306F6D800C6421BB3535C1CE57B1054E3952FAF7BB933B92222380068B94C8250FB2A82AD2B50FD6BCE69676A831CBBDA1AD9AF95D0F1273C57F4D28940817AB24D70E2917B660D827A327D57C68FF29FBDAD6D47C886C83040C9E0139F754E6CDC6055994C4C5FB073D2E9DCCD2C2CC51F29C870D78E88085143EF> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DOOURA+Times-Italic /Times-Italic findfont ct_VMDictPut/DOOURA+Times-Italic*1 [99{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]DOOURA+Times-Italic nfDOOURA+Times-Italic*1 [11 0 0 -11 0 0 ]msf242.177 84.1289 mo(cri)sh254.396 84.1289 mo(t)sh%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOURA+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/w <1C60D8A8C9B64EDFFAB0865A2DAC7FE6E4C75B01D0A0D9B989BB217E5398ABF336A838BE21848110157A1AD3740E0ECAFF96E272FB9DF387D0EA17059F22282913FE19ECECA6068C516E160CD4A6C60648DE83EF52D186805E8A3AA9C2D2C7CD62DA5E2BE93DE2A9086D5E82617301EBC29B2B9254AED7AD4A395D5754873A0F8F45A58D879C49D9B692EDF2E4265589D5DF8BB8CBE963E56034ECCACDF5A04B11EBD4B8D27BECAB3AD761FAB7477C85FE0D8F1221F8F43125130A101FE3592DE8F482C50AFBCAC302D42E5972A69B94978A33C15BA4B701AE011DECC7102AEB101E174592628325A28F35BA0FBCBE8F037C4C0DCBF46F9D99B94B0BC5C4B020DD51746D8F3AE94C6D68B3CCE8F9AFFF5EA126AD528CD69A0565BDC7773DA5F0> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOURA+Times-Italic /Encoding getdup 119 /w putpop%ADOEndSubsetFont
/DOOURA+Times-Italic*1 [99{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t 2{/.notdef}rp /w 136{/.notdef}rp]DOOURA+Times-Italic nfDOOURA+Times-Italic*1 [18 0 0 -18 0 0 ]msf231.755 80.6836 mo(w)sh246.373 118.951 mo
246.373 120.176 245.378 121.171 244.152 121.171 cv
242.927 121.171 241.933 120.176 241.933 118.951 cv
241.933 117.725 242.927 116.73 244.152 116.73 cv
245.378 116.73 246.373 117.725 246.373 118.951 cv
246.373 118.951 li
cp
0 0 0 1 cmyk
ef
.45 lw
246.373 118.951 mo
246.373 120.176 245.378 121.171 244.152 121.171 cv
242.927 121.171 241.933 120.176 241.933 118.951 cv
241.933 117.725 242.927 116.73 244.152 116.73 cv
245.378 116.73 246.373 117.725 246.373 118.951 cv
246.373 118.951 li
cp
.75021 .679683 .670222 .90164 cmyk
@
32.0522 118.951 mo
32.0522 120.176 31.0576 121.171 29.8325 121.171 cv
28.6069 121.171 27.6123 120.176 27.6123 118.951 cv
27.6123 117.725 28.6069 116.73 29.8325 116.73 cv
31.0576 116.73 32.0522 117.725 32.0522 118.951 cv
32.0522 118.951 li
cp
0 0 0 1 cmyk
ef
32.0522 118.951 mo
32.0522 120.176 31.0576 121.171 29.8325 121.171 cv
28.6069 121.171 27.6123 120.176 27.6123 118.951 cv
27.6123 117.725 28.6069 116.73 29.8325 116.73 cv
31.0576 116.73 32.0522 117.725 32.0522 118.951 cv
32.0522 118.951 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
30.8125 118.811 mo
244.592 118.811 li
@
.9 lw
181.592 146.65 mo
181.592 119.471 li
@
183.393 137.591 mo
181.592 144.791 li
179.792 137.591 li
181.592 137.591 li
183.393 137.591 li
183.393 137.591 li
cp
0 0 0 1 cmyk
ef
183.393 137.591 mo
181.592 144.791 li
179.792 137.591 li
181.592 137.591 li
183.393 137.591 li
183.393 137.591 li
cp
.75021 .679683 .670222 .90164 cmyk
@
120.992 146.65 mo
120.992 119.471 li
@
119.192 128.531 mo
120.992 121.271 li
122.792 128.531 li
120.992 128.531 li
119.192 128.531 li
119.192 128.531 li
cp
0 0 0 1 cmyk
ef
119.192 128.531 mo
120.992 121.271 li
122.792 128.531 li
120.992 128.531 li
119.192 128.531 li
119.192 128.531 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
29.7925 84.4102 mo
241.232 84.4102 li
0 0 0 .4 cmyk
@
2 lw
230.313 96.5508 mo
230.252 96.5508 li
230.072 96.5508 li
229.592 96.5508 li
228.752 96.5508 li
227.612 96.4902 li
226.232 96.4902 li
224.672 96.4307 li
223.172 96.3711 li
221.732 96.3105 li
220.353 96.251 li
219.152 96.1914 li
218.012 96.0703 li
216.992 95.9512 li
216.092 95.8301 li
215.192 95.7109 li
214.353 95.5313 li
213.452 95.3506 li
212.492 95.1113 li
211.532 94.8105 li
210.572 94.5107 li
209.612 94.1504 li
208.652 93.7305 li
207.692 93.3105 li
206.732 92.8906 li
205.772 92.4102 li
204.933 91.9307 li
204.092 91.4512 li
203.252 90.9707 li
202.472 90.4902 li
201.752 90.0107 li
201.032 89.4707 li
200.313 88.9902 li
199.532 88.3906 li
198.752 87.791 li
197.972 87.1914 li
197.192 86.4707 li
196.353 85.8105 li
195.512 85.0313 li
194.672 84.3105 li
193.893 83.5313 li
193.052 82.8105 li
192.272 82.0313 li
191.492 81.251 li
190.712 80.4707 li
190.052 79.751 li
189.333 79.0313 li
188.552 78.3105 li
187.833 77.4707 li
186.992 76.6309 li
186.152 75.791 li
185.313 74.8906 li
184.472 73.9902 li
183.632 73.0908 li
182.792 72.251 li
182.012 71.3506 li
181.232 70.5703 li
180.452 69.791 li
179.732 69.0107 li
179.072 68.3506 li
178.413 67.6914 li
177.572 66.8506 li
176.732 66.0107 li
175.952 65.2305 li
175.112 64.5107 li
174.272 63.791 li
173.433 63.1914 li
172.652 62.6504 li
171.873 62.1709 li
171.152 61.8105 li
170.433 61.5703 li
169.772 61.4512 li
169.112 61.3906 li
168.452 61.4512 li
167.792 61.5703 li
167.132 61.8105 li
166.413 62.1113 li
165.632 62.5313 li
164.853 63.0107 li
164.072 63.5508 li
163.292 64.0908 li
162.512 64.6914 li
161.792 65.2305 li
161.072 65.8301 li
160.292 66.4307 li
159.632 66.9102 li
158.972 67.3906 li
158.252 67.9307 li
157.532 68.4707 li
156.752 69.0107 li
155.913 69.5508 li
155.072 70.1504 li
154.232 70.6914 li
153.393 71.2305 li
152.552 71.7109 li
151.712 72.251 li
150.873 72.6709 li
150.092 73.1504 li
149.313 73.5703 li
148.592 73.9307 li
147.873 74.291 li
147.092 74.6504 li
146.252 75.0703 li
145.413 75.4902 li
144.452 75.8506 li
143.433 76.3301 li
142.353 76.751 li
141.212 77.2305 li
140.012 77.7109 li
138.813 78.1914 li
137.492 78.6709 li
136.172 79.1504 li
134.792 79.6914 li
133.353 80.2305 li
131.853 80.7705 li
130.833 81.1309 li
129.813 81.4902 li
128.732 81.8506 li
127.592 82.2705 li
126.452 82.6914 li
125.192 83.1113 li
123.873 83.5313 li
122.492 84.0107 li
121.052 84.4307 li
119.552 84.9102 li
117.992 85.4512 li
116.373 85.9307 li
114.752 86.4102 li
113.012 86.8906 li
111.333 87.3711 li
109.592 87.9102 li
107.792 88.3906 li
106.052 88.8105 li
104.252 89.291 li
102.452 89.7109 li
100.712 90.1914 li
98.9126 90.5508 li
97.1123 90.9707 li
95.3125 91.3301 li
93.5723 91.6914 li
91.7124 92.0508 li
90.1523 92.3506 li
88.5322 92.6504 li
86.8525 92.9512 li
85.1724 93.1914 li
83.3726 93.4902 li
81.5122 93.7305 li
79.5322 94.0313 li
77.4922 94.2705 li
75.3325 94.5703 li
72.9922 94.8711 li
70.5923 95.1113 li
68.0122 95.4102 li
65.3125 95.7109 li
62.4922 96.0107 li
59.5522 96.3711 li
56.5522 96.6709 li
53.5522 96.9707 li
50.5522 97.2705 li
47.6123 97.5703 li
44.8525 97.8105 li
42.2725 98.0508 li
39.9326 98.291 li
37.9521 98.4707 li
36.3325 98.6504 li
35.0723 98.7705 li
34.1724 98.8301 li
33.5723 98.8906 li
33.2124 98.9512 li
33.0923 98.9512 li
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOUQZ+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/x <1C60D8A8C9B7A73DEDECC69E6246293D06B267518C0F91E6480EDF632942FD353DCF28B6B327B0B65505E89AB448713A200476CDDC469BBFD72DCEEBD9B470EEF4D42688A9EDE15B6BB099C49A3B3B4F5BDDE740C693534E32D0F7EF88D7C9A5FE566275D3DD8A5DDEA6434DE248A79A37FD000B25AF4BA35E42FE2DB605EBE09D6A8C305BCA5E3D6D3005033B8F0013F25BF0E8CD348B80D0C04A9B817C42D2C65C0276E59537E7C97C2FC289210B275F5A612942FCCB309DD076CA67C4D8D3F07B8A974663CD719C2C66B1C5ECF95FFB7C657E2090F6B2DD4D8028FADB4D277AB24C47867D78CEE3F7806B4CC4E10A910E37D480CF> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOUQZ+Times-Roman /Encoding getdup 120 /x putpop%ADOEndSubsetFont
/DOOUQZ+Times-Roman*1 [49{/.notdef}rp /one /two 14{/.notdef}rp /A 54{/.notdef}rp /x 135{/.notdef}rp]DOOUQZ+Times-Roman nfDOOUQZ+Times-Roman*1 [18 0 0 -18 0 0 ]msf231.567 136.09 mo(x)sh170.794 164.645 mo(A2)[12.999 0 ]xsh110.192 164.645 mo(A1)[12.999 0 ]xsh241.712 97.0908 mo
241.652 97.0908 li
241.413 97.0908 li
240.813 97.0908 li
239.853 97.0908 li
238.532 97.0313 li
237.032 97.0313 li
235.472 96.9707 li
233.972 96.9707 li
232.592 96.9102 li
231.333 96.8506 li
230.132 96.791 li
228.992 96.6709 li
227.913 96.6113 li
226.833 96.4902 li
225.873 96.3711 li
224.853 96.251 li
223.833 96.0703 li
222.752 95.8906 li
221.612 95.7109 li
220.472 95.4707 li
219.333 95.1709 li
218.132 94.8711 li
216.992 94.5703 li
215.853 94.2109 li
214.772 93.791 li
213.692 93.3711 li
212.732 92.9512 li
211.833 92.4707 li
210.933 91.9902 li
210.152 91.4512 li
209.373 90.9102 li
208.592 90.3105 li
207.873 89.5908 li
207.152 88.8711 li
206.433 88.0313 li
205.772 87.1309 li
205.112 86.1709 li
204.512 85.0908 li
203.913 84.0107 li
203.373 82.8105 li
202.893 81.6113 li
202.413 80.4102 li
201.992 79.0908 li
201.572 77.8301 li
201.212 76.5107 li
200.913 75.1309 li
200.672 73.9902 li
200.433 72.791 li
200.192 71.5313 li
199.952 70.2109 li
199.772 68.8301 li
199.532 67.3906 li
199.353 65.9512 li
199.172 64.3906 li
198.933 62.8906 li
198.752 61.3301 li
198.632 59.7705 li
198.452 58.2705 li
198.333 56.7705 li
198.152 55.2705 li
198.032 53.8906 li
197.913 52.5703 li
197.853 51.251 li
197.732 50.0508 li
197.672 48.9102 li
197.552 47.8301 li
197.492 46.5107 li
197.373 45.251 li
197.313 44.0508 li
197.252 42.8506 li
197.132 41.6504 li
197.072 40.5107 li
197.012 39.4307 li
196.952 38.3506 li
196.893 37.3301 li
196.772 36.3105 li
196.712 35.4102 li
196.652 34.5107 li
196.592 33.6709 li
196.532 32.8906 li
196.413 32.1113 li
196.353 31.3301 li
196.292 30.4902 li
196.172 29.5908 li
196.052 28.6914 li
195.933 27.7305 li
195.752 26.7705 li
195.632 25.8105 li
195.452 24.8506 li
195.272 23.9512 li
195.092 23.0508 li
194.913 22.2109 li
194.732 21.4307 li
194.552 20.7109 li
194.373 19.9902 li
194.192 19.3906 li
193.952 18.6113 li
193.652 17.8906 li
193.353 17.1709 li
192.992 16.5703 li
192.632 16.0313 li
192.272 15.6113 li
191.913 15.3105 li
191.552 15.0703 li
191.132 14.9512 li
190.772 14.8906 li
190.413 14.9512 li
189.933 15.0703 li
189.452 15.251 li
188.972 15.5508 li
188.373 15.9102 li
187.772 16.3301 li
187.112 16.8105 li
186.452 17.3506 li
185.732 17.8301 li
185.012 18.4307 li
184.472 18.791 li
183.873 19.2109 li
183.272 19.6914 li
182.612 20.2305 li
181.952 20.7705 li
181.232 21.4307 li
180.452 22.0908 li
179.732 22.8105 li
179.012 23.5908 li
178.292 24.3711 li
177.632 25.2109 li
177.032 26.1113 li
176.433 27.0107 li
175.833 27.9707 li
175.413 28.751 li
175.052 29.5908 li
174.632 30.4902 li
174.212 31.4512 li
173.853 32.4707 li
173.492 33.4902 li
173.072 34.6309 li
172.712 35.7705 li
172.413 36.9102 li
172.052 38.1113 li
171.752 39.3105 li
171.512 40.4512 li
171.212 41.5908 li
170.972 42.7305 li
170.792 43.8105 li
170.612 44.8301 li
170.433 45.8506 li
170.313 46.8105 li
170.132 47.8906 li
170.012 48.9707 li
169.893 49.9902 li
169.772 51.1309 li
169.652 52.2109 li
169.592 53.3506 li
169.472 54.4902 li
169.413 55.6914 li
169.353 56.8906 li
169.292 58.0313 li
169.232 59.2305 li
169.172 60.3711 li
169.112 61.5703 li
169.052 62.7109 li
168.933 63.8506 li
168.873 65.0508 li
168.813 66.0703 li
168.692 67.2109 li
168.632 68.4102 li
168.512 69.6113 li
168.393 70.8711 li
168.272 72.251 li
168.152 73.6309 li
168.032 75.0703 li
167.853 76.5107 li
167.732 77.9512 li
167.552 79.4512 li
167.433 80.8906 li
167.252 82.3301 li
167.132 83.7109 li
166.952 85.0313 li
166.833 86.3506 li
166.712 87.6709 li
166.532 88.9307 li
166.413 90.1309 li
166.232 91.3906 li
166.112 92.6504 li
165.933 93.9102 li
165.813 95.2305 li
165.632 96.4902 li
165.452 97.8105 li
165.272 99.0703 li
165.092 100.33 li
164.913 101.531 li
164.732 102.73 li
164.492 103.811 li
164.313 104.83 li
164.132 105.851 li
163.893 106.751 li
163.712 107.531 li
163.532 108.311 li
163.292 109.031 li
163.052 109.751 li
162.813 110.41 li
162.512 111.011 li
162.212 111.611 li
161.913 112.091 li
161.552 112.57 li
161.192 112.99 li
160.833 113.351 li
160.472 113.65 li
160.112 113.83 li
159.692 114.011 li
159.272 114.131 li
158.913 114.191 li
158.492 114.191 li
158.132 114.131 li
157.712 114.07 li
157.172 113.891 li
156.632 113.591 li
155.972 113.291 li
155.313 112.931 li
154.592 112.451 li
153.813 111.971 li
153.032 111.431 li
152.252 110.891 li
151.413 110.41 li
150.572 109.871 li
149.732 109.391 li
148.952 108.971 li
148.292 108.611 li
147.572 108.311 li
146.853 107.951 li
146.072 107.65 li
145.172 107.291 li
144.272 106.99 li
143.252 106.691 li
142.232 106.33 li
141.092 106.031 li
139.893 105.73 li
138.692 105.431 li
137.433 105.131 li
136.112 104.83 li
134.732 104.591 li
133.353 104.291 li
131.913 104.051 li
130.893 103.871 li
129.813 103.691 li
128.732 103.511 li
127.532 103.271 li
126.333 103.091 li
125.012 102.91 li
123.632 102.73 li
122.132 102.49 li
120.632 102.311 li
119.012 102.07 li
117.393 101.891 li
115.652 101.711 li
113.913 101.471 li
112.112 101.291 li
110.252 101.111 li
108.393 100.931 li
106.532 100.751 li
104.612 100.57 li
102.752 100.451 li
100.833 100.33 li
98.9126 100.15 li
96.9326 100.031 li
94.9521 99.9102 li
92.9722 99.8506 li
91.4722 99.7305 li
89.9126 99.6709 li
88.2925 99.6113 li
86.6123 99.5508 li
84.9326 99.4902 li
83.1323 99.4307 li
81.2124 99.4307 li
79.2324 99.3711 li
77.1323 99.3105 li
74.9126 99.3105 li
72.5723 99.251 li
70.1123 99.1914 li
67.4722 99.1914 li
64.7725 99.1309 li
61.8926 99.1309 li
58.9521 99.1309 li
55.9521 99.0703 li
52.8926 99.0703 li
49.8325 99.0107 li
46.8926 99.0107 li
44.0122 99.0107 li
41.3125 99.0107 li
38.8525 99.0107 li
36.6924 98.9512 li
34.8325 98.9512 li
33.3325 98.9512 li
32.1924 98.9512 li
31.3525 98.9512 li
30.8125 98.9512 li
30.5122 98.9512 li
30.3926 98.9512 li
0 0 0 .909851 cmyk
@
1 lw
342.398 79.4644 mo
449.738 79.4644 li
0 0 0 .25 cmyk
@
305.133 138.49 mo
479.133 138.49 li
.75021 .679683 .670222 .90164 cmyk
@
468.933 136.691 mo
477.032 138.49 li
468.933 140.291 li
468.933 138.49 li
468.933 136.691 li
468.933 136.691 li
cp
0 0 0 1 cmyk
ef
.9 lw
468.933 136.691 mo
477.032 138.49 li
468.933 140.291 li
468.933 138.49 li
468.933 136.691 li
468.933 136.691 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
325.712 15.1309 mo
325.712 150.251 li
@
323.912 25.3301 mo
325.712 17.1709 li
327.513 25.3301 li
325.712 25.3301 li
323.912 25.3301 li
323.912 25.3301 li
cp
0 0 0 1 cmyk
ef
.9 lw
323.912 25.3301 mo
325.712 17.1709 li
327.513 25.3301 li
325.712 25.3301 li
323.912 25.3301 li
323.912 25.3301 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOURA+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/v <1C60D8A8C9B77FE2C1A754606E11446669EB88AA334E5F3B6D965A8ED701B036229DB5EBDDE6B935BCE3F66F4D9FFE0CDA8564D56F119D4E8BAC84EC6FD74D5F688F93D3C535AED4F795BD797833B416F17640B483FEA92F84680B0E02EE70EA76740C57FB0DCABF0436121561529ACAD441485D5EA7DBF73E6EBE89B58057E6BC80EE1287C37EA53D3DA5C1251D7190FEF062DACD77313626BDA5D066E4CA4B06E58F5108EAF83B066EA29BBA4663677A2E3D211DBBEAAC86400A5F61B11194> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOURA+Times-Italic /Encoding getdup 118 /v putpop%ADOEndSubsetFont
/DOOURA+Times-Italic*1 [99{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t /.notdef /v /w 136{/.notdef}rp]DOOURA+Times-Italic nfDOOURA+Times-Italic*1 [18 0 0 -18 0 0 ]msf478.411 153.902 mo(v)shDOOURA+Times-Italic*1 [18 0 0 -18 0 0 ]msf307.349 18.7852 mo(w)sh1 lw
346.238 132.064 mo
407.139 14.5244 li
0 0 0 .4 cmyk
@
323.438 25.2642 mo
323.499 25.3843 li
323.559 25.6841 li
323.799 26.2842 li
324.099 27.1841 li
324.519 28.5044 li
325.059 30.1841 li
325.778 32.3442 li
326.679 34.8643 li
327.639 37.8643 li
328.839 41.2241 li
330.099 44.9443 li
331.479 48.9644 li
332.979 53.1646 li
334.599 57.5444 li
336.219 62.0444 li
337.839 66.6045 li
339.519 71.0444 li
341.259 75.4844 li
342.879 79.8042 li
344.559 83.8843 li
346.179 87.8442 li
347.738 91.5645 li
349.299 95.0444 li
350.799 98.2842 li
352.238 101.224 li
353.619 103.924 li
354.999 106.384 li
356.259 108.604 li
357.579 110.524 li
358.778 112.205 li
359.979 113.584 li
361.179 114.784 li
362.318 115.744 li
363.459 116.404 li
364.539 116.884 li
365.679 117.185 li
366.759 117.185 li
367.898 117.004 li
368.979 116.645 li
370.179 116.104 li
371.318 115.264 li
372.519 114.304 li
373.719 113.165 li
374.979 111.784 li
376.238 110.284 li
377.499 108.544 li
378.759 106.744 li
380.079 104.705 li
381.398 102.544 li
382.719 100.264 li
384.099 97.8643 li
385.479 95.3442 li
386.919 92.7046 li
388.299 90.0044 li
389.738 87.2441 li
391.179 84.3643 li
392.619 81.5444 li
394.059 78.6646 li
395.499 75.7842 li
396.999 72.9043 li
398.438 70.0845 li
399.879 67.2642 li
401.318 64.5645 li
402.759 61.9243 li
404.139 59.3442 li
405.519 56.9443 li
406.898 54.6045 li
408.278 52.3843 li
409.658 50.3442 li
410.979 48.4243 li
412.299 46.6841 li
413.559 45.1245 li
414.879 43.7446 li
416.139 42.4844 li
417.398 41.4644 li
418.599 40.6245 li
419.858 39.9644 li
421.059 39.5444 li
422.198 39.3042 li
423.398 39.2446 li
424.599 39.4243 li
425.799 39.8442 li
426.999 40.4443 li
428.259 41.2842 li
429.519 42.3643 li
430.839 43.6841 li
432.219 45.2446 li
433.599 47.0444 li
435.039 49.0845 li
436.479 51.4243 li
438.039 54.0044 li
439.658 56.8242 li
441.278 59.8843 li
443.019 63.1841 li
444.759 66.7241 li
446.559 70.4443 li
448.419 74.4043 li
450.278 78.4844 li
452.198 82.7441 li
454.059 87.0044 li
455.919 91.3242 li
457.719 95.6445 li
459.519 99.8442 li
461.198 103.924 li
462.759 107.705 li
464.198 111.304 li
465.519 114.544 li
466.658 117.364 li
467.619 119.824 li
468.398 121.864 li
469.059 123.544 li
469.539 124.744 li
469.898 125.645 li
470.078 126.185 li
470.198 126.484 li
470.259 126.604 li
@
1.8 lw
407.673 111.551 mo
409.532 111.611 li
411.452 111.611 li
413.433 111.671 li
415.353 111.671 li
417.332 111.73 li
419.372 111.791 li
421.412 111.791 li
423.452 111.851 li
425.492 111.851 li
427.532 111.851 li
429.572 111.851 li
431.612 111.851 li
433.652 111.791 li
435.572 111.73 li
437.492 111.671 li
439.353 111.551 li
441.152 111.431 li
442.893 111.311 li
444.572 111.131 li
446.133 110.951 li
447.572 110.711 li
448.952 110.471 li
450.212 110.171 li
451.412 109.871 li
452.492 109.511 li
453.513 109.091 li
454.412 108.73 li
455.192 108.251 li
456.032 107.65 li
456.752 107.051 li
457.353 106.33 li
457.893 105.551 li
458.313 104.711 li
458.673 103.871 li
458.912 102.91 li
459.093 101.891 li
459.152 100.751 li
459.093 99.6709 li
459.032 98.4707 li
458.853 97.2109 li
458.553 96.0107 li
458.252 94.6914 li
457.893 93.4307 li
457.473 92.1113 li
457.053 90.791 li
456.513 89.5313 li
456.032 88.2109 li
455.492 86.9512 li
454.952 85.6914 li
454.353 84.4307 li
453.813 83.2305 li
453.272 82.0313 li
452.612 80.6504 li
452.013 79.3301 li
451.353 77.9512 li
450.633 76.6309 li
449.973 75.251 li
449.192 73.8105 li
448.412 72.4307 li
447.572 71.0508 li
446.673 69.6709 li
445.712 68.291 li
444.752 66.9102 li
443.732 65.6504 li
442.652 64.3906 li
441.513 63.1914 li
440.372 62.0508 li
439.173 60.9707 li
437.912 60.0107 li
436.652 59.1113 li
435.332 58.2705 li
433.952 57.4902 li
432.513 56.8301 li
431.072 56.2305 li
429.813 55.751 li
428.553 55.3906 li
427.232 54.9707 li
425.853 54.6709 li
424.353 54.3711 li
422.853 54.0703 li
421.232 53.8301 li
419.553 53.5908 li
417.872 53.4102 li
416.072 53.2305 li
414.212 53.1113 li
412.353 52.9902 li
410.433 52.9307 li
408.452 52.8105 li
406.473 52.8105 li
404.492 52.751 li
402.452 52.751 li
400.473 52.751 li
398.492 52.751 li
396.513 52.751 li
394.532 52.8105 li
392.612 52.8105 li
390.692 52.8711 li
388.832 52.8711 li
386.973 52.9307 li
385.112 52.9902 li
383.313 52.9902 li
381.572 53.0508 li
379.652 53.0508 li
377.732 53.1113 li
375.813 53.1113 li
373.832 53.1709 li
371.912 53.1709 li
369.933 53.2305 li
368.013 53.2305 li
366.032 53.291 li
364.112 53.3506 li
362.192 53.4707 li
360.272 53.5313 li
358.412 53.7109 li
356.612 53.8301 li
354.813 54.0107 li
353.133 54.251 li
351.513 54.4902 li
350.013 54.7305 li
348.572 55.0313 li
347.252 55.3906 li
345.992 55.751 li
344.853 56.1113 li
343.832 56.5908 li
342.933 57.0703 li
342.093 57.5508 li
341.372 58.1504 li
340.772 58.751 li
340.053 59.6504 li
339.513 60.6113 li
339.093 61.6309 li
338.792 62.8301 li
338.673 64.0908 li
338.612 65.4102 li
338.673 66.8506 li
338.853 68.4102 li
339.152 69.9707 li
339.452 71.5908 li
339.933 73.2705 li
340.412 74.9512 li
340.952 76.6309 li
341.492 78.3105 li
342.093 79.9307 li
342.692 81.4902 li
343.292 83.0508 li
343.832 84.5508 li
344.433 85.9902 li
344.973 87.4307 li
345.393 88.6309 li
345.872 89.8906 li
346.292 91.0908 li
346.712 92.291 li
347.133 93.4902 li
347.612 94.6914 li
348.093 95.8301 li
348.572 96.9707 li
349.112 98.1113 li
349.712 99.251 li
350.313 100.271 li
350.912 101.291 li
351.633 102.251 li
352.353 103.211 li
353.133 104.051 li
353.973 104.83 li
354.813 105.611 li
355.772 106.271 li
356.732 106.871 li
357.813 107.471 li
358.893 107.951 li
360.093 108.431 li
361.112 108.73 li
362.133 109.031 li
363.272 109.33 li
364.473 109.57 li
365.792 109.811 li
367.112 109.99 li
368.553 110.23 li
370.053 110.41 li
371.612 110.531 li
373.292 110.711 li
374.973 110.83 li
376.772 110.951 li
378.572 111.011 li
380.433 111.131 li
382.353 111.191 li
384.272 111.251 li
386.252 111.311 li
388.232 111.311 li
390.212 111.371 li
392.192 111.371 li
394.173 111.431 li
396.152 111.431 li
398.072 111.431 li
399.992 111.49 li
401.912 111.49 li
403.832 111.49 li
405.752 111.551 li
407.612 111.551 li
407.673 111.551 li
cp
.75021 .679683 .670222 .90164 cmyk
@
0 0 0 .4 cmyk
DOOURA+Times-Italic*1 [11 0 0 -11 0 0 ]msf243.177 285.621 mo(cri)sh255.396 285.621 mo(t)shDOOURA+Times-Italic*1 [18.9 0 0 -18.9 0 0 ]msf231.755 282.191 mo(w)sh246.373 320.391 mo
246.373 321.616 245.378 322.61 244.152 322.61 cv
242.927 322.61 241.933 321.616 241.933 320.391 cv
241.933 319.165 242.927 318.171 244.152 318.171 cv
245.378 318.171 246.373 319.165 246.373 320.391 cv
246.373 320.391 li
cp
0 0 0 1 cmyk
ef
.45 lw
246.373 320.391 mo
246.373 321.616 245.378 322.61 244.152 322.61 cv
242.927 322.61 241.933 321.616 241.933 320.391 cv
241.933 319.165 242.927 318.171 244.152 318.171 cv
245.378 318.171 246.373 319.165 246.373 320.391 cv
246.373 320.391 li
cp
.75021 .679683 .670222 .90164 cmyk
@
32.0522 320.391 mo
32.0522 321.616 31.0576 322.61 29.8325 322.61 cv
28.6069 322.61 27.6123 321.616 27.6123 320.391 cv
27.6123 319.165 28.6069 318.171 29.8325 318.171 cv
31.0576 318.171 32.0522 319.165 32.0522 320.391 cv
32.0522 320.391 li
cp
0 0 0 1 cmyk
ef
32.0522 320.391 mo
32.0522 321.616 31.0576 322.61 29.8325 322.61 cv
28.6069 322.61 27.6123 321.616 27.6123 320.391 cv
27.6123 319.165 28.6069 318.171 29.8325 318.171 cv
31.0576 318.171 32.0522 319.165 32.0522 320.391 cv
32.0522 320.391 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
30.8125 320.311 mo
244.592 320.311 li
@
29.7925 285.911 mo
241.232 285.911 li
0 0 0 .4 cmyk
@
2 lw
230.313 298.051 mo
230.252 298.051 li
230.072 298.051 li
229.592 298.051 li
228.752 298.051 li
227.612 297.99 li
226.232 297.99 li
224.672 297.931 li
223.172 297.871 li
221.732 297.811 li
220.353 297.751 li
219.152 297.69 li
218.012 297.57 li
216.992 297.451 li
216.092 297.331 li
215.192 297.211 li
214.353 297.03 li
213.452 296.851 li
212.492 296.61 li
211.532 296.311 li
210.572 296.011 li
209.612 295.65 li
208.652 295.23 li
207.692 294.811 li
206.732 294.391 li
205.772 293.911 li
204.933 293.431 li
204.092 292.951 li
203.252 292.471 li
202.472 291.99 li
201.752 291.511 li
201.032 290.971 li
200.313 290.49 li
199.532 289.891 li
198.752 289.291 li
197.972 288.69 li
197.192 287.971 li
196.353 287.311 li
195.512 286.53 li
194.672 285.811 li
193.893 285.03 li
193.052 284.311 li
192.272 283.53 li
191.492 282.751 li
190.712 281.971 li
190.052 281.251 li
189.333 280.53 li
188.552 279.811 li
187.833 278.971 li
186.992 278.131 li
186.152 277.291 li
185.313 276.391 li
184.472 275.491 li
183.632 274.591 li
182.792 273.751 li
182.012 272.851 li
181.232 272.07 li
180.452 271.291 li
179.732 270.511 li
179.072 269.851 li
178.413 269.19 li
177.572 268.351 li
176.732 267.511 li
175.952 266.73 li
175.112 266.011 li
174.272 265.291 li
173.433 264.69 li
172.652 264.15 li
171.873 263.671 li
171.152 263.311 li
170.433 263.07 li
169.772 262.951 li
169.112 262.891 li
168.452 262.951 li
167.792 263.07 li
167.132 263.311 li
166.413 263.61 li
165.632 264.031 li
164.853 264.511 li
164.072 265.051 li
163.292 265.591 li
162.512 266.19 li
161.792 266.73 li
161.072 267.331 li
160.292 267.931 li
159.632 268.411 li
158.972 268.891 li
158.252 269.431 li
157.532 269.971 li
156.752 270.511 li
155.913 271.051 li
155.072 271.65 li
154.232 272.19 li
153.393 272.73 li
152.552 273.211 li
151.712 273.751 li
150.873 274.171 li
150.092 274.65 li
149.313 275.07 li
148.592 275.431 li
147.873 275.791 li
147.092 276.15 li
146.252 276.57 li
145.413 276.991 li
144.452 277.351 li
143.433 277.831 li
142.353 278.251 li
141.212 278.73 li
140.012 279.211 li
138.813 279.69 li
137.492 280.171 li
136.172 280.65 li
134.792 281.19 li
133.353 281.73 li
131.853 282.271 li
130.833 282.631 li
129.813 282.99 li
128.732 283.351 li
127.592 283.771 li
126.452 284.19 li
125.192 284.61 li
123.873 285.03 li
122.492 285.511 li
121.052 285.931 li
119.552 286.411 li
117.992 286.951 li
116.373 287.431 li
114.752 287.911 li
113.012 288.391 li
111.333 288.871 li
109.592 289.411 li
107.792 289.891 li
106.052 290.311 li
104.252 290.791 li
102.452 291.211 li
100.712 291.69 li
98.9126 292.051 li
97.1123 292.471 li
95.3125 292.831 li
93.5723 293.19 li
91.7124 293.551 li
90.1523 293.851 li
88.5322 294.15 li
86.8525 294.451 li
85.1724 294.69 li
83.3726 294.99 li
81.5122 295.23 li
79.5322 295.53 li
77.4922 295.771 li
75.3325 296.07 li
72.9922 296.371 li
70.5923 296.61 li
68.0122 296.911 li
65.3125 297.211 li
62.4922 297.511 li
59.5522 297.871 li
56.5522 298.171 li
53.5522 298.471 li
50.5522 298.771 li
47.6123 299.07 li
44.8525 299.311 li
42.2725 299.551 li
39.9326 299.791 li
37.9521 299.971 li
36.3325 300.15 li
35.0723 300.271 li
34.1724 300.331 li
33.5723 300.391 li
33.2124 300.451 li
33.0923 300.451 li
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOURA+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/x <1C60D8A8C9B77FE256F7B18763C7A7C72DCD5BB6BE677861AB8491129EA0A9B90BAC2782286AB292F39893D623822F9BFDA394DF3288BB1E2C0731DE2274E95585890989774C288E45C07FAC336E7CAED1CF76F8C4ABA933B07C9D08F35A51DA19FB8D6A90A415AED1907569EA206F80BA2A34EC4259B21B20E0F44A082AAE50A4358E22A49D905B014FA8511F7144EBF05944BAA07BFC30501EAB38D5EDB15555BD53D7F7D15B60F6D8E1115CE9E90FFCCB77EDADFCB246798D9623417427C1C1AA7C7FCE4DA7F97CADDED9E1AED0FE4273BE451700930E9D67E7A87B594ECDADEE331A2C9D7072DA0B54A7A81F17AB92A2665CF5BDE5C2ABD133111C3C7B9A6FFEB838F4BC847501F9120DD61D13EA3BA7FBF23E1073C8FAF240BD52FB010B6779F0D879E48DC70EE8962F3E93A1107E76F5B80BE87C061FF2A440DF259EDFD6146A5ED6138BA9E5D266E03928CF037F57808893E155917B7F2856A3C95C54DD109031ADA866DDA5> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOURA+Times-Italic /Encoding getdup 120 /x putpop%ADOEndSubsetFont
/DOOURA+Times-Italic*1 [99{/.notdef}rp /c 5{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t /.notdef /v /w /x 135{/.notdef}rp]DOOURA+Times-Italic nfDOOURA+Times-Italic*1 [18 0 0 -18 0 0 ]msf231.567 337.582 mo(x)sh241.712 298.591 mo
241.652 298.591 li
241.413 298.591 li
240.813 298.591 li
239.853 298.591 li
238.532 298.53 li
237.032 298.53 li
235.472 298.471 li
233.972 298.471 li
232.592 298.411 li
231.333 298.351 li
230.132 298.291 li
228.992 298.171 li
227.913 298.11 li
226.833 297.99 li
225.873 297.871 li
224.853 297.751 li
223.833 297.57 li
222.752 297.391 li
221.612 297.211 li
220.472 296.971 li
219.333 296.671 li
218.132 296.371 li
216.992 296.07 li
215.853 295.711 li
214.772 295.291 li
213.692 294.871 li
212.732 294.451 li
211.833 293.971 li
210.933 293.49 li
210.152 292.951 li
209.373 292.411 li
208.592 291.811 li
207.873 291.091 li
207.152 290.371 li
206.433 289.53 li
205.772 288.631 li
205.112 287.671 li
204.512 286.591 li
203.913 285.511 li
203.373 284.311 li
202.893 283.11 li
202.413 281.911 li
201.992 280.591 li
201.572 279.331 li
201.212 278.011 li
200.913 276.631 li
200.672 275.491 li
200.433 274.291 li
200.192 273.031 li
199.952 271.711 li
199.772 270.331 li
199.532 268.891 li
199.353 267.451 li
199.172 265.891 li
198.933 264.391 li
198.752 262.831 li
198.632 261.271 li
198.452 259.771 li
198.333 258.271 li
198.152 256.771 li
198.032 255.391 li
197.913 254.07 li
197.853 252.751 li
197.732 251.551 li
197.672 250.411 li
197.552 249.331 li
197.492 248.011 li
197.373 246.751 li
197.313 245.551 li
197.252 244.351 li
197.132 243.15 li
197.072 242.011 li
197.012 240.931 li
196.952 239.851 li
196.893 238.831 li
196.772 237.811 li
196.712 236.911 li
196.652 236.011 li
196.592 235.171 li
196.532 234.391 li
196.413 233.61 li
196.353 232.831 li
196.292 231.991 li
196.172 231.091 li
196.052 230.19 li
195.933 229.23 li
195.752 228.271 li
195.632 227.311 li
195.452 226.351 li
195.272 225.451 li
195.092 224.551 li
194.913 223.711 li
194.732 222.931 li
194.552 222.211 li
194.373 221.491 li
194.192 220.891 li
193.952 220.11 li
193.652 219.391 li
193.353 218.671 li
192.992 218.07 li
192.632 217.531 li
192.272 217.11 li
191.913 216.811 li
191.552 216.57 li
191.132 216.451 li
190.772 216.391 li
190.413 216.451 li
189.933 216.57 li
189.452 216.751 li
188.972 217.051 li
188.373 217.411 li
187.772 217.831 li
187.112 218.311 li
186.452 218.851 li
185.732 219.331 li
185.012 219.931 li
184.472 220.291 li
183.873 220.711 li
183.272 221.19 li
182.612 221.73 li
181.952 222.271 li
181.232 222.931 li
180.452 223.591 li
179.732 224.311 li
179.012 225.091 li
178.292 225.871 li
177.632 226.711 li
177.032 227.61 li
176.433 228.511 li
175.833 229.471 li
175.413 230.251 li
175.052 231.091 li
174.632 231.991 li
174.212 232.951 li
173.853 233.971 li
173.492 234.991 li
173.072 236.131 li
172.712 237.271 li
172.413 238.411 li
172.052 239.61 li
171.752 240.811 li
171.512 241.951 li
171.212 243.091 li
170.972 244.23 li
170.792 245.311 li
170.612 246.331 li
170.433 247.351 li
170.313 248.311 li
170.132 249.391 li
170.012 250.471 li
169.893 251.491 li
169.772 252.631 li
169.652 253.711 li
169.592 254.851 li
169.472 255.991 li
169.413 257.19 li
169.353 258.391 li
169.292 259.531 li
169.232 260.73 li
169.172 261.871 li
169.112 263.07 li
169.052 264.211 li
168.933 265.351 li
168.873 266.551 li
168.813 267.57 li
168.692 268.711 li
168.632 269.911 li
168.512 271.11 li
168.393 272.371 li
168.272 273.751 li
168.152 275.131 li
168.032 276.57 li
167.853 278.011 li
167.732 279.451 li
167.552 280.951 li
167.433 282.391 li
167.252 283.831 li
167.132 285.211 li
166.952 286.53 li
166.833 287.851 li
166.712 289.171 li
166.532 290.431 li
166.413 291.631 li
166.232 292.891 li
166.112 294.15 li
165.933 295.411 li
165.813 296.73 li
165.632 297.99 li
165.452 299.311 li
165.272 300.57 li
165.092 301.831 li
164.913 303.03 li
164.732 304.23 li
164.492 305.311 li
164.313 306.331 li
164.132 307.351 li
163.893 308.251 li
163.712 309.03 li
163.532 309.811 li
163.292 310.53 li
163.052 311.251 li
162.813 311.911 li
162.512 312.511 li
162.212 313.11 li
161.913 313.591 li
161.552 314.07 li
161.192 314.49 li
160.833 314.851 li
160.472 315.15 li
160.112 315.331 li
159.692 315.511 li
159.272 315.631 li
158.913 315.69 li
158.492 315.69 li
158.132 315.631 li
157.712 315.57 li
157.172 315.391 li
156.632 315.091 li
155.972 314.791 li
155.313 314.431 li
154.592 313.951 li
153.813 313.471 li
153.032 312.931 li
152.252 312.391 li
151.413 311.911 li
150.572 311.371 li
149.732 310.891 li
148.952 310.471 li
148.172 310.051 li
147.393 309.69 li
146.552 309.331 li
145.712 308.971 li
144.813 308.61 li
143.853 308.19 li
142.893 307.831 li
141.933 307.471 li
140.972 307.11 li
140.072 306.751 li
139.232 306.391 li
138.393 306.03 li
137.612 305.73 li
136.893 305.371 li
136.292 305.131 li
135.752 304.831 li
135.212 304.53 li
134.672 304.11 li
134.132 303.69 li
133.592 303.15 li
133.112 302.49 li
132.572 301.771 li
132.092 300.931 li
131.672 299.971 li
131.192 298.891 li
130.833 297.631 li
130.472 296.311 li
130.112 294.811 li
129.813 293.19 li
129.572 291.451 li
129.333 289.591 li
129.152 287.551 li
129.032 286.11 li
128.913 284.61 li
128.792 282.99 li
128.732 281.311 li
128.612 279.511 li
128.552 277.65 li
128.492 275.73 li
128.373 273.69 li
128.313 271.65 li
128.252 269.491 li
128.132 267.271 li
128.072 265.051 li
128.012 262.831 li
127.952 260.551 li
127.833 258.271 li
127.772 256.051 li
127.652 253.831 li
127.532 251.671 li
127.472 249.57 li
127.353 247.531 li
127.232 245.551 li
127.112 243.69 li
126.933 241.891 li
126.813 240.15 li
126.632 238.531 li
126.452 237.031 li
126.272 235.65 li
126.092 234.331 li
125.972 233.491 li
125.792 232.711 li
125.672 231.991 li
125.492 231.331 li
125.373 230.671 li
125.192 230.011 li
125.012 229.411 li
124.833 228.871 li
124.652 228.331 li
124.413 227.851 li
124.232 227.371 li
124.052 226.951 li
123.813 226.591 li
123.572 226.23 li
123.393 225.931 li
123.152 225.631 li
122.913 225.391 li
122.672 225.211 li
122.433 225.091 li
122.192 224.971 li
121.952 224.911 li
121.712 224.911 li
121.472 224.911 li
121.232 224.971 li
120.992 225.091 li
120.752 225.271 li
120.512 225.451 li
120.272 225.69 li
120.032 225.931 li
119.853 226.291 li
119.612 226.591 li
119.373 227.011 li
119.192 227.431 li
118.952 227.911 li
118.772 228.391 li
118.592 228.931 li
118.413 229.531 li
118.172 230.131 li
118.052 230.73 li
117.873 231.451 li
117.692 232.11 li
117.512 232.891 li
117.393 233.671 li
117.272 234.451 li
117.032 235.771 li
116.853 237.211 li
116.612 238.771 li
116.433 240.391 li
116.313 242.07 li
116.132 243.931 li
115.952 245.791 li
115.833 247.771 li
115.652 249.871 li
115.532 251.971 li
115.353 254.131 li
115.232 256.351 li
115.052 258.57 li
114.933 260.851 li
114.752 263.131 li
114.572 265.351 li
114.452 267.57 li
114.272 269.73 li
114.092 271.831 li
113.913 273.931 li
113.732 275.911 li
113.552 277.771 li
113.373 279.631 li
113.132 281.311 li
112.893 282.931 li
112.652 284.49 li
112.413 285.931 li
112.172 287.251 li
111.813 288.57 li
111.512 289.831 li
111.092 291.03 li
110.732 292.11 li
110.252 293.131 li
109.772 294.03 li
109.232 294.931 li
108.632 295.711 li
107.972 296.431 li
107.313 297.091 li
106.532 297.631 li
105.752 298.171 li
104.913 298.65 li
103.952 299.011 li
102.992 299.371 li
101.972 299.61 li
100.952 299.851 li
99.8125 300.03 li
98.6724 300.15 li
97.5322 300.271 li
96.2725 300.331 li
95.0122 300.391 li
93.6924 300.451 li
92.3726 300.451 li
90.9326 300.451 li
89.4922 300.451 li
88.1724 300.451 li
86.7925 300.451 li
85.3525 300.451 li
83.7925 300.451 li
82.1724 300.451 li
80.4326 300.451 li
78.5723 300.451 li
76.5923 300.451 li
74.4326 300.451 li
72.1523 300.451 li
69.6924 300.451 li
67.0522 300.451 li
64.2925 300.451 li
61.4126 300.451 li
58.3525 300.451 li
55.2324 300.451 li
52.0522 300.451 li
48.9326 300.451 li
45.8125 300.451 li
42.8726 300.451 li
40.1724 300.451 li
37.7124 300.451 li
35.6123 300.451 li
33.8726 300.451 li
32.4922 300.451 li
31.5322 300.451 li
30.8726 300.451 li
30.5723 300.451 li
30.3926 300.451 li
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginDOOUQZ+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B81F2C7477F0B9BCB3EBA4BD58438260E6F0349575D982C091745F57E6DE656DBD360F903D8BB7BA1F42E7A2D05B5102174895284A8AFE5BF20A5DC15D43366CD93FB67607779C4A32BA> |-/parenright <1C60D8A8C9B81F2C3A0B9AE48BDC8A210A6BC24B132D0FFA37976CAF0AD48341BA40F2639F857493B96FE8C9C6A5DBA67902E1141CAD31E1E1F2EAFA78B4F0B158589755ABC3F5D48640211E0BE78E8AD3F692526A7797DC309ED92AB9> |-/a <1C60D8A8C9B77FE2CEADADAD35C681D96377E0B82CC8ACDB5762353EDBADFFACD451A553C5C39302A9F1D177F76B983509B429688ADF52AFA30F8E4A0B23F2282503B97D206C7C183FDE8BFD6ACD2BE6A3B9069791DF8E2CF592523922EFD64768CD99A1F5F1400DB305C4171EAA77202618276E378016C7BA0833F29752C2A461C11A88BC4E527507EEDA9C848EEAD89D80551320178A864EFC8B3562DEDC4F695E8824160B87CA7F395997B47C0C71BBFE9F871E4F5046857D22F807C04061C73B2C0BBB7B44E0200581C40A3AC55C8229AC23B2FBE040B0F089F70BE38746A5E0285A22E4825D9ECD39D6C15171D3EBB391B1AC132DA188B28262B67971885F8F1CB6195A6A7B0FFC> |-/b <1C60D8A8C9B7A73DEA51CB4AB782EC4CF13FD26F41FC8CB88DC14FD82E5280D80A6DCEF24DFC67DDE70F479EF61F4A2F59FB7C44A2DA70AA9DBE3F3332B05CF7A2A04A2009B46D9C510350AE718270C9D98B76F9594F5A2CEFABA8989AB9C1A83073103E665B7D0C1FB0D95DD2CF6B3624FBE8C4DC08D6FA9DA1460775A9F8E2451D08E82D20D83F7AACFD6C43C3765095FFA99CCEBE8373741BF9BE5B927D964DEAC7210DBA744ADF394D6C616E3DDB8D63> |-systemdict /gcheck known {setglobal} if end {end} ifendDOOUQZ+Times-Roman /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 97 /a putdup 98 /b putpop%ADOEndSubsetFont
/DOOUQZ+Times-Roman*1 [40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two 14{/.notdef}rp /A 31{/.notdef}rp /a /b 21{/.notdef}rp /x 135{/.notdef}rp]DOOUQZ+Times-Roman nfDOOUQZ+Times-Roman*1 [24.3 0 0 -24.3 0 0 ]msf0 20.1934 mo(\(a\))sh0 220.889 mo(\(b\))sh1 lw
342.452 280.851 mo
449.792 280.851 li
0 0 0 .25 cmyk
@
305.133 339.99 mo
479.133 339.99 li
.75021 .679683 .670222 .90164 cmyk
@
468.933 338.19 mo
477.032 339.99 li
468.933 341.791 li
468.933 339.99 li
468.933 338.19 li
468.933 338.19 li
cp
0 0 0 1 cmyk
ef
.9 lw
468.933 338.19 mo
477.032 339.99 li
468.933 341.791 li
468.933 339.99 li
468.933 338.19 li
468.933 338.19 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lw
325.712 216.631 mo
325.712 351.751 li
@
323.912 226.831 mo
325.712 218.671 li
327.513 226.831 li
325.712 226.831 li
323.912 226.831 li
323.912 226.831 li
cp
0 0 0 1 cmyk
ef
.9 lw
323.912 226.831 mo
325.712 218.671 li
327.513 226.831 li
325.712 226.831 li
323.912 226.831 li
323.912 226.831 li
cp
.75021 .679683 .670222 .90164 cmyk
@
DOOURA+Times-Italic*1 [18 0 0 -18 0 0 ]msf478.411 355.41 mo(v)shDOOURA+Times-Italic*1 [18 0 0 -18 0 0 ]msf307.349 220.293 mo(w)sh1 lw
346.292 333.45 mo
407.192 215.911 li
0 0 0 .4 cmyk
@
323.492 226.65 mo
323.553 226.771 li
323.612 227.07 li
323.853 227.671 li
324.152 228.57 li
324.572 229.891 li
325.112 231.57 li
325.832 233.73 li
326.732 236.251 li
327.692 239.251 li
328.893 242.61 li
330.152 246.331 li
331.532 250.351 li
333.032 254.551 li
334.652 258.931 li
336.272 263.431 li
337.893 267.991 li
339.572 272.431 li
341.313 276.87 li
342.933 281.19 li
344.612 285.271 li
346.232 289.23 li
347.792 292.95 li
349.353 296.431 li
350.853 299.671 li
352.292 302.61 li
353.673 305.311 li
355.053 307.771 li
356.313 309.991 li
357.633 311.911 li
358.832 313.591 li
360.032 314.971 li
361.232 316.171 li
362.372 317.13 li
363.513 317.79 li
364.593 318.271 li
365.732 318.571 li
366.813 318.571 li
367.952 318.391 li
369.032 318.03 li
370.232 317.491 li
371.372 316.65 li
372.572 315.69 li
373.772 314.551 li
375.032 313.171 li
376.292 311.671 li
377.553 309.931 li
378.813 308.13 li
380.133 306.091 li
381.452 303.931 li
382.772 301.65 li
384.152 299.251 li
385.532 296.73 li
386.973 294.091 li
388.353 291.391 li
389.792 288.63 li
391.232 285.751 li
392.673 282.931 li
394.112 280.051 li
395.553 277.171 li
397.053 274.29 li
398.492 271.471 li
399.933 268.65 li
401.372 265.95 li
402.813 263.311 li
404.192 260.73 li
405.572 258.331 li
406.952 255.991 li
408.332 253.771 li
409.712 251.73 li
411.032 249.811 li
412.353 248.07 li
413.612 246.511 li
414.933 245.131 li
416.192 243.87 li
417.452 242.851 li
418.652 242.011 li
419.912 241.351 li
421.112 240.931 li
422.252 240.69 li
423.452 240.631 li
424.652 240.811 li
425.853 241.23 li
427.053 241.831 li
428.313 242.671 li
429.572 243.751 li
430.893 245.07 li
432.272 246.631 li
433.652 248.431 li
435.093 250.471 li
436.532 252.811 li
438.093 255.391 li
439.712 258.21 li
441.332 261.271 li
443.072 264.57 li
444.813 268.11 li
446.612 271.831 li
448.473 275.79 li
450.332 279.87 li
452.252 284.13 li
454.112 288.391 li
455.973 292.71 li
457.772 297.03 li
459.572 301.23 li
461.252 305.311 li
462.813 309.091 li
464.252 312.69 li
465.572 315.931 li
466.712 318.751 li
467.673 321.21 li
468.452 323.251 li
469.112 324.931 li
469.593 326.13 li
469.952 327.03 li
470.132 327.571 li
470.252 327.87 li
470.313 327.991 li
@
2 lw
407.673 313.051 mo
409.532 313.11 li
411.452 313.11 li
413.433 313.171 li
415.353 313.171 li
417.332 313.23 li
419.372 313.291 li
421.412 313.291 li
423.452 313.351 li
425.492 313.351 li
427.532 313.351 li
429.572 313.351 li
431.612 313.351 li
433.652 313.291 li
435.572 313.23 li
437.492 313.171 li
439.353 313.051 li
441.152 312.931 li
442.893 312.811 li
444.572 312.631 li
446.133 312.451 li
447.572 312.211 li
448.952 311.971 li
450.212 311.671 li
451.412 311.371 li
452.492 311.011 li
453.513 310.591 li
454.412 310.23 li
455.192 309.751 li
456.032 309.15 li
456.752 308.551 li
457.353 307.831 li
457.893 307.051 li
458.313 306.211 li
458.673 305.371 li
458.912 304.411 li
459.093 303.391 li
459.152 302.251 li
459.093 301.171 li
459.032 299.971 li
458.853 298.711 li
458.553 297.511 li
458.252 296.19 li
457.893 294.931 li
457.473 293.61 li
457.053 292.291 li
456.513 291.03 li
456.032 289.711 li
455.492 288.451 li
454.952 287.19 li
454.353 285.931 li
453.813 284.73 li
453.272 283.53 li
452.612 282.15 li
452.013 280.831 li
451.353 279.451 li
450.633 278.131 li
449.973 276.751 li
449.192 275.311 li
448.412 273.931 li
447.572 272.551 li
446.673 271.171 li
445.712 269.791 li
444.752 268.411 li
443.732 267.15 li
442.652 265.891 li
441.513 264.69 li
440.372 263.551 li
439.173 262.471 li
437.912 261.511 li
436.652 260.61 li
435.332 259.771 li
433.952 258.991 li
432.513 258.331 li
431.072 257.73 li
429.813 257.251 li
428.553 256.891 li
427.232 256.471 li
425.853 256.171 li
424.353 255.871 li
422.853 255.57 li
421.232 255.331 li
419.553 255.091 li
417.872 254.911 li
416.072 254.73 li
414.212 254.61 li
412.353 254.491 li
410.433 254.431 li
408.452 254.311 li
406.473 254.311 li
404.492 254.251 li
402.452 254.251 li
400.473 254.251 li
398.492 254.251 li
396.513 254.251 li
394.532 254.311 li
392.612 254.311 li
390.692 254.371 li
388.832 254.371 li
386.973 254.431 li
385.112 254.491 li
383.313 254.491 li
381.572 254.551 li
379.652 254.551 li
377.732 254.61 li
375.752 254.61 li
373.832 254.61 li
371.912 254.671 li
369.933 254.671 li
367.952 254.671 li
366.032 254.73 li
364.053 254.73 li
362.072 254.791 li
360.152 254.791 li
358.292 254.851 li
356.433 254.911 li
354.633 255.031 li
352.893 255.091 li
351.212 255.211 li
349.652 255.331 li
348.152 255.451 li
346.712 255.631 li
345.452 255.751 li
344.192 255.991 li
343.112 256.171 li
342.093 256.411 li
341.133 256.65 li
340.292 256.951 li
339.572 257.251 li
338.673 257.671 li
337.952 258.15 li
337.353 258.69 li
336.813 259.291 li
336.393 259.951 li
336.093 260.61 li
335.912 261.331 li
335.792 262.11 li
335.792 262.891 li
335.853 263.671 li
336.032 264.511 li
336.212 265.291 li
336.452 266.131 li
336.752 266.911 li
337.112 267.631 li
337.473 268.351 li
337.832 269.07 li
338.192 269.73 li
338.553 270.331 li
338.853 270.931 li
339.272 271.471 li
339.633 272.07 li
339.992 272.61 li
340.412 273.091 li
340.893 273.57 li
341.372 274.051 li
341.973 274.471 li
342.633 274.891 li
343.412 275.251 li
344.252 275.551 li
345.212 275.851 li
346.292 276.15 li
347.492 276.391 li
348.752 276.57 li
350.192 276.751 li
351.692 276.931 li
353.372 277.051 li
355.232 277.171 li
356.372 277.23 li
357.633 277.291 li
358.952 277.351 li
360.332 277.411 li
361.832 277.411 li
363.393 277.471 li
365.013 277.531 li
366.692 277.531 li
368.492 277.591 li
370.292 277.591 li
372.212 277.65 li
374.192 277.65 li
376.173 277.65 li
378.212 277.711 li
380.252 277.711 li
382.353 277.711 li
384.452 277.711 li
386.553 277.711 li
388.652 277.711 li
390.692 277.711 li
392.792 277.711 li
394.772 277.711 li
396.752 277.711 li
398.673 277.65 li
400.593 277.65 li
402.452 277.65 li
404.252 277.65 li
405.992 277.591 li
407.732 277.591 li
409.412 277.591 li
411.452 277.531 li
413.433 277.531 li
415.412 277.471 li
417.393 277.471 li
419.313 277.411 li
421.232 277.411 li
423.152 277.411 li
425.013 277.351 li
426.872 277.351 li
428.673 277.351 li
430.412 277.351 li
432.093 277.351 li
433.712 277.411 li
435.272 277.411 li
436.772 277.411 li
438.152 277.471 li
439.473 277.531 li
440.732 277.591 li
441.872 277.65 li
442.893 277.771 li
443.912 277.831 li
444.813 277.951 li
445.593 278.07 li
446.372 278.19 li
446.853 278.251 li
447.272 278.371 li
447.692 278.49 li
448.053 278.61 li
448.412 278.671 li
448.772 278.791 li
449.072 278.971 li
449.372 279.091 li
449.673 279.211 li
449.912 279.331 li
450.152 279.511 li
450.332 279.631 li
450.513 279.811 li
450.692 279.99 li
450.813 280.11 li
450.872 280.291 li
450.933 280.471 li
450.992 280.65 li
450.933 280.771 li
450.933 280.951 li
450.872 281.131 li
450.752 281.311 li
450.633 281.49 li
450.452 281.61 li
450.272 281.791 li
450.032 281.971 li
449.792 282.091 li
449.492 282.271 li
449.192 282.391 li
448.893 282.57 li
448.473 282.69 li
448.112 282.811 li
447.692 282.931 li
447.272 283.051 li
446.792 283.171 li
446.252 283.291 li
445.712 283.411 li
445.173 283.53 li
444.332 283.65 li
443.372 283.771 li
442.353 283.891 li
441.272 284.011 li
440.072 284.07 li
438.813 284.19 li
437.492 284.251 li
436.053 284.371 li
434.553 284.431 li
432.992 284.49 li
431.313 284.551 li
429.633 284.61 li
427.832 284.61 li
426.032 284.671 li
424.173 284.671 li
422.313 284.73 li
420.393 284.73 li
418.473 284.73 li
416.612 284.73 li
414.692 284.73 li
412.772 284.73 li
410.912 284.73 li
408.992 284.73 li
407.133 284.73 li
405.272 284.73 li
403.412 284.73 li
401.492 284.73 li
399.572 284.73 li
397.652 284.671 li
395.673 284.671 li
393.692 284.671 li
391.652 284.671 li
389.553 284.671 li
387.513 284.73 li
385.412 284.73 li
383.313 284.73 li
381.212 284.791 li
379.112 284.791 li
377.072 284.851 li
375.032 284.911 li
373.053 284.911 li
371.132 285.03 li
369.332 285.091 li
367.532 285.15 li
365.853 285.271 li
364.292 285.331 li
362.792 285.451 li
361.412 285.57 li
360.093 285.69 li
358.893 285.811 li
357.752 285.99 li
356.732 286.171 li
355.652 286.351 li
354.692 286.53 li
353.792 286.771 li
353.013 287.011 li
352.232 287.251 li
351.572 287.551 li
350.973 287.851 li
350.433 288.211 li
349.952 288.57 li
349.532 288.931 li
349.173 289.351 li
348.872 289.771 li
348.633 290.251 li
348.452 290.671 li
348.272 291.15 li
348.212 291.631 li
348.152 292.171 li
348.093 292.65 li
348.152 293.19 li
348.152 293.671 li
348.212 294.211 li
348.272 294.751 li
348.393 295.291 li
348.452 295.831 li
348.633 296.61 li
348.752 297.391 li
348.933 298.23 li
349.112 299.131 li
349.412 300.03 li
349.712 300.931 li
350.133 301.891 li
350.553 302.851 li
351.152 303.811 li
351.752 304.711 li
352.473 305.61 li
353.313 306.451 li
354.212 307.291 li
355.232 308.011 li
356.313 308.671 li
357.513 309.331 li
358.832 309.871 li
360.272 310.351 li
361.232 310.65 li
362.252 310.891 li
363.393 311.131 li
364.593 311.371 li
365.853 311.551 li
367.173 311.73 li
368.612 311.911 li
370.112 312.091 li
371.673 312.211 li
373.292 312.331 li
375.032 312.451 li
376.772 312.511 li
378.632 312.631 li
380.492 312.69 li
382.353 312.751 li
384.332 312.811 li
386.252 312.811 li
388.232 312.871 li
390.212 312.871 li
392.192 312.931 li
394.173 312.931 li
396.152 312.931 li
398.072 312.931 li
399.992 312.99 li
401.912 312.99 li
403.832 312.99 li
405.752 313.051 li
407.612 313.051 li
407.673 313.051 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DOOUQZ+Times-Roman*1 uf/DOOUQZ+Times-Roman uf/Times-Roman uf/DOOURA+Times-Italic*1 uf/DOOURA+Times-Italic uf/Times-Italic ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (cytryn) ()%%Title: (annihilate.eps)%%CreationDate: 2016-07-07 1:03 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6GCM)&bV4@X!8dg?OO+&-kUD0[&sA@5$\V*g#q_Ct4jP5=B7DM"):(!rEpi@:J+r;J$$\S</Bb=M9:"IB(ejho:B.XSpa>AB%';AQm1YuY?n0S:kj7h.d(WtB4-^kTEBrDl61/L&pM9:F37^#?[;&1qN^!bheg/Ij3`b=kEN5rn'G;'qJ]uAmR^A"H!M4QQ;pI_nV%ptK$:2W)9[="8k%"BE/#oT\n>`LtiLUPE:Sqf(!MG2Bd`QdaotgJQ\-hT?oe?7VSL;AkF>c&#L9U&l$ddVE:Fl*aBc]p:FrHKAZE%MWIoup@T9]Mbo2tV"h1ohOV*?#!uR/+84(A0g&"?ipW5VA:fVkO:`'3`KU1/Sd8K&&5=<7M<Jk5Pt@iar'c\m$%9o$@P[?\4C0G.%Sag7?S9+u6k9*3*1`5qTUMg-kW%Q5407#:?n0UPSe@8D&_esOii,OV^JesCRqb(^tcJtg#&n0`f+AteHa.$Tn["20Tl6q-pd:g4;%qNJbjMbp1bka3Gd/j')c#U@?_$2dAd>YMcPkdoZ&nOPuDL:hgfBId@^(&EBUgB98<pchXQ,SdJNUJGHQfPf--!ZeT'1i!+$<5&*3%)3$)Pbj3qYl!Fm;0ZMk1#\6M!.J,'7,rq1YMGb@tG+,c]aU$^]g9/L\$#fkJJ6328(]4_!Y%ONTB;_Aupn_;tUJ>#4l]gI)P7QH&%BU\f__u;$nU2EaR8tY+'R'1b/_%D@aaX(ZZl3m,l^Y&XV8SN)I!Cs(&&8Uo2bt/SV.;%SrRduNKn9Y3f.%l'q%%h27UOS[?HkqXA%<0lLH/AkChL8V=NSlR?12L-g@KNcJCr(8<0<\auhP0$=M_9?G_:*p'c1?]gmS]O.!9Eo7J2u&&0`?Ne](?*MI&Y9\p:o@3BVj0k0%$#`lpn@VXBmgtEa^'#P+,'aN6ZKF!+;Xb"#TMP%`[@g<sVrS`f#X4ploE[XShi&3/?0DrL_Ct*bHibQ[-NY03"J=%Zp^<qF-YS]?%PI(k.TO70pFXe+SA)dZY',hN6&h:^FH'@lj?r(_h\<5>CF#HLh#5JM3TRZG;ON7]j?B]#4`8E;uK)W"e-<)/W6N>sWIR3GDpqnJq%*(o-&C-hmXPDg^E&jf[J5.&CU!&/'`_o@Yn8#Qp*#i->'8C%V9J2tH(ZqDOJnKKjC5H"[tA"3k=K==FUa]%CFHpTF%hp=SS'Cmc'%6659\a3Q`7boK,2dK8BF`l!a:(q0P.KMr.0Y^+()PgGt/8#T2:-$075fnclH&_s&qCRm^<muuqq+2OJk9Z#%bbR&+lKF7]KpfEsP%j;j;RbuS[n0fj$]:Ulna]uGQk[`1[NVJDsNW2ts\@)OH"Demj1\2&G7]*'a3;\TE5&,m3@.+3U.7%S(AaZin?i1K_0r:B[s#u[Mr%-3$jlnltuarh\*)G<4"&:=F^g4F*\"-3";Unltuard"F<&h26-P(2RKq5sTArri!:OlnEAn4CWbr+<^b?dq:h?Ap6]Q$f$bTYI=&%^/@Of;C,4qs-?Q=[L!839<!;"T2(Y$-'(9^KG+'`;N_2],?7?,n.,;$P0sJ2V'Hhu]*Se:6@Fo%PfYj=6X#%"i=jA0'R>o?,&`Z(%!LcshY+To?)9)j6AgLmi0LCjnU.!ll6!mRSD:W&pO('OMN!MkF2hWLp^-Jq<8_^1EP.WFnaBqsmO^dd@-ho:EQGD>mP2rfOdFT^f%$+;%3.*rRK,7OXd;.`X;i<pD!)f/40&p`7$<gg?@jB2jHs"dc5C3#HFP#Nl2iTlZ3fDcB]6!]PDPe_e00?(##hA_&0)c;3t.'cnC%RsFR0_blI,I?J#W$RO^9W$A33^S*O_,]8"!p+sU"/mr#&XX7#=YE1q%#l<-*qm>`MV'YCYE24K:`s:NV%ThCca'0s50IqNFQt%>:%!h"UU2NmcAIN.1kG`TX=h]S\MIfVAL%[`I-@^F5DIl8s>rr\mWp;fe/-U^;*O^Ph^1!o&WSBMV+Ot$5cHH*08]Z&rp2A3f@gAGF8%$_snF+,,@/K?E?k6R!Q;s(?SFopa?oV\#%kL7)%L;N/^Y68a`]Gja_(LlT/6V'MOAcu1Y8)]@@JT"_j2AZYti,a%\7?5(V^&l2><%T45Pa7!7'.,j72E2j)"G8:A3Zg2+bk/?@fjBVM7QmOKn=ZLOacF7;K(0R5r4J>(!9\mkY'D2ZZcUagd\6OsfSc;sRI+A/Fncs0I/%PDpeOPGOMt[tH)p7*L)Sm5!]M1=+#IOL:;BZ'<,3#'79)"4D+nG%c7kB3RqCq=3UO8Fh/2V[BJa'Uk17+12[ofR*h8N0giSQ?.G+%HcKgAc[PT&h&J5A/*d/1hf^m0fL,OU1rCeW-:9L.A9A'Qj"&QC84olQNKsi=.]l;eP9t9up!9\#8R2HBc#ZXmT[b3IO^;'20H!#2%^-NT,Cc5^LW'13"_t`70Wie!E.HC?@2:[N&7Ts?t@XM]U[8_kQRp\ZqW$IK_ONf+1^O]j6U+t(W*^A$k0b<;!+_(gTP*dFk9',.s%Bn9r]n=43>Ua6Eo_b3`kY6sV&9KnRc9k><4`L98sBq;&2VWC.$7&:1<Ega'Q<EL99_pGY\W@OF;l,&;dR$0O!FB_upUN$\kVqf(%%\\(mPCHONddjiU8"<06PM9_%:QIsr4MEk]M<3Oo2Wr-LM:M,cHE*kn:'B4+OWVU<k_iG0E3QgOT);UX3YC?e<.&TL4D,7A6Q=Pi[%VJ0*G1S*Y6;UJY]Q7B4;Gl=,?Xm+cL*Xer@>Ld/uC=&5:V\eBC8EuYG6A2CA/^h(,1@$<'_5JLZ%hMiZ*Fh/bL9&<k!hGNA;Et"g%]P/=D3t"`k+;jA>S7X8ZUC3d+\t<C*Z8"m+3@YaQ(o7M_g"qjnYDgf7oh[?d!C>79ODH@Z:c4d6<85pg*?6Um[S1UJ1Kd\V/`ek7%L"EsT/ARY:C[<M9&X+SO6>M'ood1p'em/0bMeSI.+KKn,m<$u#dq"oI-#;9dZ?8fEBh4_(]U<Z;b2*gQ=+2/Gq4GeF*KMT30&*nm%e)%.u;KVZYj;.d1L'bhhNAhgL,eQipQ:)PMGFM:<a4uk:^/#joWmP/#Fecfh*3;'[\KmXb$j06hkB$b`)`1a(hDeAlXr\2sSHPe&%`_.4?V\l=(.;c1p10NX4`cIN!,t$GBgsVuSR=X)9-T_W7]:_9Zm:(@cTBUPn9!Y!&Z+@_X1*18MfVkeAe_2X[d9!FPD"^[hkNt!/%D^AC-`m&d/VtEjmaMo"A17`TkaT/3A&_TZs10&q)g3H$N\!YT#4,ItcDi^%u%TN:>*6ZZU<>*6<`<<Pb<?itb9Kqcc`3Us%OY(m>%jJdn$@V#U,9O`E?eXD1;a/Q)Q!b6)NS"%iRmf3*l\WNH1f+WF1,=sa411H2\=K+2W8I;`pna_b>-$.;sM4;89C6TMI8\PF]cIue$%f=:S<s"`i2aAXZ>_:Aab[?er2c+`@@?!*bt(B/?h%;1FV>B/#B,Mk.:9l,amh8(IaVLHQ]/sXP#k]ugARFoi-0N#i\rb#=&As0FF%;=cFEc6ZurG"3FD-f\<XKHA0kmn14@m5AJ9k507p`(h\NDHhsgZ"fl_[JE@V<,#fTZ0$CGoKMYjFHq>b9s"nN^PRNV1Z/Uhdh>[$%Ws\U$U;#>)i&d`0LTAm$lguoV:M`;]%S5CV=*L=g*=u2IV!=1DSSD.fZ)Lp9h>I1M7^4j<:f1]jLu,E,6lC-@(LuPI::+N5Bt(-:%@`.=6-ntRVTf7;BI_4-!<#T0e!!KDEHQNZGO#in?PLsEqCb+EI&0j05bshM^8R)"Hjiap8EORt-nu,!pmW@7MoVYk=p@l&EO7fBi%@a@_2p3/3*IjbS%Vm!o1???$.mD9B7To$p+lT\<Z%%V2FrpIgkJ)7f^*r_&,X7P37U)2=g5.UhQ\?fjr:=2lg]tpMFHq^nSKG$nd%gDN?(a2@&O'$HKTaAZ]GJ',"sn4:<R:l6\br!,#5+u';EILqnAQW?iggRZ)?^`Y,S<1;^Fh`aM(18<mpBRhhV1I]8%s2*\VZ&]C[%0P(dEEbpQc)74r\n5sJtXOS:@.Y@F#W]Kqo9ZMrX4L%#hU1Nb>So@/%7BT<TF%FFaH$2>M.ijdFB;Ern#ESQTN7>?a26M3YfAodJ%7VY'R`43:u5kLN6,N/<Y6E2p#nUr#`R`oG@ltb>TClYC+DK@j)o5N&X^16V+oUb6GN*S4P8$?"SBhuis:XMPhYCa_m\c4hn#GnNr%Q#crR3<MFapd['Q)Y!p?H6<3M$tS;/=/2a8om<X]ffF+3deb)bm??E^>tl+P4Gl^m$59V1P%/0%Pb2ZrMgcp]Sc/k_P`t"[</6%?%'p,4lR_W+r_]u$IR.3`,9KLF9]CYP)6[e6.8#+^U1h]\BOZ_nOL_GlO#^eZH46n>f9s7(2,[s=B_!L`OR8g7J6neI*Z,i_N-)E\;%H6k:@V[T$Zs.f3N'sA;fTQ1iCU=[TG^"/kR)C'`S4\lW0^*<,+&8-M\N9>9g:XZG+mM%gaNX!tk@K0iq$09inQ@d0[hFX?rZdpcT%;M3g+/^V4;:-0+8g?]6#[X]j`k",$*LZi=IPPoWQ];0f_7Qp-];HiMgV/ur0%]iic-F!6Q3>sr2DKMBHk/`J(<QOhC>'h2_6mE/L%<osHsF7SEEFHKfJX"_Xk4ZlX)%.Ea-4ISar_Iu"0nm2b0>nsI?OU@Wpj&2iUhe8d9?g+-T$%Z\mU(rV=j[YO7>Uub]FURElIi3R;%M&(<:&L$+HdX]G\[3bB[*lc'[W&*jUr5=jW5Z5=?Q-8&U([Ka?")8r5gd[6YKoUoTTJlua>4:QSF/WK6PHP=rH)Uj=JCs$RhtFLl%9Uu!6%!_o'S!2`CH18b4qa_mJ5J1,eNW&q*06Z(9.Gfk.G1l+'M9VV!hD:3(9mT#ebYqI0hYfo.NmO,"W9A/<gjA%/HksA3<-ib>%leN^AKnu]KNu+o/+6]n"X'R5$3OJ/61.s?:rZUpps#,2ns#,1[s#,2Fs#,2&s#,2fs#,1ks"o&ds7Xs`M#V>arnFJCk.eKB4JL9d%Zo`PV^^p>$"+lhGaF>&E$hk[a]C(bod35U:+T4f/AfN\&7^K-<[Ft_B2Hm8G29+Y6=HU5qn]\r81u:BTJr0bJD'"\<Nkk1;1Xf!%%@1h$c'Z_MnfE.H?LDD+"L-c:+'NZ%k7#]6k1%lRV%/fBu.p-lbS,Bu^WLj[SMWr#!Dr@6o[uVSKU[?@*e!a#GZl=uiebj+1r-nsi%$K-!5hS2,-p.4G33g)FFLa]#^Koa>ofE&e:^h/)oqH%_phEeL;EWW*lIFZ*$h'oB4j^X3pI5HRJ22]LXpZm;XFcZ`+>S*boGlLgu%DCED;7fM4m[5p:3;KU;F`#P,dj:lgT\UT"o'b12+PRq[\iMupKAuhuB@=6*mrSKHZZ[]NWl;7.\k%Nu8qfFq<o_r,fp?23)4)TXj%"D]'I@W'lhO3\2ebC9e_s"DUEn]0PeiRR^1Sd+4mkP]nB/64DWLg;FRY0@6a)VomIoVsi(3:u@BS)4)B[sNbI-(;ut:7_3me"1rt%kn'ulmrh;u9$t#9F<%#."e5\MFGn]IQW_WR.guV?*GQ$180b&`*tr[5Jt&pf^@NFKrNY"e*)&lk$GHc,?XNf[,5#lLcr2:92U[>G%`?V]7*p[ZXIW321>\+o\K,qo-613f17c(t'!\R4(nROKOArL>%GrS^Ab31Lt48;Gd%DcF=?UuJVf*j<kRc)W%rKm(=)2u51B"-HC%2bkg>/+;<>d/-!,%J1_q3/%g/:*DT=@A<Ze3u\ak;'@E.AGXRn<i4\*ZesOdUG2h/SrsnQM1hsQ+ldF"-ETRTe4,79&`TOoV2bV<%L$3)9p3+FX\;LPk<:Gq"[dnVamEQ<thG<.o5h9\$8PR"Y6lCK"0/32_s+?;K?L;VI\q3Im.;b'Oj9=ui[rk3b=9+]OE-RmI-UWQc%4XLdHGqs..a2965qY/kQK21/_mei.*&ds]CN[)D`cEXP+3Dh^V%E?[pLi^5jG%]6>Fh4-cDftOd:Q&Q0nqVW]^%H";F5$Ok]T'ah%NF:]76tpkB4cVX4Ek^schU1CpS7i,/U@L'/C#[\0)TH>`:9r7b2VW'NQh?g-DaR%8_nj8fX4cmEC!-^`4mYR.;4NppdZ%4/P!AU$%Viu\S"g_,NiuL%5#lenB2siL\c;8eccrH;gXE?Ij5SG`i9KrMr'i]XX2"QM9IkeNJCLKKtZN%ik\I\i"ej[>#7"Kd*(J)BO+F-\G%j7JH\.VP1!2PD"GDGj6Q.`uQ5Mp;6.c1.W&PSrjq[qK+uh-+lOhQ7=FRp?ln1"V"Gh*^[s4=p"[q8ZR@-&#CE8:CU)'1[-BdfNQ9%/0A4.L>9*UGkO<<[?^H%:VF$^_*n$b+'eu`&"A!D4#8*;hYocE=hL:h?3UUDls+!U_75mZGnI+2bU.f<j17Z]D2NGC\_pO.IS%FW%$1l2TaBDWkX_#03-FKo43X@kQh_ub'%73u@BZWni=N8.I#[YA7anV#T#t/^BETrbnUp;iiB'Z&9`V,JH(O0,GC9EC^Wm=<ins2)B%**?0a1h`!"0hqP*+dph+53t<ci\'iq`fk;I9d!md<i@,KfRnt2BRNU/F7[\]h*[78IFh"!gTH)@)lNOeW#?9CMSnC$g4<H.UYu%:%Y3'7[f?6Q/DI7I\D>d?=ahBC\9GrMND@E6,hh-uNZ!nE31Y'2JeRiLkCX>C)*Hs^EbulX>=:l'\Mf,EY+QA92O%rbr;6MutFXFfa%d(V!/1GVW3ZeFm(;=o:`8)e^o3eImA:fA+X/\')hp-3+lHdn&c7PMBB%LA_b+%R#m%7^@b)8r6b?5$pNN1!]YNnrhOqW5$>?e2^r%5C;9b[(ep8Xh,I(?Q`9<)c&E]TL#&h-7T6gV1^;T6WGtB5nnBp+%t+=BSpp.*s7:5,OUNJTdj*l>0YIIL:Fa&$PWn(T/[/9U9Z6o%>h%lRKT"QsTL`6ea#B(EZ$&uI`S*ad%VllgH*#8D]Y9HUZ%=ebXMWZ7j,a0bg?oG@++q;`F<?O<TSJLLeA[_*`_e!;@9_SY<Ol+V%VWL+\kf>08YZ>.4o@&]g6M7;DdYn0<ACB`TH\XJs;0t.NcZmiRP]/KlMAVDV>CQ$0RJ#XSp\W]7$u-L^P:re!BI_k4lU8nJ[L?=@%'g^I!bGb/9Bd%o.3C.E,;rI6?XRR"srZsSg5_'Z[316mlW"*JqS\E@s$1"W*b#!kn/9HW&QHMK?r_aWW>.b_5J<W5C2r!3?Df9?C%G*F3V\W#Cs<%K!M677Sk<!u,BX_(-1Q*:_:eX?MS]FHmLeQNoAlU>dbl+Bie3cpJu"j:(Z['<UJ/B<&pM_:tcm(WM.@;]?5]g&qM%.B52gFEsXO\bmG"f9nuH/7Y7%`XuD[bYTWq=#VD%FiMlGl]l9=DS+%uC`@47OBWaXqUej5/"]P\XCA^?+N:^+?`,Ek1=9V\Rh%V4%&mrmA6t+e?eKL'SRRBl<WId[.)_K40![$Zk[O]C+phliDi<j(aY2]lVkr^jh_s@"0Qn0u@rjs\3J87+@I:i0,;/Mk3;ouA'?CecC%/i0EHf>f3=_dU?>Oi>g^+B[1*;HIgmh7NKOLc7j1AL'T,D&>Xp7s2H;[Dq*p+kl&MD:WO%#-kn;Yla-Kgbm8KT'dmfH\:XR'foa.%BMK6t-9)pN+G>Y_!H(HM:`)Z$YVZGrK>lBOD#U9$TXDBflmd:/-[00X;0-[,HeUkk`![A"@F%%j.-F6R2=d*Q_o$SjU]C&fC3Vu5%Q3uem=tq094pd!c?P=<k8b(X.XK4TF=23]!4*'b(;CHs(Wo(5WMnN`e6b)#TT1\(UMr^3X3#]baOdh\)O5IF;Nc]]#[Li1epV0A8%Lf>fmja%.0WqnX6@sR)S[iE_b^$Q38\"ar$Pn*716gH%0<1&uh-hZ6BnY,E74Y;(PA)fsoBDQle0<H`:e4P#YptjiKM)X\IH@&gJ%'l-Uk@ORih,^dSh3Gi@,DTK4Khf`i%!`7cCI0lK/A:0NC%XRd@&bUjUfh5]5jK@Ru(/?+u[W`h/IA)WmitIA'm[@BObN\(TZM1T8%rDjf3DIoND4V__88oZ]AheSoON=8UD%ZW@*rH)oN2Hgt\`,EenV[&pf:q=?@m,duu;:e]oY%u#Dcin0fT!TCndNP:\#(GM#lRLH*%UX@B^$8iGV'OpUU!'__7ZZ3Q3\WL2&hjZrZ;oC8[BjaHW_KZm5:/C,AZAs;0BV<f(Gku(9(FlA,dG+CAIA9T5kEDfbo1#d[QULQ:%-#2/tbJn6:2[Z(VCDJjtll9+*k)Jg*!i*$a+.5(A&>.rt;Dr'!'X\"eNjg2[gLbj;QM_(H\*hH%NQ1GUKSg=%0l;$7dS=\U/qU!7%>YOuD<3C+3(6'ZmrJf!JhQ"s^Tt:5BD.jWk6CP#o+)Dt+U3EI;IeqSgdRG0[>6aZ@4-OP$2i;jb<S!5qrTIBFK"dmiK<q<kI>mWc%'Z6lspgAiA??RibN@)5LCD0(1R$1+Jc-a_3s2Le\b'UG/Q'=u^*Ts&+X%$mp_;kL0j#?GmmTO#2Q.d4G2*.2?M>gm*p\8RUW)1U#%pC3,A<p6K">i(E_bSuQ!57<b>g4a6:f.,f$s**hld^7D:A;\CGU9D]3/`lT^bbD#LfP!B`Cd=bh)=jA#6FkTsmfYM:)WF4LI]h@M%Wc1`Q^#';:)GOPh^McZ<jeqR)Y,;d86N+0Z0Ptp6p+uF;;r?p(8Zc-ud?DqUA(g(^pM2L%dHG(:\BHF4X\mRaY1_k&VrP2uR@#mY%q3p'CD"RA!G#Y\\["p^;B'V'dhUhW#o^]?=:7F.f;\o\)NF#[reZRIOi\=`Fa26(t5-S]W(VG%(IES*<HCJ](//q#=bA2QICXLb3%\F=lh'f9k$o^)2$?"l6.g?A,RHEK,_`^Sd$Y7]X(ZYHik]Uo/iRQ#P9&0*jqa$m=(dC>EjD'pq3R]cI(:PCiD[(/)ol6f;D1qe<r%6_iV.8TV>S'7?5A?;[JE,ELa7f=0,G#&Wuo'/HXGS&39]!]MTGm0@D&7\caKkKu=I\nu-1j$s0F*q_[u-S).KKCOmKHl?NdUU`WM%@N_j-?THjbNBU.D7lp2FYJWH0]d%2I#!?K3L"G=-WkS9:2-QCd)]a'A6/$#G4K@jamCM65gr58q\a+QICXhB7I9h=B-X)Q?BNCKD%n7cKUm;?rnL`2OjV"6"ll<f>Fnuhf;6@.ts])Hf)=6/&te#%%b3.)'//=pbHMp66Oh<ZR/JP*lD05Qm2WL8F=[JJ!EAOD.61MjBu%q\lc:bj9%nPWF/o--Vstkgq/F[(--t14T1?ds#bS><]N@3nZMW4B`hr5<TdRleuel8gn<B4Sa;LYWpsLG^B;8aJNj`9qS:Y+%3Q#%8eD_oeV+HT/<)cQSgHD"RucZZMl41<S)Wl'J_<tp=M59Wh&(8A(2qeKYJoSQPPN[kI-&sd:_&pY4h^Xe21@-4$,oT0hu2i^j-XBI%[.cB/r`7J0:[anpac#:>pTC)sc_3kQhr\jlrnK2QB_&NU-ge$);AC^>.<h\TakE.lrq;-:r3c4`E6\$Ss7X*R'C_RTbashaH`uW'%_0I.g-l/A%/enlBc3ld[)Om;fYJ%40H)kKPFS_:4K`&Hr2si%i1%]iH(co/927;WE_r0rZh=1rZOP8%12L]*!Ksn%AU:N3T=`2LJ%cGCAYh@Y0ud`!g)SC,(A[=.-E49h_QXT:N1U2Tr(($S&/h^Ka3p\+mL#b0!>gn*);lm1EE6JKo".GjD6dJC,KXnsL3Z-HZ+LbucP%1>;07oQ##[->i--[cqC:A&,:&qs-"ns.^Xgm'JZ'^,9>Y)[1'u2]E8kiFYe'?)tVS>;ds1$HY)^7Zgm0QZld3FeA,<r;O[4dAej.%h.X2W\lTi9EMHVTa3CJslT`MU'5Ou/eJ%_GD_upR_3=Wki.>aO]t(\V2&b?9?Cu9(^2+oGE8/aPdJ3[RFe``;:VkDVa3PD9m2[_r%7Cu-uGA(,:g9bS$.V*\f^:pdQ,I)&!oT<o>njX%IHMk@g*c;lc<K&&+"#l:Ud=F9J[U%EF>?;5ShkK8efq-Ln`6n5MgWrG!kd+me%U,tP6BXB]CJT,$O4sf!F^(is642ce\PZ;@Dp$;b-p`r0jEWTmfU%Y1)j?fbKmPd%dGhdTr;Cn7Q"`,XB*sUG#7]R,9^(C0>8q-P;%<uVF5RCPG/K[4."$l+4kTTVu6BOYn0^[1,IOCZl5D1di9*74Ul<G6SVgBBoH3(iuEp]HmL\'^k9SZ+b#L%eelN?b*27mmVi2pflF%0SiCi)G5ZlAk7p+OO?s_Fk3l2r'BO\C?-WcY9Qc`RHXG+K&;c]oIhR5f.Hk)'Z3)P+3hE\jTsl9PB/Za-Vi\<3MH@;p-Yd.HC^]#%E$o0l/GJ1+^$OeQ\5gb0=>ms4*15RBL>=ShKTE7-]=Bmoj"%8cR'R!+F(;7/5NPW'*n0=J--YA5DiJ$n#$>6VLkUKm07*%2IA?!T%58As$")@:!6k?ON>)gNp=Y)duX""D.S:K/M9raGGd'!:g2UTjn)18Z)O2/d\DfhPD>o@h4`ti.=@TE[b]-_I_*7sBBR_"B=c989k%PBrG:+Y,q`V>5FSk`r`:BfuD2gr-l](Sg_eTmiDKe"KnN;gp2bFV707L,qL7PX]anYH.94ZsS7XdE"Y!C_=O3A-3?CX7WsF1_Gb3%_`#;fd7:[]AjEV(a)&!W/SSU_GKmPlO5"qm2sZnIDXL_fAY^:h+*=U&^,]E)j>G->o_>rtKb#X:Yn>`$-9'OO6q^pmY<dDO(9d(c%e[jY$I\ahJk/b3!O[?iO$Sre9[c?-B:(Ie$K&43_fudL-U8J?/WR*GZfnIONBB7(A?.DSJj0Ia6@sl&?dfm.WRCSB?Du&aV"oX?>%U6Jfe=Xu@W>c;bC]ruQ/PRb&\lg_S)6!KTaFG_[In^D#h]BZ3?\KASK\l?e1PEu=$hJ/?^i8sL@!9UZWE5[[*M.9r%4?lmp%9hS.%'[o_/,q5^XBQJ>0Q=\n_,8KY7\+L]l)GHFeK%dJa%<1lKha):%$E^iYqlJJOf,gK7D6>D=N'$PUB'!Z"HCbn4kL_3'c(%p5j[ma9%TFJ*t\YY>`D',O4cDj-b]?t\87^2+"rn&>-9]h7k@<1/_)%ZgDSjgUi$FiC?W*:lB';oQJgDL'R[H+"F&llGgNR,']-V'W*M-K.1%ns77Mj;5IC4&DBif78QPit+,Y<D+@P9RKr9&@;mNZU`+n#?$Hf!+&j'lG!g1,QL[@2Wrob>P9_:4[3pPEfW"SV27K>E3a-#C@]m*%-U!O*`)SNlomUS9$uD8@Z15*QPQ*ZX5/ajU\,;(YXDE\Mf+b^Lp7T)9,$&.Z@L[U=DgR\9#qd8n4an3ZDJ/:`&Y@u7/0oDI"JdD`%fOJEp^[l6;]TE@bJ^^LKKh;!ZTYKO7k<%k4COs%?)g%E'6Y40@]RY:&G9eTsD_diA@Z,?lB^4/<7sN8-8geOfIc>D\`e#bF,6qGF%5nmGSCCkW)lnob1F,O&lB@_R!63PnN6*Em&)c^Scid9H/didT#Q_>E<(P7_@R?T3rQrP1Kl^'n?^DEAT+j?O]@(mU"f>%Rb4F?MF%(-f+=/7=I'F4YloD23Y*brP`IB$jgJ!"=qYC8]P$(*ed%Z&mY'e>:GWQNcZMk$*W5\uabcoG.jgp&5o/=*Ku`k+2IP;`P^%iMFjJ%_"bW\en=t]e?-CkJAp<JQYLAkENr>&!1:!l9J.N8*_bD2A6WBZUZSrEH!J56D^=Mb#+p`^3(qR_%->U\Akut.4E+Uso<3M@D;5Cj%ImQ-H,&0(ZXBtVBaU#(i6KtLF(]Y7$2r#jC`AD[FGX9.3%XfnRpoK^9].95DjOI%fB\Y)7=5JQQ'8^nGTL:T@OJ'.h!f8i72P*sq%WPRnO=WdKR6HJ3L":9TMbA0^=ZphK0>B]FA>=u9uk5P%*'$Xgr^i5U+B\0:FHc9r1/W\0e"D)ToUHF3O!>`kRdg!<N#TP5qb8mtX%kg3R);0>Nhaqi\2mtV<H?#r"if_\q0h:QYA>oh%^iNs<)RVgi^Qpnea[!I'BCN]?.J1^!`^eNFA/\5NCG2eE..,]+WFsg]<iKu*8%F(+,!YJ^SG@q2VIl;$1ViE4DGH^3B2RXft6C%\g<<<M\[W9lpd)W!*Kh_QU-qU*m2Km.pKa)Y:t['c"[ad/tN!p47pBY,%cSHT)'%[*>G'7S)37IMKJ#d%k5X`GV$nmhlgg/R3B4]=$/Wc(K#ZT*ZM3X.fJqLa5Z8m6k-(2:U2DE!_RBejA_oIQc;K`6'+bm`oi)`+p[f%4JfSs=S<iqoeNql91MUOSD'LI_.LMLUNER$+s'+e>YRa*RP"Z,E3^tGb$$sIqXYS)XZ?4&jZL"64[i9MS$"=p=3g5U7[0u%klIm_%:=ICj0L\\oC%q>EP*nJdEa`^BD)Q*OSnk5#rHk:m]bN!P9Wl7gpY(M;D#r:Ml-b/LH*j-KMpiUF2HesK^k-$5m)`9U"8\.ucF;(W%=:38=`@+2c2U8dj,Hskmr9*F.1)tql1V$m^VD]Pk@3A>(-LL>IZNMm=;SL6(Y=j\1X8B?SgTQnTF<:Hs@d$cZ9I&crLnSBhkj0PX%d#,K!(cqO"3f@[f\RXj?[LmUr[,@*%F;Bka#Wb]G>:tZU5(ZOf(0iJHcE^:e6"_&e3+iYjI0:S\:gH8>cFt>f$EkY.c7j5I&TlM0%[r`$!5FZ70kjYZqLnW9Z,[6&;%5"u).j'$%8>(U-q,&oPoJSTt:6+(UXal=S.F#fL]P\Lmj>T!QG_EZ6oHH=Rk4'b,53$Ep3I%"'%V3<XV7MdRI&(j6%K>GDWkbLH'ZN1hE:&eW$@NRVn^40"Xq;Rk,L;P!t.%*Og3gda":pL@p1IQ7DfT+e0Ret1IYjF7@*-M[^Rb&:m%El[oPT&4@#dC&@!='fVO?#s'&4`5l-oU_-P(^>hnGA2tTg&BWYgEeia]34It:'V9/Zp]SP3S3B%VN0CB!2Yb&def"c"4OkiTfm0K%XLD)-bkC**alMU<SY]'&FOQ/o/53Od(&K-&3C6C_NmDPJU\!?V@X486oJ':nRB>F%4DQ9X="ON1k!$'H:0Rts>=O1CRZcOLIV\Cl%ZDomuQ<^chJTpKof<3hS(fR%Wc"L[@e0K6KJWc3HD6Uf#Uo]"&eY.%AIMpE=f\?^\N]=berP]32F2[T/`l'hj"6Z4]ea>_*!GCXl%5"m2"joIC#<PJs]SfDo*F&C0X-tMa@ne,d?MWkSbWR6["dq%>aKP'j2GIm-RbqXa29m%tuV,P$s!JD<jK>94"I(U*6LVrJMj>Pe2%@QY-i]c#;%c">:$'pB"!CRYem[lAuLHaV_<B]Dc2lRcd*'.Ps@#gJs"=RUO:6en3o4sl#D5<k7IqM<P7p6NYTmT"3MLRmR*F2%3U%h9Ip]f-@-TE@\'@,7g?>@N!9.3VdsUT>tbV^/]bfknkP@QTE\0;3i]O]_WI3aV`Omic*@5++'R^2OC9STX8;"+Bk.-B'(*9$g<#s%X]`Fg1<ppeD>s[rCi``iCf$;X>K,qQm,kOnfQa=+#`>rSa`r#":-9F6m(`*\B'?IsF(:?SM8sDTH`8$r[E*;G[odJdH:LV4ACOid%ipkUj;-R':)=62<4q)9oMi9i'0_;W8K.m[#S$C&%7\i)akKRk+RC2Vg@9eKK\-^GHZq7jgA9V>m#Lf)#eEj`lfl,Z*Z916U78.1Y%>$R%7__G;V=(9Ys*a<s9HMhYtO/Qi@_$-Cj[.S!TCj'le>FV<Ek%:b(-IIE?EHMZa1)`;TO6?)cZQ(.+)J9d6m-GjHKBoTlWRB$t%<O]>VeO(plD])gQ:g(Tj,E#diE*k.:P?&D/k@Ea_9g%4$pQ$mC%l`MPNFh"Ij5CdH:n96\cJ#I?Q18goM&(2jLGRcmC?ZhM<'2/`%%E1cSXZ@LuDhha5EN>+TZbIeo<Uk#Ldtft6=3H<WiF_dm(<8ID93LP1:5]phf_=+-:F*YbfSse5`[>fH94G0:J%^5S4U<3tSrbS_%Y\PhV38k$#L<]>Ff\e;m!,(hS<?<*;IIiC.]X(#<[P`l/L(iLD!UFH5Eg-ePClZuk0F?"+4YREtM243^0WW(=e$/alj"POdjd>-d%/3hrD)G[;Hj+uPBR"k@QQ.uS&iAaS"a5&8#Zg9NE:tR$ur2pt?a"BF.lo$Fg2erDj^LG4I2RF@&1k53+4U`9G=A\.aJ@X</PDI`C%<CEWHrN%[s'`hNE7-`7I$6iBe[DXO=;O_GL&Jt#`0d7@K=^H!/GVN:/ME#'T]mZ=o,1ZWLcnd#N)8A?t6#8/JS_(sh`'XYsh_5MG%!Jc5FB@l-1iQUB8l9jMmZ[;((&.3&*/q4uXDGe%-I%bM^pQ\C*_J+3*d9npA_7X#$SC+@p,1:Ra:cK-cQohc==?g*K#k)4kDN4<!%'(arcYLgh_=*C8U"J"`#a-Lo[\hG6/0`=H$9B\(3Z2TpF"V)?uB_5ajk3<5m`cV<Vr60#"ZkXCnc$K)@\`=%A3bkr_:^bW1aVng7%cFQ.%WK5)\<9^)sF*S=d'^Ff-bMMRA<U!^=(1KeC*e.m03P$d'_O">NK=>e4IB,8&c)kI:m]"X#[eA<FA3%Nh?I#-i@hS-ORc@n_%e,V1g*IIbI^;6;BF<P&hg#D&*<Nt5KAV;(7jqIEcDh_XY+`q2@BQ>-AC-Po+]/`:3%:ul[dU9QWLMP(&+fY15<@h0I+(8dfG&&?K%Y#0TQ(eurj2JNYDK*7TJWsH=^cmHVIXjW/32C_[dG8h<W-J/4de'a_.K\`\7YhMXq]$]g=qLbJ=4s-EsXE2gsC@o@iQLOPA`k'Q<%q7<<HQ*r;`O:)HK2]@T5%IM,>eWYoC=Ztu,Y,:\(b2utp$tfg/ZF4kL52XD?MPtiO6g\C["gr%,F78=5CN,IJjV'ph\(&]Z8o>Z>%*(,)H%(Bt&POqM_*Hh"bZ::kXi(rXTcNANoX>H-2)+qn1<L1rVkM?P)F6VApd?"ICbg58"kF=rc$7-?9gu:odXSXrGpW]hDXqOEf%\HZ:Ph(d4]7>]is[Wqd2p[_tSFC2bM]B^FCk\Mf`$V&Ss@#%l-Ra0=g\'eqN=80T`*DL0Y'@b?p<CG<(`R6=Rq)Igt[[F&lEm\u@%Z#h>eO"D5DB*QMl(UVq1\qO2G\YJE5c=t@'\]SSH1Y][Qhd9A?SQRM7)rI7_U?Tm<m<JB:dV(]5\CX_Ndoi9"Xu)Tm/=+TR[eZbo%l-*W$X>HcmUZp!e;\MgmP0nA`j(J"=>!ABM#Ked!n=n<PjtS*]Ni$kjZ/q_EFJ,S%e7pDo*+cJABKEJ0'W]HsMau6a!J#6reOJ$4%!k8k+r`)J;R@TZ5RaPrFko=lM.uL414W.C*1nDP\ZD)"n1LdS)=f[IXZ]F0N<A^87(29A$DtsiM/l3I#)aH!ifVa@ZiA*[BB1@)n%D@UlA:TgOJC<\K`/saX]B9o[Fedf#_^,de3_B#0e1Y^4%8YZp]$$k`$Z#I_bV26?+X]a/[%8o6O>`/[(luM^hP8R!F8'rcWhCY9L%*@WNbN")<l\$K-Paedl,R@HG7Nq>trM4:o:AWEj$%Z0V>:33>iF6-.C?SK`q7<U[MkJMA:\MK<-EYh:0r_@E*s("=@h;THLC$qLt%bh.Y!\P.)-?r9$i0\qeX7F<R3h9p$*Y_8Fn&(i)E/%fcQB=IV?%?FR+B9CB/]*a"0G#:S3b6F8mjV],Oo#5#7Bn"2,JTPf#mF_!m%Z*nqd[_TK_UiY_rlg[&)(g9"@\;r::cC6'/6@h>/%t`b"fk#o?7W12VW6qqYk[s7;Z9%H*E4+o(#o,F<W6<_:6X?kC)sYl=C1kRs%5ju61T2g8Id%d;I'HEV._!1'pKX4'/-efqU36TT4%)kn`Rm[TFHZih*/d#n>Rj`(TC\:aCPF9nVgp:@ah;8PF^l"?O2*>r@D?NXR%jVc@G?'_;aV1d&`BqOkEcA*<PCI+^#2(CCVdU^$)\+HB.SmQV!c]koE%#-]n'kT/4);#0L\=EHVDqB8Lm3<]s6HcAB`S"IQ(HS\<%E#+8mSBYP$F%,Vn]e\_AS21b<@=kupA8m%8$bBDQ-BM[%a!!4WXTa.W)=I">_C!=ZC,4QrPdbu,%!U9bO"3cKV.R5A5#\&Bl/O*h%hFcdjCieCVdjsab^%o/`(\&XVB"51mpDTI-@6%u1F*jrJ32ru)Y`!_W0\sFR&$0WN]t0#RV1*hfJ[Nb1QF4iM`?pg<5-?$4p?BWg%ZCErC\KYu.Z=Y!BLd5o[&6K<:FH0+^HSK.mf([&+">LK0ZOC?TSNjjE/;Qk\'n$I-RnU`3e_%:N*So;/ObPP:a,lhCOkF&6?,bTQ%1%Cg)A(sbu`H(!f[i/m11+VhKL,$63R+^>ETm\3iHHm8DA86[N0Z+iF_)u?A'10h)X"^FnTi!Nq7^m"E_dYIbHu"qHrRnlT@X*(A%q2i,18G?\@;hOb6oiCok1$YtpEd]e[!gR_kcb`D8CGD9"'jL&P`ms:fiU1[$._"@,koM!>*aA3*U7Ro%g:ckoDhb3']B)=WLkJml%Fk`u\(1sEX8#)U<-R!e;\^Z&lTlPYEnWt<>UP!qGH$*(;7,NpA6L5QE3%p&'iUM-bkY^Z/+V3?#Ykr)T&%CkOo_<89h480t4=f[U%iPI\FB3%<CM6E"jf/MW!Z9D[>3qdL)<b]T*)\ji(Kl`/APNs:)/kX>)qtF^OBQZDS2/:@QQ48o*7V*4S`=Y(YpJp+UM#CNc=GE]4%VJi2O&0>RtGGf)t3N)Q#/A%M-dmq$k^E+2/M"NKNm,-adb-KF>](4C[C/hHSeDhXK:XAJ\q^Rh++0-0:VJEd(KuQU.[788q]T/m:%70%h4S=Z8hIIhbHp@Yffb,;g$M"+l*e>(2t4_^X4ZADeRG%Yh[g"M8nbZ6ee\&g=J]:>2+CieOcJ';eIIOl@A@9co*X@&/"k!I2\%HljLhQRe#;?k^t1=-K'6Z"3=Tk*a,MeCZO!6$"c&L<M30V>4AsC]_D22bu%<$L$EAaZ_g>ph=-US.#,cPihPcE^7a"2>-R[2::UX%dRjtNDE<BJ4)6qJHmgEWl`:s/"J8iS=M;5%%V?3Smit2P0"YN:PaCrGa-RQ]YNif@DGTf(N*Bl+rH3+tTo4!XQgtJYGu3+aQFDpg%PaB,h)TLS'aP-U+f#q0]3T&6T.^">W(dPS#@ZJ&9!+tVpji0JrE#NF^"(ThsF00?;B=AMN,u%II8&iPV2n&h"0EtTpIHD$tbec)_%SIVt>lcZF^9m/RTl)cGrAdFq06.Pe^"]KifCa\)Bg+89U"d5]0L9m[ed^$QRhK,o'N0TT6]ZqFr6V/*oZF-T4hK.UA)s:(enP`U8%'MpIOX[>*+:!#F1clj!^Mt(:s(0c,EgIhWI5oF0]9\+Xd^g_3O;PS#EJ2ntVSVL[7q0h%BdMNb,'ZH#&I[6^1g_/75\?L[1M!)su%;1NOo!8ZHu@L9p5f$e[6l7*.fD%*(MJIG`unTQlGJEdT!$Uk*-N</\HQ\bcc)[#;D1WYkZJ8SisWMdmZ;3d.rJ=`U3!8YWpP!/B1%;1NOo!4DDjK$R,o%,00>8bq.RA6UZ8T:.@tO!`sE=;Cg3;EiioCb&0$k9S)KPEaDRT-j`tU.P.h<k(AYPg:gDnnOBZ\]A-g6rH4>%<<82]a.FoE3kKPM)JkbjDooVbe@^7R7WPWtDQ"<2oi&J7)V?m=\#jdZ^H)4VQH8Bi)tTK!ILFp?AX_5shC<'E'43#gT34.JmG1SH%jn3]SjON>a1H,RoTg6!Tjn&?%7<466#FgnB]RKSR9HO3R#$m_2IeI'rjf_o5YFgQj.PcNVjn5tKd#<bFJpI<R_dn7tq4`05loiX+%mt0+hB<L_KbMXV>oduffcfPqBg?=*kod]P/foMs+)lW,pqUoe0B>'rSbNig1RPJFH>:(HL$=_lTbj/mHjaO_.I!eZo.\7C:os50V%f12VhT%D:PX.P]K@Ca%"\nO-fe^*:tP(iK'fcNY'&ZJFboeW2gkZ%oeXB[lkT=r.M)NhUA?9]4?AY.G5^ZT@"]RKPW`-9q=+KqEf%R$+P"/'5ipGWP1D+5aB5Gc:H5QB-Bsam(fd1l"e35Pl[7;fCCoo(q$PoeX9uIY#.\<j?MheO67Eo$8F+M9G)TZTiBj]EjhGlc2lW%A/i3a5/)<51bA4f/Ua%I5-*SHq=rb4V<r2>R*FqU="6DIKNUTI5PqO2&2CPL]RKad=oIKA8m>-:1#oN-o(lMKKm2(jh:e[doij3>%eR`&O2u35L&:SMdeSi0LI#Dm7FOG1VYM\?UnG958X;0UPAWaWSp0%@<D`O:OYFiLT(VbhZPLn.;d7Isk>p?K0bdclBqUs[4k9f>J%jn2j-DE2'15M,eTV=OIs0o9N.m"4)H1O8q83.f<RZ><i3Hc6P"=[cX](G#%`o(qmIS3=.)lXPk9os=At-EGeiH2UuFD!AT]>$S#Z%!KL0%mC[`Clk]om.*hYZqUmM3TT@X`d@'*i*k+G'X:)?U+,5-=jGhB-$laBc[8K**1n2eaNq`CS7AEG4n<eBFZ`0GfJKAb#_Lbob%#_Kqs=9qlp2g4M2U*THW(O-?`IG;$/PGha4Cp6P)nRs2-o=iT7kWH<@cYgn7-]*3p)'48J`WjoS<_Z.u6Fk-rLGduJ,j<EQ/n/Vj%0?NS#jm@B9s4tGkD^f&2mGqjWkLJTgICJO7#N'Ht?cU<#-?K#_qmj6OLW:L'?g"!JFZ"=t]m6^a"0\oIE:DJ-in%>:&`3=#L*$mP%,QD=_CG_25Htrgq&G$8K?TZ)ZqYNuH'0Z`hs(q>m6JLBfZZ7nFAK/A1F7mI!(!aDLSbMo1:_@aF6KRL@,#m/!VaC(CoP6;KjL.S-%YPkTn<ogUk*V[rPbPe&RGV=LA#XdUh@;eL.-M9D<Iib^"Yqm\BDX""XK&]Mua-4q=-"!kBjnIW>'TaT$i)\h"_OO_60n/q@^%!m>%kU-t'q//uh_j5]k:#DZaThYPm@jA\9/bg9OeYB7UbJV#<B(I8c<eEce0Kk]1;t\CBLb6K/nQP$ngGeC[`uod$!c,#Q,Q3!>o$cdH%hppC\6(O\Beq2I1D=ulPO@sG%2[<79j"K:*IVoX)P>E]uM76rJZ;`nNALBtQ+4jSlq-*@V1n7/(jXQ[XMg"XdBYB.I.M_BhA\uoX%$P,+E)h@OF5e%Nu:Fh"MiLsA&amKp+c'Se.j\4p*hnOXr6L=,e>C*EZ,=8L-ZOL^J#'`OP_qSk@g`(Xa\a-XO5-/1uI=2KAL4iYQ%*lL8T`=<+9B/Y]uU<.fQ"0EgY[Rn=,=GbsSo#C+c>NIa;GV"6T*./goe9rQppG%_B7-MCb%mp2HU;*NgLu8LZ5CIW*[adlFrghBK%&+tLh4kSUNr*g13K=Igg[D(3kbJIFo2#>ahke$\)RtFW[Ad'T@d3TrU.R:dI:TPl.')[t"m+.)%Kmb!h<E_a%DWs.<k15k.`%1r1%%s&d<Q/7]nJ9*@$CZED.g)9l]_7i,rMKkU7`9o/7fZE6aN1O?En5Cd'bc53aMR$99i'pn3\sND:,SPPcfF`!ZGa:`AP6b.#_joPr%;TXtB`eY$[JZ&80E=Yq)+H!GsnS\,JB9_2dNh>H4cg:_#9u2TX+6Hn&f_qS0mg\RBr:01AS&Sc4E8(;'?,)A4""':JH_:]%'(2&X%%u2?;qpP@EJq!#l9D%!2nV):48`a@OQ%"o\'*'4B5eK9#!5sX@N_tpF]6/\;rAqWbYht%V.^qQ3*&_^sm9fVhVV"6u>e[bL6!mf1%?QT!-(=l862Ks*'kJW</"Y@WOa,^B504kje?1`".kTDc)k-1p99q.+u;__e'dRuV"W(49KBH[Z@mUBmUKOmN<<P%ul66d*H('pS*%:LeVf;nMoprMC6;!/iP$G8'pKKntCrY$K%%CtM,RW2#D!$kDM+c/euj%lY^g)3dU*Q\ajdlg1CG#mSMD-d%P9#<WPB>@0+H(.#We%a\:WaKB'1nnhWVt&E1-+`)82f%\;L2mTR@L7UAt"-[#,]2mqZ"GJ9%ne6r@c@3J[r#%;IGE.VY;:JMR8&ZaN71`G8t1CtW?.[iQ]%^gj9>3p,ii6JffO<Aff(n[Oe>DU4ARSc-77]GWh)UJ4`7/OjW*-e&6dVKIl.%8Lh6`[9Volu-f6Edi4Jho[0qZQoHa#tNmlIGn:]%30W8q>0_nV6Y7;tlJX\?:n_/=K;c8sLp[rNWTA:I;7a(ffa2=>#=lX$a]FWahk#&Qc/%(sl==J`D,X?jo.r$>h6f.,npe@rlM*9;%k/K<^J%[6"IJ^?!"WujDE))99`)cgfLN^=I4A=?@c+X!IK-9e_CYo'b]-nY!;o.,.7m&""H^PMT"kr]MCjl<*8[%O*.9^u2;eSjc%CJr5TCCkY!je)+Rcf>S1F+/n!9r)]a&/&D=V!bE&_MCt="lVEk51q?&i8q6n-P94V`EaaL0=&Ibc;mC,L2pam:or,*gdRUL[LfF-%<Rg3LR-@(t;op=7+]cR7]NC(!8WOr&8IcmT&U1)B:@I$+W1qnPK\4CH3:2=11iIu=ZnD("a5/u_)'l'LDW+F;hd2ik#jb+=h2iM"%H#HoY^nKT5=QdC-X;$U\%l.gmjc]>=1rDkcVhee7==I/JbXnX;i<WO7N\moF4IQ8`6ao5Oq!IrnhU=6=A><IshP?JY,iFGHH1SCj%7*VF3ggn&XIkcE+P`are(4jhF#hQZq2#jF-&tDua$4)=P`IU\Pn-GO_P"HPFEAW*(:L[Z50oIH7<06:RU_4:h`BC\iUAf!D@(qlK%V]_81d-I->e>e1-Yu9mjTWIc*8D6iXDSH_QGG?]/#9HN'lD,9r5!0B$5<`dVrdFXb(j]r-^<jU"So,l`@tRl4,Wj(SqXa\E`h`',%(/(#4!qV_6R<TE,Oc8OQZ0o"9qh<9DYh,r_b$$"/gL,"M,dBQ]He-U$.*QlJK@nFSEZbja,#N28i@XEqokOiML+Xf\Ogm=)6::)R%l_lX'`ERTEk(@cobme^Zc0gu(i`p\q$jJE9!N9kd1b0$?_iRN35TrI`WlV/mp4iHXP7spLiEK85MlC8Y5Di_F#dHs/7/!EC+SrlV%F',()rCq4_LBLs`Zj6K$P<OF0BPh!:+aknJ2;V_/2]pD?Gjq+W@),K+b]XT2LBm.pZI-?Le_Qi+gFtZ@L#B4N18m?+f7%"8CB57i%?mjPC&DKVrpXn$LRJ'"$@WLc#S)1t+9gsHU<G"t;\dC@XCCD<Q)P7R2KZB51@O0$P)@;#7L\;*#6$1imP8O<sM=A@q62E]FM=A:o%_/POfAH0]A"<RSVg>"jAL`ep*`O%ATM//>^7.fi/"N5VI-jIrQq$+)Z+i:0ss6,IRYa7:\m&<c*JM039gf-jaLIm#.V90**UJ=0d%V'dco\hgS=XN)=b5Xp6@&3#6PE'Si>!HC>oIn&W%4T-+9?kd\>NRuSUUt!^_\7BNgDC?/S*9\tem^hrMR]-\qfNPgmmJ7S$_5,OS%hf<U]r2sXUj*n4kGeao7:W)9>9]OYi7'WusX0i$U=sJA*1H63P-tBoIfoJU9K*.5drX<lk^.as;^f"_2>@I%b>u&U##)&fY`@NHH%2`DYM229"s:BM`h:@@$8HM:2;Q"'91%U5Xt>gms;hnQa1&F3Z]Ze(L?m`\7iHc:S&(_24.G&2L)2-t13hLA<XMCmJ?rm\nle+8s3%)l"^UcM_k0MT=MtpkSNb-QJrP'>Gag[Vif3Gn@+/P#A3Sr+J(Z/$^$.(-$\%0U2YD=HSSFI#jWSLfT"7+=3eMCVeQt=[;99=6.r^%a8^No?dnu/>UQ"prBr4;G<^bsoU4WrQi'<_;Y7(+o4r;1Q/_M&qO7<_/Uo1,[NWSR)Tntek[&q0Tc4)KX1nH@;ep1--]+t-GV=5t%<:0SN[TplV+!EM7K[7**H2[/nSH&`Jj=o8@nXXMo5stUeX]u>:WJFuH,CJ!J._'&!0?5sNZl+`5_mf20$#8W_L,5"ZB7K6YZ<N>"%fP1$0n9WP"q>,6qgF/o<^<L#u?.c__["E\i%q@HXCsMmJ;Bne"oiophI#7&&l_ZXpc#jh@i]'!D*ifNFe+L+0VE7'1ZfJ[&Ytn+p%$4h0:mU,$A>#(tjS%1\.=f=td0A38\I;`VAZ>k._L\HukBfPUpeOYPn,/"Gcdam:2f^MFn6H=@jcjQS/H9ll3I/le&)B-B+5S,0D%>BND-lq9/*Mlh<3-C*\n*R&BKCMd18b+[98M+bG3pR2+]WP`o+g(EBdO><kdX^]s3=Q'`W-Z]4Y33BRt/`5OF66%uj59D`aMRDXP%cK_na^?<LI.<l\mjipWi,h?Zm*oI8/p21m%5\93_0B[4JO/\g.;E5;KMlF'crUL]!;K!B+/^k!)_n6fme0?Y,%0Wb\/0(3D>n\Z[%*rfX.*Ci"Iq8'#)^&[^jCd/D"g5R;aaO#4Q4,B7dQo4gSiNflIBg5kk?U*FVM7oUDi788Pm_sFMK*;nX^Tfj!RQ^R0%8o7rSjdVD%*0j.NT-\Zr"(sMG^=q8#k0:pD;mL9qoFU8AH!Yt#)ajhCi(j-ZU]'mu'NM\.MrH\bKM,Y?AW-BMc(.$[,/,&Vh05UJC2^s`i0F2?%E$cVHbIccSgB%Vo]NH'S.e^qm!Yq7*j6A7r,n7dhnaV/l&Cl+Tl2?$be4e-3pr5HEG]a\!N+I$HMd1Dkp;C\eiIXK+c=:E1>gP%T%6Ohi%l9l][=3ihEek<V%YXEol&T`r^.i^>)V-7f<=bb<_1shZAi7'U$P;8cq"7jqfJb2D2RWu*NMp7X-?hWQ+/M;F`DNn!Gmc36!%gA3p_1[tTo0#D&IDF0UBi'3N'@UfS$_OUhtJUf2fJTq">gZ`DZI=0fn\P]Fpmq(]Z6$tmJ*'lh_<nuP^9]&AXe5!6T_6QO[?C?s8%8(09!k"d&7[>R+UlgoF(N+=T!cr:4/eaA:,.2PnWOAolu0(+S^M),(ed\o]+5GY3$;"a$lO>-S7P>`3j0b1D6.]2GdInlJao1Gn+%bc/ipa&[E<$tm!I1!sUA<hmoar0ffZU<OraU!9e\6((Gs&T&l]6CWOq_3dE]dq6BJCH-ph2KMbFpBqs3-OI`N=3'SEOMSA="/qd-%`Q]jpDi*44a5[6('N%"k@(`UqiIEPZ0#h,Jb8h)?9&q?YmB6R?3T#+oOuG.En8m65I!i,YEeV(1fZT`\8:M4SK,R24"`8E,+[h(p%3;F1d*3XA^i0r=hC]WS8N"hE%lInU'2>[dG0YYaC&fHHb+;RjDlJj'4mjH\/d\'f^Sl^X+D"Bn*1Gag@io^>?Lc1:OSZEO<n0+3B%4U)@.',7NTqtO:H9[&%,LbpD,fKR"p@Ku(U12.9r^$-Lp>fdnJ__8YR,>R[@h<48^P)[MUDDr3Z13^)aA"1DLO:%><4r#\_8r.^H%D=,01p/hA.3+OS@HQfXTCo`cU:8Q@Kgfga8RQe`j?"PQ\!&WM1BXoh3?K:RFBf;Dd,<[l$?^K>Ze>ND=Ai$VsP8`-?2.TsNRLRe_%i:KK_;YgGbqcVps!)*e2;]5-(+I=B:Ag':@VnJM,A#]`u,jZ2eAB=WS<b)aXI>LpTkk#cU<U`Cb[qBJT"hWS.`85S(ogn+a3+ND\%S`<bR^5nhdkYe8o]YCmiqqRa(>dHt_49U2"/l:.qU:c`&qnBmY2fMM<;2k(c:AIH;//N'+YE*Lk\1SbZ]`N##NoZ2$Lc//Q*pd5)%Vl'ttAYbI`Eo<)fa8N1TPCZ7K_:;$02;]k:ba+<Pi/3%0d!7c!*1++7_GOer:YaRKqUqVr]SUm[UR0Kf0i4TR.[=)2c)=[QiDo<l%Bepf/lccB:)(eeDN'(@=2WO=s=_CF8RIi8g%,G!b(ZI!@c"pU!1EO<!F[i:RAB.0oN1K:!WCfO[4do:?7oUC$]:_d@+&QafX4(%3%EhUq:lZQ$$:ltYE_gSQ5KJK3l+L1ST]ZWVm:B1\,V3Tj="XPD,Q#dZc.dCSOV$Vj;U`0#,7&B_#[ZQmO.+]X$BO%WU%gu(-$)WeV%e&r%>-bb82dNEC3YLNI^Q%m%l*3[H\f2n<b34<FQH4>cHen[1@H4=TlY(gg^D.JXOCn\rhn@*MXd7i+6*VFa9XdDD&YqcA"`QV@j%@o4tu`UX_maKfBqbbgeq!K3\+&QgDm+N5<RAroR:bnQu3"u^=!7G-@-J3W@3@YRMS`PkMg'2>9T!of2l(eL@!>!T$08:>ee9rN_&%dnRNX`81tDEa]2"'JijCTp7l<XO`km(`@opo(cECR#.b6"#i'%GBt^fh1Hg",&F&&ba3'(+dLd',;?61`UNV)&a`PI`PK0hLh+nU%8IE2h]eR2iD`C,4$RQikL_-ITDn"%?i#>i5h`"G)/A%"\P<27G,]\Z,64?i9dRb@u&_'`6K%%:%oUaYc4Ia%6lI9Mc]nYs<>b!i,%F63U+"a?k>bNLfckBD(6A>7[dg^5$bgJ0:pSJDku;5u(U4a#0ZS@sd(R8YM:7U(C.?8rGi+4PA:3=NgNB21m9lGCi:aC;4,FMo1"%[B%a1l2*Y-FZS;+WeQ@!c^]e%]^;[3D%q.P;154ja%_M9!c4K,YjNTm-ZPr'ChR@],Lu"hMI]9Q;;Elg_BID`fki1%4!\7?D2984%:<8p&]*5Xp$H?Y,Hb5$>3oSuJ@B,/]@"Zp!ph`0rVtp.KIEu+DVWOQI8`[nJI=TCunl$T"G)"KT;_YIJ-!`nN`"NGZbJ]nZ!K>d5%U)L;)>g8nJ-M`VpONbd0123*eU1%K\%o&E;W3$2^+%6j"GKaa!01l8k%-U>>Ga(D<UoTdYH1A.]I-A11UUjMGNV<*MV-NfdWg!mu%+2lED1*O=>^,Iq'WFc9#W/9DN8JN=MYMDgdllEJc_no'4+J)?neHARo,&OquVkF]VG)>+kAD7X*HQ3;QZS=Gpg&VSCa:CCiW7_?V%rh9JW91e++^64c<I$pGgDI:`n"ga8(11\r_Ht$\=cID9[E,SH78.SpKDrIpC0;>!N)fuqL<8G$EjNX/8%ZcRe3f1O4">2TF"l+M1%"(U*qBD%('0pC$6br]@in/<AH`4"6u^/5.V8>0<^ml5*/Q4<Zb1uVo"?pQUFZ&E:?%Sh:i;?Z>:]rDn]lX;'7[LpOg;L@b>0-Xis%6!Tm6,Y3S5kq/-NTT-f#i,p5^FuF@P6BMjDMTl77;aZM',RgleE8?=;/!<Ld)8Zf7mYrsnJaVY94uhIc0!*drlZ'<uEbkHhGKuTn%I^tYdbO]njiKkgWT$Qn!B;PQh[a+C>d@T7bCUinB7UKB@n/F31bAa@AcC.B[0I(2rU9-7,@rdV-#K2S4MZ$C,KBEVkd9=c\U:%:N%#*HMh?-CkE"7_*+ZE'lX[b=(#(YXu+K^)[m&?Fe8g/j1##?qhG#rA?:J-<fp+@a),)M@Jo-c%Bt'SgY1Ju\-9;=hPAE-`.6M`u?I%,#^Q,.rlQqNJ&KRYfJOAgcVPpr=[#rk1eW*g+;#tA&GM&)NKm:B66GWn*I-oqL/-dXmV*<Q)fCMQSaSnFn*$E->q4CQh6gTX_=%h%4nFp,Cs(TYUK`kO2b<d^d3cU[HC]f`QQh789a^Et_%*e1>'=,WV4Pa[U;I,me0V&OWXQaI;RR^^qa3r2E]cirrJNeJ4P^l[Ai0D;%_L!N[EkkOg(>E7cE;ciQ2CtTU>s82>Bsk5kkKCCcA[L$0<32pZV_1`083V:];^IK34'0:s8ea)O/de=^:O834B?$7HEhOsf*g)+#%YmdA_cDKI\X!_KG*5$/%obq*$OVBuc\'(`;:*'5oTkTW]$cg6FZ-MK95b^G^<eedgZ=;lB=To>*1Uq7((60;B$>klf89jJJ94/^a%6+p@Z%qG+RMnpiD%W3i6-C>X3\dTo-BgG2-,jLdG1<JOjA*HF>9Nb1qLBmE$12=8!KbPE#@*6S+l7`a[-(hW_1m^aCaN(OAhhh2X%%N1TJBeH)jcB@[FlGeYT1W5%-*iSd(3IdMILom#id[rNm$DG/ciBI%D`n4Elqdej13d[!Eq^hnoJnfA+K5]K8CA(,cb/.jb(pcAq%i!Z&SYUG_bHE([<[hG@uV+D;1;@.7oOZp(1AoBMJ$l;+FJ^R"Z.a+`&GaB,.:gX_'8<LI:J\c]%%Hrh&gWR)Lk;uaZ&2Ql"YGVa&%BM#9@leklhHUb?Z(sTV'+cp30#H]C7W.)AG1mU&4bkT(T"uhb=<?#6QAf&dc0t\?f.;"?<Z/NZ0G4G@p$no4A6!9+Ak;U$jbUukM%=iTs*H:DsJMa:pBh7kY?-"=V6&o5nNRTTM#Nm.tcZTc'P_XM$e%hVU&PoF$<q]V`BB8IX+%/g+.b@7:(N#D=V86XSBR0qZp4J*2\%A@a#>Xjo^Y.>#R%d-ldro&aci@<d-HB]]Z>cM(DQ,I4fmEr2iccs6meqY1(%(I>jU%g5(G+UrX9LL=2A&TS)1G:<6U\WKh@4_=kk%l49YH6E9fZW<<8-bsdKGBNDWi`E2o8pYJ20(VXrCGHdhpVhN'bZ(Y-h+'QDdh=Q#^S;aO:86s[\H#6pa,0`N?^H;V-!m3T@ZsoTK%f:=5q[%#r4\MC4M-$Te[,%`^,D4li3GAoKR<M+a&$6:7%YKXrqa2AqCLobJZZ#d0+Z];V<YsTL\%3(T=G-Ot+ITu8M#OtHr(TN*.%M-j_9gtB<l+`'Me\_%c<`V3Wn#)&c:5m^un,>fHN2*[*n$Y&ff&jgW@JUNA?C"Z!Kb;$`s,mA?<$iW#qjG_DQC"\GtH<.q\A5HGJ%880N=@69*;IeHS?^Q'kjTP#gdGV?K,>OK]>.!HFWh\MH78p]4^d:g?\VnQR#L!4s>I?BVWm75+`^;tK_Mr+;<VnVZWK6HP'eJ=Q_%F)*Csh?*5gWod3\4[!l_$HkD1,^5Y4K-rR;A>I(Pkf%Mu+pa'^RC5G*I'3,WfKef]JLB%[ECrW/m9\NblK5MhU%+Ddn\Olm7rnqP%/6XT#X-mqclmFbF8[W$k:4frT$N],)##u&IS!g\)TW^Tt`4YpRR[$r_Zp4Ek2o4jrAafqdBqgp*8EnjJqT:IQ-A`2!Y.JFlCj$kJ%h91ZD(VA=82hb59j>#(8hS:9nR#t!<h[.$7:Yta2,"8A4.54O4Wk%?\1d3n.DY;@/:qFrFSREfrI+6n.,,CIC_&`_R2-lSO5f,'d%A8u$e;=B'CD4#ji`.E2).l],L5OrfVdis-#$cH33:Q)+-+0G?7MsScI^s9]Fbp>DQ6AL,Mb?SCfq>]b7/p/")[R^#I57e?f@M*La%N[)5L%,Uuqi2'eGUu:r>*iV!BQaACs)MrYH!4TRl=S%<J@(V7gV2'$olmK:;HlF=>=r0Z!4f`6A7_;%tHq=#<p6Afg'&C$dI4StQ%me'@E,ACVA=r%$-1m01tn80P&-lPYj1\@!>fgG"Z<CBurcj1CEY`NRc/OkcGFM,)bC>'-BQsb<Y&R=BJ@>,_>Y<>f_bue1W9J*s'%esCOp4/c$B$hIGhZ+dS1h=#0UW9pF$=E5ctjpjd7M1-Y"8=L-GG>\a'9h;9*04cDO=u!_`j["8YgaIe)Jn7XW4C1pYMO^D8b/H*R%)2QqS:955W$<UEH4n(jfdI'<^UC(rkPP!Rp:Fnj7*1c?4.+lNUe6JrXbZGP9_71rAKAfX(gnFIU='f5WNfRGRh&*A%)d8UQT:`b8%II);48g`UgVDmJ[E1=$3oe\TqGC3eR5[%9WSd40j?L5]A"l&Zp4\e:j>\>G."Ec,k(Xf)'7rsieM!h0mg&o%oqg2c=!Sj6[;;>ZB%MVHi01iCo*p>@X%4chUG54e-WRA`;oU&#94M-:d7g#H_SO;B.s,Hg.n@2/(?+iJ4n33>OZWQi2TkeVt/Ij3J9Tq@;H%JD<\Bqqt+%K_d+&%9r'9Ap50V=i$L_:o1K8/B/9(6oWK=CCE*h"t.uHPgs:Kpc)k+DZH1.X_VHmdosTQ`5?aIf%f(\:YpTG)=;s_JdB8Cd/_MQ%?Nq\f&%[bd_3T+A3c+9\[)4lJJ*`'=&eOEDY#G&*DoU>12gP+3S`+AJ,;_BZFWI5nhmsKZ(7$*>p*cqR(9JBe5BA6Hd:tOMp8o@U%+R%1$?XS]E38ao;]Sk/`q"morhd/-WCME>L4_Q(2T6p4iP@$mjL:<?g^M:Y:BFH*;VA-7.-p[2q?VsDrbCfpV:ZABP$<SVh^j-So%Pu>CQT`@p5,,N*Tg%V:?))7TLVW7GIlse[K7VALAB;b3XG]l3Sr1PNFpY1>C85ZOSIjV#.qm<9n-f1p`QG4sl*i9SsjaGKV]Fj.H%PqlU/TW2"tQ+f[<a/+hjot.Y]Z.COT#l"3CGA@&+-Ois-I,Xgu+0<SFi1"iQ$e30.pj#YQ1".LDd-7*G3el3Yb,@!GLJR3EfT'Lh%A2A.*eNKFk8%CU8NB_Wnc]+,^l(O@=g<#39BHc$_]IZ5gG"^r;[r<#,5L)Hp*DTh=QafDVkK4M3"a0(T(V+f?q][DsGJ:k9Et*9N%qZoB/I+rqWiS0B0^A*;Nm_3VOJ,TSaLFA(>h]S3fATEmPF%MSb\s*uTNSY>:P?WD.$,'JkS(Z`PXC>60/`,=ppZ8(@5=AP#Z6kHE%&SrhhC^-<NJB_h+ogNbUo%^i!%r_nh3tTK=#MBZtE2n2Bd"?rV-Y/foq6OFbEY"b>0*gi0SQhZpPDAKO\<a0#A7\64i:W4J]3<UJ%TGL#3CF!VoFXA94B*-/E0O;r'f+MEFG^8*nL@P+1j`TU&><@G)L?MTNe>$Q:,V!cn63*,jU5q51]H^h3I-D<p7LF$$K.J+k@>#Il%3E6/u4`oY$b"M6!pm%qNiR8\D*!V-u4boHIEliTg>f=kEH2NRf]G=2L7rQAMeF>5BQ1*UFk#r\M!@G+4Rcd4Bg$=V>hc;nW/Y#4i%BO+$JRTY(h"j+79g'q1Tebs'4*qJ;=)T57[L\Mf/g=Bng/<WEOqS&!,M3Fl-[r8=EpMF6MqJJp\l3N9<Wfhd[`gIJ/O>*201#ib9%a-$s_Ze`UK,>/S)7PPQ=I0`)Q4!\F8f`oNdRP,;t?($KdmA+gPnt^grG0Z[:TIhnpGn4\*495);.(8]I-S=tj$D`E3W>Z7]5Gs7n%&'.LLg,e^dZZ$s2@3WX%"G7BRgeFLg2+/gT`AnF2n7<&@WEQQXKr#3P+*^^WFU+_Ko+Hf'<MZiTP`KO-T#e;FI6!=%/$huVY7![k%FUY=nZ,gPgS%X34oIrh!D,?E#52Se?6otD!>Wq.jiX"?]Sj+&LqM4TLOQ-HBQN+mr_M(YB1?/:+dfeGCdKG)_6lH;U&<T`@!$Y\'%aH=EAG`e6mR<r)/c_._T[\'V+KF!3l+X)HX5@1Bir#,hmX+CQ8m]M[R6$*1>URZ(c)OOq1b"k+Ro&e5mLhL%N^o8-lV$W.bW"c@l%2c3KL4FWRc]#[tR_F?N-,:.O$>OFYo[@:FoIrH?ARUnR2quY1[\(lblA`0n=l>i5BgYV9)kpmOqG(>k1C7#X-1qlqGnAGuKqKSkM%iD+mQJ!_I3<ON!jh_O'iS[qI!iXLb<=JALC/Bnf!L;]Jc,R:>@ap0^d+BKs1nf>Y*`a1(J!=o$0/o_(Re+"Pc!&,[2$&7RITa),e%Rh'aKgs1^`A3h3B.q4+bbB>+F3NYGnQedHLK*.G;6"*on'(#]2_mM(P8C5?B[[Z$6ON5*eLufpV,[pek/Or2792URLK$`Ia";,c2%SFXLA+Fn#YJ8")joH9H/.KH-H'Va5h+@I$Ae7JoVqaM,0"-Hj?VUp'pH<etMMhSNa)h!"060hNsP.k8T'p%&@.cs4cGl4um[[6(H%f^_UT@]gS:jfo[7_Qr"UUlNL1=?!%dE54SJ`'SX=D70/q$/3s?*(Kf3=U.2I8f_b;G"W,j1-Z8''j4_+WMHI18'J'UG,$4k;/WVr%15IN!7@"(cHtgBI*a`b*N/@M$jtpW*lu9C/G-@dRZWEMSS$ZXn4*u[LZdn]UZamDDQoQ+g*Oa%[]u&"H==0O#c<arAChgF9bFQ>`%bh;h#***'e1ip+GDj`\6Kpf7jKr%6+lkO-X-4-tPF(^911M9ARPRDi'B!(Y%6$nl/Xhn/Urul`SmO7mlfrMui[>G0.]<bRus3JDl%a5_qBUt9Y%bo\'Rr-hUcWD'0VW/u6U.%d&Z^%kkMGsj=]:I+rrB.DpVV6j;r,g_STPh''1!3YW&KAJZCLqLauUIhHV53WLPc-^HJ%(5hNTlIUe;Dq7SH^7r2#h>kD^GX]$fUEH(1]cmkl4b>VRrkJ=LI9_#MBIY/rW9ItNPt@iar'c\m$%9o$@PWs@6e1-9Oo>'7IN5%7%^S$neDm(R6:V;b7K!u2N00Jc84IYcZ,q59S$OLat",Cd9[#i_Y\t2PopC.$#M5UFCUnqa&&k#\F*_iI7).#sKU1jp^j^.!4M,?!m%8a4FBl;;fgAM&LS;O4(,6'*c+!Jq`EHr<L)'9\I(b%@kQMMZ!jN?JX+M-ukgdSZE@9jcrGajG2[PL5_beYDWXb?EuB')2lTJDcF'%YpCAsU2e2fRQ]c:hcB_B^L_?ME\\L1B"rOP#ku*IEUO4u3Zc_X-g;'C]m$r,!1%3t0+:K1_/aO'cBtk6S9GT6isEltKE:.-.[j*?%ENbmu#s7kU1,54h,Xei+8YVA9$C)`q8b>(V9dUI]dGOEVSTltDa-0[93?!tE@AkKZ-$W'76a$khfuq3'TFuLF[7*aH4V]'HQAW!U%ak3qDPMQ?kMWdPSM&;JP!EVb\(X_;:,SP1K6P2JCj+s1))MmU8.)o7:+])$5d_X:&<1LHRME(osp5Wo]V#c@4>"ch;Kk0Q']1Hoq%%D71Sf`Y^Qm"`XV9+R4j'^.'W$k!]0SK8XT*qCk5clh=G.g(>+@lGWWA3#Zp'1N%6D-Zg5+r-C)9H(SibGa;"+@Bmd\QW0n*g0Y4%'p;H%Oc2ep(0G#pV$%uBjV/nB#*#VUNY"o4"TU0OiY4sbWQQd]"\)&FAI-audTbhRK9@?0VP5M2+;7_3VW&`b=W(U"_.]LqAAo.Z%d-]et<0Ap#i\D^AojsMt\hYP:NUJWWKsDu`1L-6?)"D0nCXTQupCk^/Y`R;=";tb"H\oG*-JToF6pb3b7b/LrOUD[5P\#qYJ?i\i%/TI^7)&8;9.7qG2N=%(PbK3^?8\1/i9&_1]8\/*"ZFEH@-PNT',T@2#+S5h0k]2SRd*GZj&8D#^<$3K/?H>^L(d]*HXJ&<u'MG_(%>u%+c:3r*Ndhe8q1/UW9AW.7Y1o!g#I"AR;=\,6FNk_)T&lBP`"TehL'"$sK?5lGK39:?A,R?Z'N6oEfD!Xt))0\q%W'csUZO'6e%loi@*,+=e`9bC;,Q)#8*N/,?]3jI]_1^A",)p*>n%Z-QLiQ"l=8Aq;r?W9KT?_E#cB7,HV(tIVF-H=$33gfFs&U\9-2/"`_=jTlB%GiU5^]=8Q?,ck.*)IaloKiB.^eO-OY0dp0,,lh:M[>?djB8A)D-'#g*1"/a.No==ob32`$PCuN)8u>QGO:ulkUpNaA<._hNH^UhJ%A0DO,W.agLa\\?]ZCl6GbQNf^4-lPF(O.#bihS;;71d>#.1d%787YkWL767U5^XFbF#(CY&?2"(8t[^iejc3?n5/l=8R.FPP6)>I%.(uoETb+'AYT^k<lju05GQONn``/mq9JSUqA3Q6O2(XaQAYN_",g+MJrhtd,#+IkFAW.h3N(gjn2OtDS&F<42@sARfk%b"<$1ppr%%<5u8:>]Ta+q>ra"3.#Y#*k<*7JJW=LA?q,I:/:<eSJV?.]Uno8dgkYKUShBdj(]L%%=-u2id$6N`0&KbXBm1_U?@_aH/A#<@Wfd%XF[@1`h(Q[U_FREW/QQ[!Ac-C%@[Gjjq0>aE>Oe)EPb;1g*[HX"?00mVQcLCral$@W"oA\cME7;aF$Be9^W9DS);p.&L>LDW%<rX%/r3Jk,,S@E("f$MX.tQp6roBB<Q\hh1aJ_"[n<&FK9p&;.3\)Ccj>ubj\/"@(Z>Xe#%X#m80\?<67$_#8K#PFBO[dZGY(H8-GgF]%;&L[2i^!A:Is_']SQg+S\L4>"W(h17QjZJ7.5R;K49c3&?j#Fl)hi:*D;]THd6BPep<Fcu60>_%VRsicn%Q[m:Sq$a-o+?5R@KIl%Jl7rRN/YA'!'IcT`c^$+RuD?XEJeDA3j)1E1UmSJnO$dl?&sUG8_F[s'RWY7M;:@=5/6?QiJ?+nB+R)]LpSl"ElLkDRn(=]S36*Z%=mW,-Y#pfK*Zd8c5)/?j#Nr#(8Tc,9=4/K)FW^*<m!su,5'Fj]OAQ*$Ij9uh`<1J&3VDDbm.km2#<tMG9cD=)fQ>7W)'?D&:%FAd%O%U&%Q&@htj8\0`:;+PB^J2Sq?9I,:c-4^eNbmTs]lW(jkC@_KQ]AtN4I)L4:VD+8?FTP\"ED2u4ncr8n(6gLh)m\%bhb/_pB1p&%%U"$uj"X0b7*<r=a0bWC[nAdR(m;@\2%Fh**_DmKA)-43;15$!j\*rqDWrka%=/.%f&Y6JE0TGiN\3hdle=EYl!obAmNm"W;kMJW%*Z,i-^>#5D,iQ[+"tF/I@t,Oc06;1#rT6E9a?hKT9qM[AckiHA7_l^X`u9]4oZM%m,[mGEZgVCI%PCSmBTCi`rS4$$1`#<5nGueQ%FeS='Yn(`4RR0lm_HiMp++=66ZMu5Xk[01ebl=$^cM@pQ*FLqqDLLA;-o_Lb!%m_H"HBXQq2t<?P-5W>qKYpa#=H@iF=MtiZ1!u@%fBY2)^Ikq[S#M&F4FB\3L62$4/m>ZKT&8)9pN^<Ah]<0?;X4p+:;4dV=6R<VS9RPqDTZ`_\aot>4YD1BA&Tf6NTbQ/WBLj\U'qLW%m]X@dXIOD++'F8S2d].2K!D7J$"D:!fQ0_@mbA65d[,Ak;$DQ!WTUoj+K3rdi(MlEg2i-"&7f%MBkp?ap]R70:3E\hVYAMc#,(Tp%q?VK1#ta/pLL0X6J(t-WK,GT&0X]ZY008ZP`LK((`c?Og`FJ)RW0;tL6u?^/FS@`se.!C6,Q%nf`.s%H#B,*F#oZ`Km?0uH'O<gV%+3$;#UW8]Icrphg*X@gcp;l%:5YT*FkT8#k/b`]cE?$tE5F.2M]E2EFd"mg2$`eTDof?IHUS%^J\#0^IaP9XBU=ld!LqtZ:3I$-@%i`c;NiT7'FNcr)G`aN2"k2^F!^I$VG5@)rD$)V4"F"(`%REt=_Ukk)UcaT04oiT,BEg<5o]4*m+UtZ,l1*77]mB?#2J?FS(R>eh&%;d;:,Cms!-q$`eYc^&%Yo16*Y4/:ULmKKmcS8QQ0/b2Y-$Sp2</KY!K\)7(ach'B1Y:t[ZK"&:3M'q?%1ZLlS-"ehlAEG>4$11DI%mjIl$V!n*25"8>/bSBH6Ju9ZX/(RkQK@/pd+<%SCo/q*."$i?:"fFCG1-b!K44e5&)EfinQl3@.=f5MY*U</7,W*r1cFQ2%#7e6-%N)16EDOG2dbQJ@"R>V/`?8H5]U!#=.,^f63>cHU:?Mul%'0D'fKj2LM+7W7\:1ZE[!XeT#1q?LJ1/61&7Cj-*GoUI(r-BC^[sC9^%6J,3MU;DIUQgLi);))chHgeK?9EgU[W8)P\1+r1WU"2(77QS(Z\SI7C>Ne,TGQD"l&1"KuE9p^S0)I@`PDU_2o<\6j4:*^bQ;c1A%JltNN!mJ4o@51)OB:^S,gV["?[fu7$h`ReHiC>5;k=CB?8rnX0EUYZ02G+"Yr2;fWgnhjFrn2OL&Kb.l7W-OB'$ncr4B<G+B7Zdd%=2Ie\)&UQ`LqYc]j3B:\aCLMpItK-5:+'pIdKi<;Db5m)E@YHR&%Q(73@Z)SO/\-5)5`+K3Mp3cMV>p`$\/WCGp47C\g1*im0"#X%6*F;)45WU[2tV'V@i[T,4Uh'WK-?%hp%[a:@AZ1+N6$"CE"L8n)Q&cYC..W9@\>j5kK75@:pQL<dg.?6LUBrT*raJ\QSK?C;&El&%K`^8U&^*bUEnVF/cr8M>&GJ35737RcJ9,bor;uXRFHQYh+-+e^\%IR4Fa8iB-JY1p>Gm+)I2%8j.gTbV.A8:6PF\9J0]%Ic)e""X%Y89@0Y"A)($2Q4]-TLhqK+ll8YV3PAc3U4!/Ulm!rj]\+=%*UPE2S6BcB"+'/#[Ht!!W=O/Ags.n^Win>et3$$CAQ,q^J%d59pj9%+$$_kKj2m&i$mGb7@\5gN]X^e8"MqhC_'kX=a#A9b@_P=A?&rhR=/8P^3gEQs48JI3^o!#lU!QM19F)XFY(i"h;Xt;ku'efpkD1e%q;IVGdBAcmcK^4A?.(i@St9d0Ih4A=N]ri):UAD"DM1Cc)SRM."]ujq[u>WZjCTH9I.Ui1a#e>]]tHV<Ld0o=a;0fG.G#KbfG-/Z%Km(#h7)8iQ0m=^]!'rm*I:9<@nU$N(gtHL[ES?n@CpOg<,Wpr+jg33eV9gUl[AXJa,!s)^dXJPu/PLZ^;:=\4-NqKX44PSl(:(H>%e-Qu)R2%+jZ,K4WQX;ZbQOg_@1?%u4s.RB%\GYEW/Kpa15dZUZR300+YUPAqhOU-F$a%(Zp-M4Sq?h:epi*Dj)J.4qM2t4hI7].1%>Q%4-^a2]VW!")(#&st9,T%&[E;dd(>dVNOj5ZU4MRR73-6jeu$fWt9ln]9?`N5$=);:;eaur7$a5oD=?Y`BXP/l&A,H%pPePAMB%9)4FZd_LR71nKLUb\trMD,j>Q!POE3>3ge7QeVC-_F2T$7$3^1*D:(0]H_sq!T;&s-MZG^hu`Zp#JlME^pDZ?iG?g(JD<tY"<N4h%34jt\7bl,Ujb&#"e):bg4iX\D)dmlL5nNo=lD5&;*;'$+N%PQMK[I"$0%Y43*1^W(aRPqP0Lk5?%Aa&DdU-pLTJa=nN4Ua6Ir'[S%j$Pm7G#Og_eC?#6>V>+dqgIRKOtBb[+rST/'NlY!R'Q$%nlHt(?(RK=q=T`+25!r-=Olu**TQb'j3-UE3u,F/nUIiZ_^J?MO)_d/%B4h.ohTMoh@A7sARFd>p`?gE2m7k1mDV?2Y9onukX/0!+M!"B3FEN/-R^IIUm."6SC:U?cY8>mdY*20OSue1&)<fJ?aa+#.;ulNb%Q--W)IWs_+'[8Z^N&3okRsM9R+:Ka)MI'W^[9Q^CT6L1Hm$Esq?@T(4h"*0mLfdfM$<JU<jj5eKnSN3?6Pb4:-YbLQA@F^3[V^JU%+c!)WmJ$=nGoY&:09\Qng+c6D2oqTCNAL>(457XJlNs+LAl"4%qfRFq[tjR%R-I&Ir-gf4"#,H]Z4RScF!$$]@H\XQgZE6pHQ>BO%+a]7+"%,=5rTl[#+7CqM-WIODGcCIdiI*<9%2k02aI^lAhV1]GiQ'ohJ@@/#1<eT8[TB[ib3jNB!Rp2:a(Or:79VROK4BY0HG+np%p[O0%CO>aP0mq2aI;E4$4iQ465UQ$8aE>P9^fN42d[O%nf,kc'BNl#.?a#QN=<f(FI>o"):&AhW>V.5%`p"O>Zf*JMPX#]9U4jMe%G5?!A$T[2YE$=sm:24Io6EqPs&oR2%CeE=>ceC:g9-)UnIl2K;7guT='A[WJ\'GRqf]a6r[<rE+H_tQ;\_#h?XWB!PN19&hA=%)R%96Nf_oS*&5pOrd_6=t^4eiCIk@E:oucaF6me,PF%\44ON]@h8%<X\*#4l^F+hn^?1bTE/WARRds#M!`5/`$U"@E],EdX:I[&`h7t%L7^[!$2*-=@kiH_`dDa+2Jo4C=sr&3<n\Fs$b*i4!9Z0+:c5;+o_Ft=i=M$hpu\77L>kHV:":dd'uQLkXFZYbp`iV^BN>DhIPEFq%41OYNpOVZ@$hh5W$ak:U(#N.BIu)]^Z"u[K\78RP3Hd70*iTj[0$i01"m_*f%7pDSlRl6^TNg1Yb7%H2>`;kkPq%"]dU7&VU`sN+%c?S\s]_[R2g#iQZD&V5AF(*P'@oF3kGjSqF1PWP[)OG#!5G#,!rJbs.0P\q$<o!-H5eK7Jds9c*jk)pnFP9Q<TUJ'@Yjq^OJJGZ!%S2?b%*/aWa@>+?I!F$q<ElSrJljb7s*,I2%7:WoHBopk6`>ij"i8g;\,OH4U_<1Fn@*'MmjG2:$gf%JY(\i;5N>\sT?&-'kB_WT@%3TK%MBQ1qGN"E33\,R8j[KW2A?L7a8j0+1CF2p;W.CdW/?3^"TTnD[pcPQnRG;h,Z0L4N3]5\X0)7==HK",0K_Z@'4`aI9BmETE`%>,#kQNYs/a$G0(PTh/aE7]*\u;)NM]diaAPD.Kif%`_30If$Bk%F4/qHus`88=65:ifHO("7J-oR")/Yn>@1HNUNJ7AcT?EL$KN!%5@ct;F(n)eZSssgP5c^2r@tC7f*W2<d1U*UR<KRb"9`l`E?m)cFTWB#,_49)rkqPBF@)/+SkS-`/,$>1cuu.nc]7s>R.O$0q8A)?%T3_9lG]St2@-]i8;e-K']k!6QXH1!=r%<bNh;qr1Q>[S%1cEhFN?U^/Ad[n$1%N:qMOXLp,/%A,VFP/IE@k`g2\@dpX4tq*0]_XC%8aN=R'>!>$*(4nQbq.L$Zuq*K^3&jUd:DHCkae8qm<$]N&/oj%m3t$Dfdk]-cA\DNCg"S^Mq?dA/+XKQgZ$p7U^FElUD(?EfeXY\%,!mVt6qDPs\Lp\j8CjlmDigo`m`oeh2GgFM0OBAki1;]=jEk#q:Q%Yu8n'<.lo4+Li$&lnKSi(X5p$GQmT@3PHSH"i"Pp&]LTVFq%(/%s"*!6"AZCl=RZ%X!CF$\tJ/J4(e2Q^^cO6eLLne#`[U^Uc<OKuP#b%UO"_]t.TCgU1+_2\d/=<An]]0pK=SU,tL`H2-@;=$;t%`.t?1m9m5"a\qeSYA?I[f>9_1Q2t"=/8P<5eSHhQ)/4`t+=Te.U.om46l+sdLYYn"2!\W(#Kd%`0#G^o/;^<O*#KYHig`C^ehpq_%Fu6ZY]ED$q5-gY)LaCPl;odKY>t$V?]\.AO7&oe,LeeecbqnMRV!:Wb_I7*;.O>p>O5k-#DChuZ?7%HbH9G-oiA5Zim"]3imiY&P%=(k&2:*sUfZ`&:%o7Bmg=uDP9_!,C;:!2nA[Ir?VAT::8:t.s98M=GFXM$emm`m<:?Xc-Fdc:V4Z4TnT`Z;BHj(,-p,LT*Tr=7E,%Q$GV'i+lY0/:!^7Z9^%<Uc)e:g!he/K8ISt>9)P^#K]:Xdpk7&_HN20Q<#%I=s2M?.PgG>^A(aOTcm$Ob:kSQ@RSjdU8H*-&Y7f!%8":3m&]HC!fJ_VZfs]F?K0d8i+osf^F]D=h!R.I#LOEs.@:b;Y*EAS?VZGRTFZW?`Aks/%bZiQ.I'Wf7M90#XAq41cYaUc2,]K)(%7u&JqDAEc-,G,nM#ahC/lT/C\dnQ;j%n+n_KOESI5B"gnA79bY]uVJUXJI,MEg6u^VkEK0+g=K)-mAq$"IV-@2,4C!CFIL3=e$/*%LVg+<4E@#2X"AQVJR`Xh@A80/B%%&sVnI0':<=gIB28G8na#>__t*Z,75G1@&K,qcgFJN*9jo,c:CPmgUE)-sn;?67Srdk*aBW;_%hdL+!J/f*@_Qhe)"fS_0\II5(o)L^2TR;7WaDIUTj/uml75IM,SRMD;pJp[nV8D3'kdG0jPr'a?3h*^DeC:oaa,o>>!^h#O3L5T&%aX%&CDLQf,$#+K<jf-%sfNc7XV8L[c'<H5"@?P*D.RO2T(\qHa6SN/^^W0^p&4Y!SOim70)K6M=:a$H:3ns)bZ,^oUm+mgNL\Zoh%V99R5:tlTr3$9$pjd_?ho9]!cd5%;dGs",T[N9(=+rYbpLXP.]oj('I$T4Y=DPk<M2AM`=Go-'[<)I2L]rN&/c1B[\$73b%aXCBg%eH?.kb1FI;Tu^\Y^LS\oQOMd&SZuUg]u&a35Q'JqJ,J:)`T`K]YL()5g])ai&`aI>WIIiX^]>uE%0@'E?Ru^CU[;9K67Pm9$GqmF%-V<<CKiS=Zc$QY[a1TlD]Eh3jF.j;q'cOFHnbHesoUWI>&W2f5.'a]##X%a&UA63Y+>T%kMYmj-Vj(k*72Fq048BiXdl7Rm,$prt%lQ2[:p.sRkg[>f5FE1:o64q<ZK<c15#qmiVhsVB?Kk0'P?48`u'uGlk%;mB&plO/W?F"79W%q*oA1[I!iPeG*6j/UV:5X]@-Mnpu%(o9-OKGQ!4+M=pVK^%T3:3\M!`Qt$4+AcQD&7.V6kJ5[p]GQK2M!tHTL:su]GVMgkf(KJFotHUY@MGgP&mgNM5X]iORK@7:?Aqdk%8A^9^#W,(s!L_YHihT(gA?<NO01J8X,.nbh7uDs9U\%);iPd2c;C&o*XRlNVRpf9j$u0"CatPbkU^*e%S<86/6$Qfa.'\p\]GNd>%_V)g-R9BcQn7)%OcH4Z`]GQnL,DmrU15!4l8g?hP`eXg&<6OKSpin0K75P..O_&nc]GQnN,C8:L(l,R-_M^-<f$t#a`>Da)D1i^8%GV+B7i@+?WFHQ!#N$Te>^&aH(mGiZC?&WbMooC%&i(,N4M_VO9LE-FE94Dn:G6gI.0gr8i\q[0sUq8mSP=hg,mK0[U(70+ZUXEUJ%Yu*@NU:V8_b$+RrlpiA@#k&*UNfJ2tj#El5Uq;0Drh-kg8_8@;>sP-qrQ`%2=o'/Hn;qWGZ/g:sIP[n6W)o,LU>Cn&eb,oCMM@&o%L8E+U[1Bj,;(+\#G;2\j46qMR:TMiJ@",XAUq<RH::^h7$nWgj/k."d+PhaRC7$0B]7<;gX?h&=KlA]VMij.(kUrlYOmZ[(\gb2u%B]f5c]7<ZJ]h!>J);g?o(YB2(qP:a%4+q\lfLP[omU@G)L$1-YWQZaG"a22-rCD,eP.jD-(YI(.#MfPoXH=da"_@SA$f/cmc9oub%5W8'-7<^JLThohIOK#1e]/<E_Om"D?Mk(!^$^e@!7<^I!r>+2m%-#Mb9b'J"+OOJR_GNV1$R6,UZ..Dm^g^d(fYUJV]h*GLfo]:C%R%8\@(aQbE/9[9a0?Web_@)kV.c;=0/X!SpKGQUr6K+L)@UuK)KGPkq%M<#42Y]]c]GQ@0JqOpb)i7".J]!\4,iM0PA4:_tZ;k%\%(F-766$RrjSa0"e$S)4:3Fg>$W!!hIQ5@S-KGT_Io14*,7tbYC_@+FQT[E#L?!3fSgmsVA(?#F-X:cl=KiP+l'1d?K)0Nq*08bAs%KGT`g#n=`ZI&-V#n7#p4]G"V1_F[&1MrG!HiIuQ7YtBGB/'b]nma4qQ89e"E@1cg.?]G"R_MaPu2\BAT68NW)03<k1#VSX_&<$$e%A21Cr0-E>_KGTaB&&O6eV:[!)(l<d"n,fmT5X]j*Z4Fg1OX8p0]I:'m6?r$kd/KZR$i]9ac[YrM09,J9V4YPFY8@.*8A6GL`(T*u%/L?r\,Y@?S6[khTUV%jA5>bB(kU0]"8Nk>iRIh.>qk0Pua`c\9'@K1o:KSSRXpO>?52ngdX>R_U%[L47j`_TQOab.K[1E+j)Q5[p%`$d_eUn8Kub96aOfsZhJ$TI(eJJHnVc-Rqg9@?Upb%3:`/5r?in>.`HNV!l/JSEM-e?Fo('9I4983[,*XDj9X"Q==I:I&rLcqiSQ%TZ/Bn%(':C'LRk+:-aBJCqU*&b./o%MAepGJ-&c5g-GcISGnCC%h!G>D]dXl(f^@"90UM"9T,*@cjG=oHmSP2"iX#50i:c_$#D7%%MGY5:Q5odn_si;Q\?Vj&Y]/]VJc[;t\Sa/6q4rDF0S*#UY#1^7Kh)9#o:(u]2>^*@i=#X^V1=-<"Igef7OFp"5qusXD^0;=REmd9%;G`>&V2V4CJA8m&Ra9s'Eh,`e!QRR:O73?*5e;C9S&/kgZk:#\<t`Z<Jn"(IT7M',X4o$N.)sO<PS=gF@cDKnJc]hV5_A3!70=6(%PS=gNfuc+!+)\C=3!BIj4\[kF\"0dni/=/L:'q?8CP>83$4?AX?PF47m##II5lo;rJ.X4Ycm0t2@)R:*d)6+u[o`/Ac*))IWQq<4%J.o&mM@QG%Afi]U.,]Vk'nV$H<2thKTRcXZD+Y-B3;I$&0WR@<kGGp@-q5M_?oW-H,Q]^@m$ap25sYP)qOjJuf?2i<Zem2'%A]X6%Q-pj)-m6taKq:T-T`kV=lT0>komW4@[AU_e.)r)=0Mt[)*Oti75lhi<M%gYk%WSIonFK0Rm0!TH:#ml[Bt8nT(JrQ1'C9.X<#A%p%6%S-n;NcV515=IW5ljEI8d\rU$53E'kTp?bSU%@t"U-0'O^dou*Q4bH(i8F38dYoA!,b5':fo[<#6b8hPR&HME1^lA&d:^A:Jt$=%9hYm$Cj*W^@A%$C7'j,ADWkl"2NAls,`0T;";EP&e-H[`_!L;+M:q<ge.3T%_16tG:`tX3Kn'6E=R6A\5QRW381a&6/?0+Q&ko`s%oRm>]LboL0(</MHZP-0nK[JRFcS&$;RL=[aoDV&jc7ME7[>9EDbbWm2$47c/Rd$K<5[11+8KR.Qq3af?JR`qQ:f(9+kQ_7p%e0!S%61Mf$K7^s:a:AUb3"CX!,EU%.(+07hS;opMiSNd<<(`'6ieC2`VkC8UQWW7<R+V4#5uI/*;G`<<pi=Ud98S1n3b]k4(mSoh5"#=Z%LBo<d.uNYD%KUm!#WU6UkXdAd";DUJ-NSo%.j"m.E.15S&MCDWH?icip4YJA,d7W=HP5j>r0S04L_#/aSrDn@L<<H)"@l3Q;*o8"%:lOb!('VZj/LMc<@>jZFmUcQL#*Hh?qaZ>;\p^BNd"!Vh2^g*NSU6Y:'KqA?76psB*bc<&4_lnX1&!bn*i,Im=o9BL$HT0=%RpP4%&;V>@'Tbn#j/hZXA0;%E03f!_TE%A'`fIrhDOLa,T]d.S^F:QR.q&,@]4Kbb$46kt64a7RauK%eqFD5+I>9Wn-MX7-YQ9-u:giLh%cqrXV=e\GS!L[nL-'FHoN()!QM-SbJ.!d2D#T=&k1l=OOlCsDqU1Yd0BIJ2'Ycsl!SjiCh_>QN8ESUX#^K[WNOh<aU0Z["`fk4/O%hJZ>h%\[ic*4V(BHXnK)'Y^7#?4i;G:dE&U_meDh_oDX\$Y=FM"Lb-.HbF=2`>4niZ/2,b=BlY4Z@sT2-T;SC/F3ecVWM9i*P:;p%"^>;qo0g2RLO3`J?O>Mk:l,!@C?bdAHQeW`-IKAi1t5#>EC@Ui#NEgr:dK.S>JOQuUP7r"dscC45<p0^doT?2HDE)CBk#,!7i=nL%$#_V]nj-"]('eprJO6db][.?!f?RV$>):otQYdQk`u@=C*H4AAL]]9o;6FN@K]kM]c];=r1Klb1&o4!`9buRrA<A.%2[J)LU<dAF%U'm(@Un#P.I5:2[8:nD4mTo4+00*.rDW-pB7E0&k'(G%NW&g^Q'V:s7`1r^6K`7)/U9?<knL(tKlH^>r&+F/0[q?OHpq_927m("g%]TDoN\p)FO90i2"PB**XKkIRA5!opj\ABA0I8<Z=OkE7\BZC1HS^YK8e#=CDi-Ks-=e'Ohr5`[b8nMo1d<<Y/08:`mE@d4G?n&)&%cc%RaF&?T&If&::M=7<?h%A[XY4O9EXtYemn.5^6TOS>7QlZ!9(jSMQ-Y[H.:5>8f+L;pT<4_-9S6fbrfCC(FkNBPJj$MjIK:'_T%75m8gJotJ+KRZN)]8)BLKV(?;B_dGmg<!fqS5Wn+a`"+"1U7bTh3u*#joE`kVR&:O]#pe9o16`Gel8/s8K\DjLmKM^V<uq=Mj"q(%Yc&<U9s_@u0+kaP-7BAd6.T'6&c4$kESKO?,YNe9,2Q">mH?+:^=@@ba*5l%B*A4<"/7J1',K).G`g(iFS]Sp^LhnGDl#<HR<m;A%;0UZ/q,k9((ic./1<=iPk94oU=_ot-p7u`A`uQ7sjCRMV4E[:4*$eD(P*AA(<Ek4[!)YS4niIb:nW;Im<*jhmBdSYgO5X;g#>7oW%h0+A=o`3RhF?.lR_j`(U?$CrK+rU_OBckRXQW\A`!a0<Q<`"9K;-CCeHSEoU'N?B;GC3BgS%clR*D%.ZN+$`%c%4uABDEcW:p#Z7%S'RH8=NPbi6s5e<>sq,Fq&d,&V+X6`A7qT]8i4qoZG&Hi)DAN'F0&?9,o:7Yh,^<&<@G*L9[9^icjp;D4?TJ_4.1/DAk+U,Bt*"5%>]D^EPdi3K='?C=L=3_t?#b[$))k]`Xm]M=I-5s3R&[6!.[dS.N5!Hc\)/22F)OLu^R^O:`NHDM(!'4:.DqX\G(9D'NL$E`Nc1Q;%g,IIj^HY\la<hS&7Fo5A57@"q8[4m]WYX:ap3tW6a5bA+"lh[O)W**+\?fL%rP/0K?W+30=(h^2o05D.Valg`![M#+T!*"(Q@:'e%]1J4Q?d&#jGP&N^Q7pAZ*6VF@iHpFCX*h<[V0;e]qqcIQTt_uP*m9o33\"-2Ik94AQgfC=Fg;n_9taaVHGoEOWs[2)9D3Y?n&p.d%cWC,_2=LR"kc=aZhbj2^RD//3I:(h2j@ipC<@\LZYr4d_nIqNikS7#6%YAB)a-fYer3uM#U]T;09bsq,PB1?RhT<'TZfQ<1>F@S+%ii0$Zh>1-7ao%6c_M*r:-(Nb1C`:9Z4*L`aB:,UIoCnrV-cNDJnR?l'j]`\;Qb-WTS-Q`o583jp,J%!66Y-5q,`Nt-R^&W+1V+5l%.3pqpI>7XE5#!6H?27a#pG+hYU4:<i&_35`riJ)aXNPt=>6KlbF^gYqg^?%iOKc!:@8Z@k@?]V@R!A+;d3NB0TjW@`'!tXQ'T3_m%_\'4Z^.3^."!q+O"&lW80O"a'!]KN:R;grp4#!lp*&Hqfm#eugSsgD']*N$bR@tWjp_]"gU\V\PI401F`kWoGI\ZPpcq&CHHHh'%%)Pu%#:b+W_`qCdYc(!Hc<$ro25aYS0W],NqPETuSmfZ\5+*UiDU>K%$D:7AX?t;B+4.s+3@i1ZOk"KsA>@!pqkaa!P[W-P[hSEFj%@Em51Udk@J$<;Z\CI9?u`fARe("%h(I!0*5H!#2aXS?NGiiiT/0k#OPV`+)u4PQn9@m@':S<tehdAlF(0Cs6ShK;9B(,j%N]6;F+%U/B;>Hb`qB%m(\X%IbS=JiCHGCf;YS!o//Y54"P+d_H-T@`:cN#9W6BBJPORCR]kg.hB7EZLe=M&Uom[rDG'm-@GNn+N>hAQ5SF0%%<`X48=Z*"Ftck6ijfn157hOF?++QRU$*,6\`1XP72U\Z'"c/VeQ-h*EHRZb0<aCKK@!`R@=1L\DTN<>+J_HV;@N8V542>=":>cK%[V7Ir%HAL7?<(,G:DXUBp)u5[!.u@ZV\,neG8tKG/@M+.SM"#NU20lm+BI!:\nhh;H>MXQMK1eH.AQ.uh.bDCcM^(+2Z(j[VMjq+%M.q:SQ,U?'9XBkVW(6f]<V(r(f?Z9nTemnVEf]TKOp*6D+gak]KPp6rl+hZ+.d"D@WPEkA#j48h"FpAYk\*3PV,.nGfZb`p\Zp/-%E4m*Qls>-'SN;`0_+T!%;;#hF-!P]c`R.ZuNks-9P!m,O)LK=j71usJ-McT`l:E$MNin^bq@f(Sj#l3@mk=2b9"<thZ@aa372@td%541K']->>,bI`k29Cqd53P%i.:`Nc&M5=nWk$G88QEHh'pnB?l9S?-&0GHDmQ7e`,@d,Aa8'gn.3F==COKJ=g@Hm&K*?^ZNT"gF"%*)_mR+"U]`@JjNt.bR4p=nTr"F_C!QY[bcsj7(1=KciT8"(L/>#=(pJQEHe^'"ZAi6=K+.aZ6VJ),g.DdT'H_`6ngi_l/Xb<?O0(%FBL!3coh+QOb=]`kpjb\bj`[q>M\F7*7TmSklQgB+g<CSiC:(o!L=Ge)Jdg-O&IT8n5colOXmk*S]`tEV_iE>&J'4aVDu.VrckY,%\u]Q*K;5K_Zr2(c%:ZsXN\2;'pPYe^j:@3-UT=%=M5(F`ec!>3<Q^EBd8g#d`R-R6-aCY<ARO@"7i)Y0H84LEZBShN7<3L8K&tqS%_@]HPM]?$Q%jOT2;=o?WF?rBGQ5j0TIj.E'?'''Enm*T;%WZ[-5p5\(3P#V6rSZlp7tMdWk>NV',`XLX0T22=8(T0U8*&m>R$4EQ%rBunG`gi-cb:qZe7i*HAC8:.Z-&YE&**k3h04.>3Y548#>qan1'&sQ7$+E]q73jYro,0R"W_?8[Gs?=keTi9-f1X,dJ;i7%d8ac=%kc/\eU-[fc><+mh%Vds`h8n$0Orc&oI6NK7M"i;Hia/o8[=\:c'<NZ<f\8JW7AmnkW>3pg()0@cq6UoeMBVZ!%I2bE.O!')1u%5T%.,3g;]')'@?t&U][E?ajn7j<j1:`p[j[:>)ag3VZWBEULppK,3<t\K[_9L4XU+A)5p4VX#/"BqtPm*[djrb%!,/+).4H;[ZFtfM5%SK)QD@-LA6-X\AqEND5VYB*i)IR=lffb_]p.[+`'"ua#[hlj:./%B*Y@Ir$5!*N9dH9qr?hrEBbDiF<Y*#8\IY!B!ZFqM(G`\"f.%6pCmD#f%?e0nngn-!/)3$8;ZA5MLnqE<b8Fls_M*/g5flBS/u`@L#]^1ESW&&F1,S+c@`7<0i>]+;58gP\=6PPY>ine!//DBt$u#%(B?C$Juj49Ar=K4%KIW\5oC412YgNs"d`+O6:9JKX/8!u!cE_c@JN^)PZD^iP))!G*<;:EHm;SeHf=bRoR0]6@jLk%`[8F$jr\6g%`L&;M%aO?5d#81'b0KK-WpD@q%6J]SY$@*gHbIMMpFaRQ0GA#]^e'fNHqDF,1H%\AhS1Q#IOqcn_c5K/7CMn94#CD=<d@chc7c4l%mnt/`-+d%1,oO?Mf5)61!6KD5O#irFNZpPRA<?X4\#@GO&l`F2V\H6;$<1S<RBdICC4%=^h42It_[\.*T6mh^]#q0\50<441Z'!2%D:cfl\B!d6habCL+iBk@4Z^57o1MZhOD%P_rkcL<Je/L*AI"H#>Po5E6JMQD]^6jYlXm/-kQcDV$^=X;YpCYU(e(dpBH0UD9HofK%V1D=8CCGi)'h?:26m]0r'=+"u6D%O[1(V?uh5bMT5Sc#<q8gR9l(S)1PPNSr(Q01>(.KJD*mnpVQKE3bXPc`P=IT$cNm%1!.V;;/%.!e"gjR!T!`iLs8R<<@QB/X'm7p)O`WNI3Y)/Np:KHVZnfb'69I'VWIp>#im$VWqT.7h1[X;BOP@Ue9<5ZPn&aJ9]dU61(Zl43EX%&NTQBlTi5MSoQDU&s"@0P($t-4#4Z#,0g7,6WlDO/^XUe.F=FRN-2;=I3IWo\tUd(,TSigf2[a$&@PoX2oC`85#IU["0_;0\]P!O%-m[4q5E["3GL?>pEh^X`f!reW<EIl9)Aa8)8Q?ONbY-O$]H=APIJkIe&[!ncAl\PEM$ggm2X`1So@]KYF%qh!nieZd^A1gUATZ&1%g4Ah%@t-R2Kq_SeYc;?oG-Jrda9ETKHNnP_+#HRULbViq,`?.#6:?I]j[JQnT[IVh]"1oRN#opVPV%l"3+R[t3o-=/J.F*_Gl*.[%aRolXm7*Fj&[*+c<&]J%m443"e47WqNHJ)9-+r/<4`tZd5ol_)R>d0'9r$2]+n`ZVA3rYC0L6KP)tU6$N0ushTpGUr!6>R]4K<lQ%f>s.'0\/b.6WCBWVXZS4s.7&_6TI::_XTWE8h314Fc24,FB.&>J=9'4r!DG)eWnYg7@"IkRlC![jriBGJNZ'rPO3sSa*NFPknTEN%-A/*>lW@<%G%=^mm@kJ?h95(QnLBkh'?Jtaj:>6AkIaq%JSTCrQH1.S[^aOiHi626A2`t.hXq43+aWR9[[;-W.#d[8AC=#69H5V!%\=%RY\bfJ_OhW@iZ?E#g'\0I%ig-KO7.:*jC8t02f:@1h,nktIR"h:N1>X(+6G<:Fb@p6<b5)VIMJ21V4WBqI1M5E)Uf4]sZ$9+]%6Y)(0ABLa^&#Rh&,NXZ?;=fs.qCJ8WMMB*_=un<I;LZ`*Q?SR#%q#I<app<:^.T=<QBIfrk.A^1>\1pNh"-<)`MEEp/JcVG=[860%agOT8qj+pYQ>\,3^]1c-r9E2;L\5$Rm^N5hmsk2k5QC_$s7V4TrTZWGo]r.LoC%2*mpCSDr=?[B_b^=(k9#3Mm;ILKa.NA+oDa(7%oAd$(s77?3pq,G`r8Smug[G+X,gTP:q6,8?GQ73js6tL<"a0GO~>%AI9_PrivateDataEnd